{
  "stats": {
    "suites": 18,
    "tests": 29,
    "passes": 29,
    "pending": 0,
    "failures": 0,
    "start": "2020-12-16T11:00:31.469Z",
    "end": "2020-12-16T11:00:31.516Z",
    "duration": 47,
    "testsRegistered": 29,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "a8ae6b0a-a24b-4712-95df-871e479145de",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "c73a6fb1-8aef-4967-a5e8-86407776b19e",
          "title": "exports",
          "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/exports.spec.ts",
          "file": "/spec/exports.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "exports the `odds` function",
              "fullTitle": "exports exports the `odds` function",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai_1.expect(OathOdds.rollCampaign).to.exist;",
              "err": {},
              "uuid": "1a8ebf57-6f47-4c17-b21d-ac8075d00d35",
              "parentUUID": "c73a6fb1-8aef-4967-a5e8-86407776b19e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1a8ebf57-6f47-4c17-b21d-ac8075d00d35"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "db041e00-2568-4c8f-b4eb-88a5a821ca1e",
          "title": "OathOdds",
          "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/index.spec.ts",
          "file": "/spec/index.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "efd2b35a-8d03-40a8-9ea6-bb88c91d9e84",
              "title": "rollCampaign",
              "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/index.spec.ts",
              "file": "/spec/index.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "",
                  "fullTitle": "OathOdds rollCampaign ",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expected = [\n    {\n        odds: new src_1.Fraction(1, 12),\n        result: { attack: 2, defense: 0, kill: 1 },\n    },\n    {\n        odds: new src_1.Fraction(1, 18),\n        result: { attack: 2, defense: 1, kill: 1 },\n    },\n    {\n        odds: new src_1.Fraction(1, 36),\n        result: { attack: 2, defense: 2, kill: 1 },\n    },\n    {\n        odds: new src_1.Fraction(1, 6),\n        result: { attack: 1, defense: 0, kill: 0 },\n    },\n    {\n        odds: new src_1.Fraction(1, 9),\n        result: { attack: 1, defense: 1, kill: 0 },\n    },\n    {\n        odds: new src_1.Fraction(1, 18),\n        result: { attack: 1, defense: 2, kill: 0 },\n    },\n    {\n        odds: new src_1.Fraction(1, 4),\n        result: { attack: 0, defense: 0, kill: 0 },\n    },\n    {\n        odds: new src_1.Fraction(1, 6),\n        result: { attack: 0, defense: 1, kill: 0 },\n    },\n    {\n        odds: new src_1.Fraction(1, 12),\n        result: { attack: 0, defense: 2, kill: 0 },\n    },\n];\nconst results = src_1.rollCampaign(1, 1);\ncompareToExpected(chai_1.expect, expected, results);",
                  "err": {},
                  "uuid": "cba352cc-d974-4a5f-b9e6-2035b6ae5534",
                  "parentUUID": "efd2b35a-8d03-40a8-9ea6-bb88c91d9e84",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cba352cc-d974-4a5f-b9e6-2035b6ae5534"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "17fefbdc-d631-4fba-b4bc-61a62e968b48",
          "title": "combinatorics",
          "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/math/combinatorics.spec.ts",
          "file": "/spec/math/combinatorics.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ad1713e6-078d-452d-8000-b227167e221e",
              "title": "cartesianProduct",
              "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/math/combinatorics.spec.ts",
              "file": "/spec/math/combinatorics.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should compute cartesian product of 2 arrays",
                  "fullTitle": "combinatorics cartesianProduct should compute cartesian product of 2 arrays",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const arr1 = [1, 2];\nconst arr2 = [3, 4];\nconst expected = [\n    [1, 3],\n    [1, 4],\n    [2, 3],\n    [2, 4],\n];\nchai_1.expect(combinatorics_1.cartesianProduct(arr1, arr2)).to.deep.equals(expected);",
                  "err": {},
                  "uuid": "76eb4abe-371a-4345-b6cb-a15614df5b98",
                  "parentUUID": "ad1713e6-078d-452d-8000-b227167e221e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "76eb4abe-371a-4345-b6cb-a15614df5b98"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9448b58a-15bb-44ad-83d0-27532f8252c6",
          "title": "Fraction",
          "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/math/Fraction.spec.ts",
          "file": "/spec/math/Fraction.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "fractions with same numerator and denominator are equal",
              "fullTitle": "Fraction fractions with same numerator and denominator are equal",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const frac1 = new Fraction_1.Fraction(1, 3);\nconst frac2 = new Fraction_1.Fraction(1, 3);\nchai_1.expect(frac1.sameAs(frac2)).to.be.true;",
              "err": {},
              "uuid": "9a321219-61e3-4494-8aa0-96296de0d1d2",
              "parentUUID": "9448b58a-15bb-44ad-83d0-27532f8252c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "fractions with same numerator and different denominator are not equal",
              "fullTitle": "Fraction fractions with same numerator and different denominator are not equal",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const frac1 = new Fraction_1.Fraction(1, 3);\nconst frac2 = new Fraction_1.Fraction(1, 4);\nchai_1.expect(frac1.sameAs(frac2)).to.be.false;",
              "err": {},
              "uuid": "559785e7-14a4-48f4-b2db-baa6a890460d",
              "parentUUID": "9448b58a-15bb-44ad-83d0-27532f8252c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "fractions reducing to the same fraction are equal",
              "fullTitle": "Fraction fractions reducing to the same fraction are equal",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const frac1 = new Fraction_1.Fraction(1, 2);\nconst frac2 = new Fraction_1.Fraction(2, 4);\nchai_1.expect(frac1.sameAs(frac2)).to.be.true;",
              "err": {},
              "uuid": "ff4f085e-98d2-496f-8bc7-f29984a74a44",
              "parentUUID": "9448b58a-15bb-44ad-83d0-27532f8252c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "can add fractions",
              "fullTitle": "Fraction can add fractions",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const frac1 = new Fraction_1.Fraction(1, 3);\nconst frac2 = new Fraction_1.Fraction(1, 4);\nconst expected = new Fraction_1.Fraction(7, 12);\nchai_1.expect(frac1.add(frac2).sameAs(expected)).to.be.true;",
              "err": {},
              "uuid": "764f8c6c-8b55-4162-afff-42e23f214c36",
              "parentUUID": "9448b58a-15bb-44ad-83d0-27532f8252c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "can multiply fractions",
              "fullTitle": "Fraction can multiply fractions",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const frac1 = new Fraction_1.Fraction(1, 3);\nconst frac2 = new Fraction_1.Fraction(1, 4);\nconst expected = new Fraction_1.Fraction(1, 12);\nchai_1.expect(frac1.multiply(frac2).sameAs(expected)).to.be.true;",
              "err": {},
              "uuid": "d65b920e-987e-41a2-94be-0595907df483",
              "parentUUID": "9448b58a-15bb-44ad-83d0-27532f8252c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "can compute to float",
              "fullTitle": "Fraction can compute to float",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const frac = new Fraction_1.Fraction(1, 2);\nchai_1.expect(frac.valueOf()).to.equal(0.5);",
              "err": {},
              "uuid": "a735d242-f5f1-4190-a3f3-11d75c93716d",
              "parentUUID": "9448b58a-15bb-44ad-83d0-27532f8252c6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9a321219-61e3-4494-8aa0-96296de0d1d2",
            "559785e7-14a4-48f4-b2db-baa6a890460d",
            "ff4f085e-98d2-496f-8bc7-f29984a74a44",
            "764f8c6c-8b55-4162-afff-42e23f214c36",
            "d65b920e-987e-41a2-94be-0595907df483",
            "a735d242-f5f1-4190-a3f3-11d75c93716d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "8eef51b4-148e-4330-a8cd-b1eab95891bb",
          "title": "odds",
          "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/math/index.spec.ts",
          "file": "/spec/math/index.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "with only 1 random device",
              "fullTitle": "odds with only 1 random device",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const d6 = new math_1.RandomDevice([\n    [1, new math_1.Fraction(1, 6)],\n    [2, new math_1.Fraction(1, 6)],\n    [3, new math_1.Fraction(1, 6)],\n    [4, new math_1.Fraction(1, 6)],\n    [5, new math_1.Fraction(1, 6)],\n    [6, new math_1.Fraction(1, 6)],\n]);\nconst expected = [\n    { set: [1], odds: new math_1.Fraction(1, 6) },\n    { set: [2], odds: new math_1.Fraction(1, 6) },\n    { set: [3], odds: new math_1.Fraction(1, 6) },\n    { set: [4], odds: new math_1.Fraction(1, 6) },\n    { set: [5], odds: new math_1.Fraction(1, 6) },\n    { set: [6], odds: new math_1.Fraction(1, 6) },\n];\nconst results = math_1.odds([d6]);\ncompareToExpected(chai_1.expect, expected, results);",
              "err": {},
              "uuid": "2ae08734-e240-4de4-9a77-c9805f7f3f11",
              "parentUUID": "8eef51b4-148e-4330-a8cd-b1eab95891bb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "with 2 random devices",
              "fullTitle": "odds with 2 random devices",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const d4 = new math_1.RandomDevice([\n    [1, new math_1.Fraction(1, 4)],\n    [2, new math_1.Fraction(1, 4)],\n    [3, new math_1.Fraction(1, 4)],\n    [4, new math_1.Fraction(1, 4)],\n]);\nconst abcDie = new math_1.RandomDevice([\n    [\"a\", new math_1.Fraction(1, 3)],\n    [\"b\", new math_1.Fraction(1, 3)],\n    [\"c\", new math_1.Fraction(1, 3)],\n]);\nconst expected = [\n    { set: [1, \"a\"], odds: new math_1.Fraction(1, 12) },\n    { set: [1, \"b\"], odds: new math_1.Fraction(1, 12) },\n    { set: [1, \"c\"], odds: new math_1.Fraction(1, 12) },\n    { set: [2, \"a\"], odds: new math_1.Fraction(1, 12) },\n    { set: [2, \"b\"], odds: new math_1.Fraction(1, 12) },\n    { set: [2, \"c\"], odds: new math_1.Fraction(1, 12) },\n    { set: [3, \"a\"], odds: new math_1.Fraction(1, 12) },\n    { set: [3, \"b\"], odds: new math_1.Fraction(1, 12) },\n    { set: [3, \"c\"], odds: new math_1.Fraction(1, 12) },\n    { set: [4, \"a\"], odds: new math_1.Fraction(1, 12) },\n    { set: [4, \"b\"], odds: new math_1.Fraction(1, 12) },\n    { set: [4, \"c\"], odds: new math_1.Fraction(1, 12) },\n];\nconst results = math_1.odds([d4, abcDie]);\ncompareToExpected(chai_1.expect, expected, results);",
              "err": {},
              "uuid": "8fa91e3c-4ee0-4f21-b573-ffe7dcc58a20",
              "parentUUID": "8eef51b4-148e-4330-a8cd-b1eab95891bb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "combines identical sets",
              "fullTitle": "odds combines identical sets",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const d2 = new math_1.RandomDevice([\n    [1, new math_1.Fraction(1, 2)],\n    [2, new math_1.Fraction(1, 2)],\n]);\nconst expected = [\n    { set: [1, 1], odds: new math_1.Fraction(1, 4) },\n    { set: [1, 2], odds: new math_1.Fraction(1, 2) },\n    { set: [2, 2], odds: new math_1.Fraction(1, 4) },\n];\nconst results = math_1.odds([d2, d2]);\ncompareToExpected(chai_1.expect, expected, results);",
              "err": {},
              "uuid": "cba2e494-bac0-4379-ab75-9063d396493b",
              "parentUUID": "8eef51b4-148e-4330-a8cd-b1eab95891bb",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2ae08734-e240-4de4-9a77-c9805f7f3f11",
            "8fa91e3c-4ee0-4f21-b573-ffe7dcc58a20",
            "cba2e494-bac0-4379-ab75-9063d396493b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "1db77bf5-ad86-44d9-89f9-5d12acfab86b",
          "title": "SetWithOdds",
          "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/math/SetWithOdds.spec.ts",
          "file": "/spec/math/SetWithOdds.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "d9d6852b-fceb-4191-896b-3bb369876148",
              "title": "combineSetWithOdds",
              "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/math/SetWithOdds.spec.ts",
              "file": "/spec/math/SetWithOdds.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "combines 2 sets with odds",
                  "fullTitle": "SetWithOdds combineSetWithOdds combines 2 sets with odds",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swo1 = {\n    odds: new math_1.Fraction(1, 3),\n    set: [1, 2],\n};\nconst swo2 = {\n    odds: new math_1.Fraction(1, 2),\n    set: [\"a\", \"b\"],\n};\nconst combined = math_1.combineSetWithOdds(swo1, swo2);\nchai_1.expect(combined.set).to.deep.equal([1, 2, \"a\", \"b\"]);\nchai_1.expect(combined.odds.sameAs(new math_1.Fraction(1, 6))).to.be.true;",
                  "err": {},
                  "uuid": "e2b8f7db-3d4a-485e-94aa-2df2c10c76be",
                  "parentUUID": "d9d6852b-fceb-4191-896b-3bb369876148",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can be used for reduction",
                  "fullTitle": "SetWithOdds combineSetWithOdds can be used for reduction",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const sets = [\n    { set: [1, 2], odds: new math_1.Fraction(1, 2) },\n    { set: [5, 6], odds: new math_1.Fraction(1, 3) },\n    { set: [8, 9], odds: new math_1.Fraction(1, 4) },\n];\nconst combined = sets.reduce(math_1.combineSetWithOdds);\nchai_1.expect(combined.set).to.deep.equal([1, 2, 5, 6, 8, 9]);\nchai_1.expect(combined.odds.sameAs(new math_1.Fraction(1, 24))).to.be.true;",
                  "err": {},
                  "uuid": "f78b18c9-ce80-4a87-abb9-03a258b5a801",
                  "parentUUID": "d9d6852b-fceb-4191-896b-3bb369876148",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e2b8f7db-3d4a-485e-94aa-2df2c10c76be",
                "f78b18c9-ce80-4a87-abb9-03a258b5a801"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "3d64e99c-1430-446c-b38e-ec6edea6e77d",
          "title": "Oath domain model",
          "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/oath/oath.spec.ts",
          "file": "/spec/oath/oath.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "58a933fc-17e9-4d28-9f26-ed2feb9a90db",
              "title": "Attack and Defense dice faces",
              "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/oath/oath.spec.ts",
              "file": "/spec/oath/oath.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should have consistent order",
                  "fullTitle": "Oath domain model Attack and Defense dice faces should have consistent order",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const someFaces = [\n    oath_1.DefenseDieFace.DOUBLE,\n    oath_1.DefenseDieFace.TWO_SHIELDS,\n    oath_1.AttackDieFace.HOLLOW_SWORD,\n    oath_1.DefenseDieFace.SHIELD,\n    oath_1.AttackDieFace.TWO_SWORDS_AND_SKULL,\n    oath_1.AttackDieFace.SWORD,\n    oath_1.DefenseDieFace.TWO_SHIELDS,\n    oath_1.AttackDieFace.SWORD,\n    oath_1.DefenseDieFace.BLANK,\n    oath_1.DefenseDieFace.SHIELD,\n];\nconst expected = [\n    oath_1.AttackDieFace.HOLLOW_SWORD,\n    oath_1.AttackDieFace.SWORD,\n    oath_1.AttackDieFace.SWORD,\n    oath_1.AttackDieFace.TWO_SWORDS_AND_SKULL,\n    oath_1.DefenseDieFace.BLANK,\n    oath_1.DefenseDieFace.SHIELD,\n    oath_1.DefenseDieFace.SHIELD,\n    oath_1.DefenseDieFace.TWO_SHIELDS,\n    oath_1.DefenseDieFace.TWO_SHIELDS,\n    oath_1.DefenseDieFace.DOUBLE,\n];\nchai_1.expect(someFaces.sort()).to.deep.equal(expected);",
                  "err": {},
                  "uuid": "90d8e37c-bdeb-46a3-9306-2d25422070f4",
                  "parentUUID": "58a933fc-17e9-4d28-9f26-ed2feb9a90db",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "90d8e37c-bdeb-46a3-9306-2d25422070f4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9ea32916-9036-4e8b-ad02-0e6ede755fd3",
              "title": "CampaignResult",
              "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/oath/oath.spec.ts",
              "file": "/spec/oath/oath.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "7f8df727-db4c-4f56-b8d1-6781b59fcf80",
                  "title": "campaignResultCompareFn",
                  "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/oath/oath.spec.ts",
                  "file": "/spec/oath/oath.spec.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "returns 0 if result are equal",
                      "fullTitle": "Oath domain model CampaignResult campaignResultCompareFn returns 0 if result are equal",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "chai_1.expect(oath_1.campaignResultCompareFn({ attack: 3, defense: 2, kill: 0 }, { attack: 3, defense: 2, kill: 0 })).to.equal(0);",
                      "err": {},
                      "uuid": "b454c9a2-9d94-4212-ada2-720a1ad9c117",
                      "parentUUID": "7f8df727-db4c-4f56-b8d1-6781b59fcf80",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "can be used to sort results by attack descending, then defense ascending then kill ascending",
                      "fullTitle": "Oath domain model CampaignResult campaignResultCompareFn can be used to sort results by attack descending, then defense ascending then kill ascending",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const someResults = [\n    { attack: 5, defense: 2, kill: 0 },\n    { attack: 5, defense: 2, kill: 0 },\n    { attack: 3, defense: 0, kill: 2 },\n    { attack: 4, defense: 4, kill: 0 },\n    { attack: 5, defense: 3, kill: 3 },\n    { attack: 5, defense: 1, kill: 0 },\n    { attack: 5, defense: 1, kill: 2 },\n];\nconst expected = [\n    { attack: 5, defense: 1, kill: 0 },\n    { attack: 5, defense: 1, kill: 2 },\n    { attack: 5, defense: 2, kill: 0 },\n    { attack: 5, defense: 2, kill: 0 },\n    { attack: 5, defense: 3, kill: 3 },\n    { attack: 4, defense: 4, kill: 0 },\n    { attack: 3, defense: 0, kill: 2 },\n];\nchai_1.expect(someResults.sort(oath_1.campaignResultCompareFn)).to.deep.equal(expected);",
                      "err": {},
                      "uuid": "0df1be08-ac03-4d6d-b514-3c8704dd942f",
                      "parentUUID": "7f8df727-db4c-4f56-b8d1-6781b59fcf80",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "b454c9a2-9d94-4212-ada2-720a1ad9c117",
                    "0df1be08-ac03-4d6d-b514-3c8704dd942f"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 2,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "11925ba2-4a35-4928-92a1-7f4d50b1db2c",
              "title": "toCampaignResult",
              "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/oath/oath.spec.ts",
              "file": "/spec/oath/oath.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "can sum up a bunch of die faces into a campaign result",
                  "fullTitle": "Oath domain model toCampaignResult can sum up a bunch of die faces into a campaign result",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const rolled = [\n    oath_1.DefenseDieFace.DOUBLE,\n    oath_1.DefenseDieFace.TWO_SHIELDS,\n    oath_1.AttackDieFace.HOLLOW_SWORD,\n    oath_1.DefenseDieFace.SHIELD,\n    oath_1.AttackDieFace.TWO_SWORDS_AND_SKULL,\n    oath_1.AttackDieFace.SWORD,\n    oath_1.DefenseDieFace.TWO_SHIELDS,\n    oath_1.AttackDieFace.SWORD,\n    oath_1.AttackDieFace.HOLLOW_SWORD,\n    oath_1.DefenseDieFace.BLANK,\n    oath_1.DefenseDieFace.SHIELD,\n    oath_1.AttackDieFace.HOLLOW_SWORD,\n];\nconst result = oath_1.toCampaignResult(rolled);\nchai_1.expect(result).to.deep.equal({ attack: 5, defense: 12, kill: 1 });\nchai_1.expect(result.attack).to.equal(5);\nchai_1.expect(result.defense).to.equal(12);\nchai_1.expect(result.kill).to.equal(1);",
                  "err": {},
                  "uuid": "5f691d5b-6f21-4ed2-b557-1e6b3dc8a16b",
                  "parentUUID": "11925ba2-4a35-4928-92a1-7f4d50b1db2c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5f691d5b-6f21-4ed2-b557-1e6b3dc8a16b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d08b59ed-b039-4318-b138-89f5401088fe",
          "title": "utils",
          "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/utils/arrays.spec.ts",
          "file": "/spec/utils/arrays.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "e00952af-4e99-4d24-8175-6bb3e6933a83",
              "title": "flatten",
              "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/utils/arrays.spec.ts",
              "file": "/spec/utils/arrays.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "flattens an array",
                  "fullTitle": "utils flatten flattens an array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.expect(arrays_1.flatten([[], [1], [2]])).to.deep.equal([1, 2]);",
                  "err": {},
                  "uuid": "145b924f-1c3f-4960-881e-276b1529326f",
                  "parentUUID": "e00952af-4e99-4d24-8175-6bb3e6933a83",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "145b924f-1c3f-4960-881e-276b1529326f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "81120daf-c995-46fd-ac59-71c2a0b56e9b",
              "title": "arrayEquals",
              "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/utils/arrays.spec.ts",
              "file": "/spec/utils/arrays.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns true if the arrays contain the same values in the same order",
                  "fullTitle": "utils arrayEquals returns true if the arrays contain the same values in the same order",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.expect(arrays_1.arrayEquals([1, 2, 3], [1, 2, 3])).to.be.true;",
                  "err": {},
                  "uuid": "ed7a98f4-70af-4e14-8450-32fb3b3259e5",
                  "parentUUID": "81120daf-c995-46fd-ac59-71c2a0b56e9b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns false if the arrays do not contain the same values",
                  "fullTitle": "utils arrayEquals returns false if the arrays do not contain the same values",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.expect(arrays_1.arrayEquals([1, 2, 3], [1, 2, 4])).to.be.false;",
                  "err": {},
                  "uuid": "0946ef9f-a3f2-4fbf-a90a-553119e06203",
                  "parentUUID": "81120daf-c995-46fd-ac59-71c2a0b56e9b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns false if the arrays contain the same values but in a different order",
                  "fullTitle": "utils arrayEquals returns false if the arrays contain the same values but in a different order",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.expect(arrays_1.arrayEquals([1, 2, 3], [3, 1, 2])).to.be.false;",
                  "err": {},
                  "uuid": "e4c7d623-ca84-43c0-a936-a07a0328b370",
                  "parentUUID": "81120daf-c995-46fd-ac59-71c2a0b56e9b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can compare different primitives",
                  "fullTitle": "utils arrayEquals can compare different primitives",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.expect(arrays_1.arrayEquals([\"a\", \"b\"], [\"a\", \"b\"])).to.be.true;\nchai_1.expect(arrays_1.arrayEquals([1.0, 2.5], [1.0, 2.5])).to.be.true;\nchai_1.expect(arrays_1.arrayEquals([true, false], [true, false])).to.be.true;\nchai_1.expect(arrays_1.arrayEquals([1, null, undefined], [1, null, undefined])).to.be\n    .true;",
                  "err": {},
                  "uuid": "e8ffe435-2a9b-4e12-a3bd-8b30f574c853",
                  "parentUUID": "81120daf-c995-46fd-ac59-71c2a0b56e9b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ed7a98f4-70af-4e14-8450-32fb3b3259e5",
                "0946ef9f-a3f2-4fbf-a90a-553119e06203",
                "e4c7d623-ca84-43c0-a936-a07a0328b370",
                "e8ffe435-2a9b-4e12-a3bd-8b30f574c853"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4b5f53ab-a8af-44d2-98db-2fc282a969d3",
              "title": "replace",
              "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/utils/arrays.spec.ts",
              "file": "/spec/utils/arrays.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should replace at specified index",
                  "fullTitle": "utils replace should replace at specified index",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const arr = [\"a\", \"b\", \"c\"];\nconst replaced = arrays_1.replace(arr, 1, \"x\");\nchai_1.expect(replaced).to.deep.equal([\"a\", \"x\", \"c\"]);",
                  "err": {},
                  "uuid": "74651cf1-e39b-48b7-bb88-5e016737f132",
                  "parentUUID": "4b5f53ab-a8af-44d2-98db-2fc282a969d3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to replace at first position",
                  "fullTitle": "utils replace should be able to replace at first position",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const arr = [\"a\", \"b\", \"c\"];\nconst replaced = arrays_1.replace(arr, 0, \"x\");\nchai_1.expect(replaced).to.deep.equal([\"x\", \"b\", \"c\"]);",
                  "err": {},
                  "uuid": "813d3d29-c18b-419f-832f-11a00e4cc925",
                  "parentUUID": "4b5f53ab-a8af-44d2-98db-2fc282a969d3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to replace at last position",
                  "fullTitle": "utils replace should be able to replace at last position",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const arr = [\"a\", \"b\", \"c\"];\nconst replaced = arrays_1.replace(arr, 2, \"x\");\nchai_1.expect(replaced).to.deep.equal([\"a\", \"b\", \"x\"]);",
                  "err": {},
                  "uuid": "5068b00a-02c3-49df-9bdc-717a1afd031d",
                  "parentUUID": "4b5f53ab-a8af-44d2-98db-2fc282a969d3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the same array if specified index is < 0",
                  "fullTitle": "utils replace should return the same array if specified index is < 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const arr = [\"a\", \"b\", \"c\"];\nconst replaced = arrays_1.replace(arr, -1, \"x\");\nchai_1.expect(replaced).to.deep.equal([\"a\", \"b\", \"c\"]);",
                  "err": {},
                  "uuid": "5a9a8503-ffcc-4819-a04e-3339fd6fb89b",
                  "parentUUID": "4b5f53ab-a8af-44d2-98db-2fc282a969d3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the same array if specified index is > array length",
                  "fullTitle": "utils replace should return the same array if specified index is > array length",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const arr = [\"a\", \"b\", \"c\"];\nconst replaced = arrays_1.replace(arr, 3, \"x\");\nchai_1.expect(replaced).to.deep.equal([\"a\", \"b\", \"c\"]);",
                  "err": {},
                  "uuid": "b13a9864-bd24-4972-a06e-facf7748758e",
                  "parentUUID": "4b5f53ab-a8af-44d2-98db-2fc282a969d3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should leave the original array untouched",
                  "fullTitle": "utils replace should leave the original array untouched",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const arr = [\"a\", \"b\", \"c\"];\narrays_1.replace(arr, 1, \"x\");\nchai_1.expect(arr).to.deep.equal([\"a\", \"b\", \"c\"]);",
                  "err": {},
                  "uuid": "14954d91-f1b3-44cd-8c1b-1016588484aa",
                  "parentUUID": "4b5f53ab-a8af-44d2-98db-2fc282a969d3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "74651cf1-e39b-48b7-bb88-5e016737f132",
                "813d3d29-c18b-419f-832f-11a00e4cc925",
                "5068b00a-02c3-49df-9bdc-717a1afd031d",
                "5a9a8503-ffcc-4819-a04e-3339fd6fb89b",
                "b13a9864-bd24-4972-a06e-facf7748758e",
                "14954d91-f1b3-44cd-8c1b-1016588484aa"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.2.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "index",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.1"
    },
    "marge": {
      "options": {
        "reportDir": "reports/tests",
        "reportFilename": "index"
      },
      "version": "5.1.0"
    }
  }
}