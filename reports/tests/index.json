{
  "stats": {
    "suites": 21,
    "tests": 33,
    "passes": 33,
    "pending": 0,
    "failures": 0,
    "start": "2020-12-18T09:07:07.649Z",
    "end": "2020-12-18T09:07:07.678Z",
    "duration": 29,
    "testsRegistered": 33,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "52cab5fb-acf2-4914-8738-e6f68d4ae6f6",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "21c33f0e-99bb-41f8-8cc4-822376451fb3",
          "title": "exports",
          "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/exports.spec.ts",
          "file": "/spec/exports.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "exports the `odds` function",
              "fullTitle": "exports exports the `odds` function",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai_1.expect(OathOdds.rollCampaign).to.exist;",
              "err": {},
              "uuid": "ccea2c2e-7c66-4e89-9f6f-796fa0b72cc7",
              "parentUUID": "21c33f0e-99bb-41f8-8cc4-822376451fb3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ccea2c2e-7c66-4e89-9f6f-796fa0b72cc7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "4ed0d391-be8b-4507-ba0a-49c557183653",
          "title": "OathOdds",
          "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/index.spec.ts",
          "file": "/spec/index.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "6ebfaedd-de02-411b-ac71-189321eff1c1",
              "title": "rollCampaign",
              "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/index.spec.ts",
              "file": "/spec/index.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns all possible result of the campaign along with their odds",
                  "fullTitle": "OathOdds rollCampaign returns all possible result of the campaign along with their odds",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expected = [\n    {\n        oddsOfValue: new src_1.Fraction(1, 12),\n        value: { attack: 2, defense: 0, kill: 1 },\n    },\n    {\n        oddsOfValue: new src_1.Fraction(1, 18),\n        value: { attack: 2, defense: 1, kill: 1 },\n    },\n    {\n        oddsOfValue: new src_1.Fraction(1, 36),\n        value: { attack: 2, defense: 2, kill: 1 },\n    },\n    {\n        oddsOfValue: new src_1.Fraction(1, 6),\n        value: { attack: 1, defense: 0, kill: 0 },\n    },\n    {\n        oddsOfValue: new src_1.Fraction(1, 9),\n        value: { attack: 1, defense: 1, kill: 0 },\n    },\n    {\n        oddsOfValue: new src_1.Fraction(1, 18),\n        value: { attack: 1, defense: 2, kill: 0 },\n    },\n    {\n        oddsOfValue: new src_1.Fraction(1, 4),\n        value: { attack: 0, defense: 0, kill: 0 },\n    },\n    {\n        oddsOfValue: new src_1.Fraction(1, 6),\n        value: { attack: 0, defense: 1, kill: 0 },\n    },\n    {\n        oddsOfValue: new src_1.Fraction(1, 12),\n        value: { attack: 0, defense: 2, kill: 0 },\n    },\n];\nconst results = src_1.rollCampaign(1, 1);\nsupport_1.compareToExpected(chai_1.expect, expected, results, (a, b) => CampaignResult_1.campaignResultCompareFn(a, b) === 0);",
                  "err": {},
                  "uuid": "81b80b33-bed0-4af3-a74e-9bafb84a401b",
                  "parentUUID": "6ebfaedd-de02-411b-ac71-189321eff1c1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "81b80b33-bed0-4af3-a74e-9bafb84a401b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a1ca6fe8-7d79-466d-994a-12c2113f9afd",
          "title": "combinatorics",
          "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/math/combinatorics.spec.ts",
          "file": "/spec/math/combinatorics.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "f758f796-347e-433b-8377-22482a43419c",
              "title": "cartesianProduct",
              "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/math/combinatorics.spec.ts",
              "file": "/spec/math/combinatorics.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should compute cartesian product of 2 arrays",
                  "fullTitle": "combinatorics cartesianProduct should compute cartesian product of 2 arrays",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const arr1 = [1, 2];\nconst arr2 = [3, 4];\nconst expected = [\n    [1, 3],\n    [1, 4],\n    [2, 3],\n    [2, 4],\n];\nchai_1.expect(combinatorics_1.cartesianProduct(arr1, arr2)).to.deep.equals(expected);",
                  "err": {},
                  "uuid": "62faa725-24fd-48df-853c-86a11a61ef1d",
                  "parentUUID": "f758f796-347e-433b-8377-22482a43419c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "62faa725-24fd-48df-853c-86a11a61ef1d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "58676c04-4952-405f-8f3a-06fc41a94da7",
          "title": "Fraction",
          "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/math/Fraction.spec.ts",
          "file": "/spec/math/Fraction.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "fractions with same numerator and denominator are equal",
              "fullTitle": "Fraction fractions with same numerator and denominator are equal",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const frac1 = new Fraction_1.Fraction(1, 3);\nconst frac2 = new Fraction_1.Fraction(1, 3);\nchai_1.expect(frac1.sameAs(frac2)).to.be.true;",
              "err": {},
              "uuid": "34236203-90b8-4f06-8dc1-99953b9916ba",
              "parentUUID": "58676c04-4952-405f-8f3a-06fc41a94da7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "fractions with same numerator and different denominator are not equal",
              "fullTitle": "Fraction fractions with same numerator and different denominator are not equal",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const frac1 = new Fraction_1.Fraction(1, 3);\nconst frac2 = new Fraction_1.Fraction(1, 4);\nchai_1.expect(frac1.sameAs(frac2)).to.be.false;",
              "err": {},
              "uuid": "c7a99e3e-02cc-4985-b3d6-08d494460305",
              "parentUUID": "58676c04-4952-405f-8f3a-06fc41a94da7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "fractions reducing to the same fraction are equal",
              "fullTitle": "Fraction fractions reducing to the same fraction are equal",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const frac1 = new Fraction_1.Fraction(1, 2);\nconst frac2 = new Fraction_1.Fraction(2, 4);\nchai_1.expect(frac1.sameAs(frac2)).to.be.true;",
              "err": {},
              "uuid": "61b621e1-6422-462c-94a5-298555f53581",
              "parentUUID": "58676c04-4952-405f-8f3a-06fc41a94da7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "can add fractions",
              "fullTitle": "Fraction can add fractions",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const frac1 = new Fraction_1.Fraction(1, 3);\nconst frac2 = new Fraction_1.Fraction(1, 4);\nconst expected = new Fraction_1.Fraction(7, 12);\nchai_1.expect(frac1.add(frac2).sameAs(expected)).to.be.true;",
              "err": {},
              "uuid": "fec25b3d-feb5-48e7-a34a-70407a78e13c",
              "parentUUID": "58676c04-4952-405f-8f3a-06fc41a94da7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "can multiply fractions",
              "fullTitle": "Fraction can multiply fractions",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const frac1 = new Fraction_1.Fraction(1, 3);\nconst frac2 = new Fraction_1.Fraction(1, 4);\nconst expected = new Fraction_1.Fraction(1, 12);\nchai_1.expect(frac1.multiply(frac2).sameAs(expected)).to.be.true;",
              "err": {},
              "uuid": "1e6df196-6c82-4723-9f08-3cc16a029f89",
              "parentUUID": "58676c04-4952-405f-8f3a-06fc41a94da7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "can compute to float",
              "fullTitle": "Fraction can compute to float",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const frac = new Fraction_1.Fraction(1, 2);\nchai_1.expect(frac.valueOf()).to.equal(0.5);",
              "err": {},
              "uuid": "b845ced6-1ca4-4c28-915a-71c5de2fdbc5",
              "parentUUID": "58676c04-4952-405f-8f3a-06fc41a94da7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "34236203-90b8-4f06-8dc1-99953b9916ba",
            "c7a99e3e-02cc-4985-b3d6-08d494460305",
            "61b621e1-6422-462c-94a5-298555f53581",
            "fec25b3d-feb5-48e7-a34a-70407a78e13c",
            "1e6df196-6c82-4723-9f08-3cc16a029f89",
            "b845ced6-1ca4-4c28-915a-71c5de2fdbc5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "6182143f-2e7d-47f7-a03f-a75298ec207a",
          "title": "math",
          "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/math/index.spec.ts",
          "file": "/spec/math/index.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "562f2853-b6c1-43b6-af58-1f417c5ae106",
              "title": "combineSetWithOdds",
              "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/math/index.spec.ts",
              "file": "/spec/math/index.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "combines 2 sets with odds",
                  "fullTitle": "math combineSetWithOdds combines 2 sets with odds",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swo1 = {\n    oddsOfValue: new math_1.Fraction(1, 3),\n    value: [1, 2],\n};\nconst swo2 = {\n    oddsOfValue: new math_1.Fraction(1, 2),\n    value: [\"a\", \"b\"],\n};\nconst combined = math_1.combineSetWithOdds(swo1, swo2);\nchai_1.expect(combined.value).to.deep.equal([1, 2, \"a\", \"b\"]);\nchai_1.expect(combined.oddsOfValue.sameAs(new math_1.Fraction(1, 6))).to.be.true;",
                  "err": {},
                  "uuid": "bdfa00ca-663a-47b5-82ad-6ecfc60a20f9",
                  "parentUUID": "562f2853-b6c1-43b6-af58-1f417c5ae106",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can be used for reduction",
                  "fullTitle": "math combineSetWithOdds can be used for reduction",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const sets = [\n    { value: [1, 2], oddsOfValue: new math_1.Fraction(1, 2) },\n    { value: [5, 6], oddsOfValue: new math_1.Fraction(1, 3) },\n    { value: [8, 9], oddsOfValue: new math_1.Fraction(1, 4) },\n];\nconst combined = sets.reduce(math_1.combineSetWithOdds);\nchai_1.expect(combined.value).to.deep.equal([1, 2, 5, 6, 8, 9]);\nchai_1.expect(combined.oddsOfValue.sameAs(new math_1.Fraction(1, 24))).to.be.true;",
                  "err": {},
                  "uuid": "1f53a6d1-4cb7-4a13-b748-1664b70e45f5",
                  "parentUUID": "562f2853-b6c1-43b6-af58-1f417c5ae106",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bdfa00ca-663a-47b5-82ad-6ecfc60a20f9",
                "1f53a6d1-4cb7-4a13-b748-1664b70e45f5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "239cf3ae-0d0d-4c1c-9ea2-d322dae7a98b",
              "title": "odds",
              "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/math/index.spec.ts",
              "file": "/spec/math/index.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "with only 1 random device",
                  "fullTitle": "math odds with only 1 random device",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const d6 = new math_1.RandomDevice([\n    [1, new math_1.Fraction(1, 6)],\n    [2, new math_1.Fraction(1, 6)],\n    [3, new math_1.Fraction(1, 6)],\n    [4, new math_1.Fraction(1, 6)],\n    [5, new math_1.Fraction(1, 6)],\n    [6, new math_1.Fraction(1, 6)],\n]);\nconst expected = [\n    { value: [1], oddsOfValue: new math_1.Fraction(1, 6) },\n    { value: [2], oddsOfValue: new math_1.Fraction(1, 6) },\n    { value: [3], oddsOfValue: new math_1.Fraction(1, 6) },\n    { value: [4], oddsOfValue: new math_1.Fraction(1, 6) },\n    { value: [5], oddsOfValue: new math_1.Fraction(1, 6) },\n    { value: [6], oddsOfValue: new math_1.Fraction(1, 6) },\n];\nconst results = math_1.odds([d6]);\nsupport_1.compareToExpected(chai_1.expect, expected, results, support_1.arraysOfOutcomesAreSame);",
                  "err": {},
                  "uuid": "5906ccbe-054f-4693-ae4f-d15f11308c0a",
                  "parentUUID": "239cf3ae-0d0d-4c1c-9ea2-d322dae7a98b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "with 2 random devices",
                  "fullTitle": "math odds with 2 random devices",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const d4 = new math_1.RandomDevice([\n    [1, new math_1.Fraction(1, 4)],\n    [2, new math_1.Fraction(1, 4)],\n    [3, new math_1.Fraction(1, 4)],\n    [4, new math_1.Fraction(1, 4)],\n]);\nconst abcDie = new math_1.RandomDevice([\n    [\"a\", new math_1.Fraction(1, 3)],\n    [\"b\", new math_1.Fraction(1, 3)],\n    [\"c\", new math_1.Fraction(1, 3)],\n]);\nconst expected = [\n    { value: [1, \"a\"], oddsOfValue: new math_1.Fraction(1, 12) },\n    { value: [1, \"b\"], oddsOfValue: new math_1.Fraction(1, 12) },\n    { value: [1, \"c\"], oddsOfValue: new math_1.Fraction(1, 12) },\n    { value: [2, \"a\"], oddsOfValue: new math_1.Fraction(1, 12) },\n    { value: [2, \"b\"], oddsOfValue: new math_1.Fraction(1, 12) },\n    { value: [2, \"c\"], oddsOfValue: new math_1.Fraction(1, 12) },\n    { value: [3, \"a\"], oddsOfValue: new math_1.Fraction(1, 12) },\n    { value: [3, \"b\"], oddsOfValue: new math_1.Fraction(1, 12) },\n    { value: [3, \"c\"], oddsOfValue: new math_1.Fraction(1, 12) },\n    { value: [4, \"a\"], oddsOfValue: new math_1.Fraction(1, 12) },\n    { value: [4, \"b\"], oddsOfValue: new math_1.Fraction(1, 12) },\n    { value: [4, \"c\"], oddsOfValue: new math_1.Fraction(1, 12) },\n];\nconst results = math_1.odds([d4, abcDie]);\nsupport_1.compareToExpected(chai_1.expect, expected, results, support_1.arraysOfOutcomesAreSame);",
                  "err": {},
                  "uuid": "3137a462-b383-461d-804b-1d038ab70738",
                  "parentUUID": "239cf3ae-0d0d-4c1c-9ea2-d322dae7a98b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "combines identical sets",
                  "fullTitle": "math odds combines identical sets",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const d2 = new math_1.RandomDevice([\n    [1, new math_1.Fraction(1, 2)],\n    [2, new math_1.Fraction(1, 2)],\n]);\nconst expected = [\n    { value: [1, 1], oddsOfValue: new math_1.Fraction(1, 4) },\n    { value: [1, 2], oddsOfValue: new math_1.Fraction(1, 2) },\n    { value: [2, 2], oddsOfValue: new math_1.Fraction(1, 4) },\n];\nconst results = math_1.odds([d2, d2]);\nsupport_1.compareToExpected(chai_1.expect, expected, results, support_1.arraysOfOutcomesAreSame);",
                  "err": {},
                  "uuid": "60eea4d1-59a9-4959-8f92-90665603baee",
                  "parentUUID": "239cf3ae-0d0d-4c1c-9ea2-d322dae7a98b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5906ccbe-054f-4693-ae4f-d15f11308c0a",
                "3137a462-b383-461d-804b-1d038ab70738",
                "60eea4d1-59a9-4959-8f92-90665603baee"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f4f2c3b7-a182-4209-b7b4-3e2a8b057eda",
              "title": "roll",
              "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/math/index.spec.ts",
              "file": "/spec/math/index.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "can roll a single random device",
                  "fullTitle": "math roll can roll a single random device",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const d4 = new math_1.RandomDevice([\n    [1, new math_1.Fraction(1, 4)],\n    [2, new math_1.Fraction(1, 4)],\n    [3, new math_1.Fraction(1, 4)],\n    [4, new math_1.Fraction(1, 4)],\n]);\nconst expected = [\n    { value: 1, oddsOfValue: new math_1.Fraction(1, 4) },\n    { value: 2, oddsOfValue: new math_1.Fraction(1, 4) },\n    { value: 3, oddsOfValue: new math_1.Fraction(1, 4) },\n    { value: 4, oddsOfValue: new math_1.Fraction(1, 4) },\n];\nconst results = math_1.roll(d4, 1, sum, (a, b) => a === b);\nsupport_1.compareToExpected(chai_1.expect, expected, results, (a, b) => a === b);",
                  "err": {},
                  "uuid": "0f7395f9-6f1f-4660-98d9-fac3f254920c",
                  "parentUUID": "f4f2c3b7-a182-4209-b7b4-3e2a8b057eda",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can roll several random devices",
                  "fullTitle": "math roll can roll several random devices",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const d4 = new math_1.RandomDevice([\n    [1, new math_1.Fraction(1, 4)],\n    [2, new math_1.Fraction(1, 4)],\n    [3, new math_1.Fraction(1, 4)],\n    [4, new math_1.Fraction(1, 4)],\n]);\nconst expected = [\n    { value: 2, oddsOfValue: new math_1.Fraction(1, 16) },\n    { value: 3, oddsOfValue: new math_1.Fraction(2, 16) },\n    { value: 4, oddsOfValue: new math_1.Fraction(3, 16) },\n    { value: 5, oddsOfValue: new math_1.Fraction(4, 16) },\n    { value: 6, oddsOfValue: new math_1.Fraction(3, 16) },\n    { value: 7, oddsOfValue: new math_1.Fraction(2, 16) },\n    { value: 8, oddsOfValue: new math_1.Fraction(1, 16) },\n];\nconst results = math_1.roll(d4, 2, sum, (a, b) => a === b);\nsupport_1.compareToExpected(chai_1.expect, expected, results, (a, b) => a === b);",
                  "err": {},
                  "uuid": "73143e21-91c9-4b25-8fff-bf42cf78cb00",
                  "parentUUID": "f4f2c3b7-a182-4209-b7b4-3e2a8b057eda",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0f7395f9-6f1f-4660-98d9-fac3f254920c",
                "73143e21-91c9-4b25-8fff-bf42cf78cb00"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "548fb7e1-3361-4e7a-b7c5-5b2dc2023b79",
          "title": "Oath domain model",
          "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/oath/oath.spec.ts",
          "file": "/spec/oath/oath.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a7e5d874-8433-463b-9b22-0c5f01cfbd32",
              "title": "Attack dice faces",
              "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/oath/oath.spec.ts",
              "file": "/spec/oath/oath.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should have consistent order",
                  "fullTitle": "Oath domain model Attack dice faces should have consistent order",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const someFaces = [\n    oath_1.AttackDieFace.HOLLOW_SWORD,\n    oath_1.AttackDieFace.TWO_SWORDS_AND_SKULL,\n    oath_1.AttackDieFace.SWORD,\n    oath_1.AttackDieFace.SWORD,\n];\nconst expected = [\n    oath_1.AttackDieFace.HOLLOW_SWORD,\n    oath_1.AttackDieFace.SWORD,\n    oath_1.AttackDieFace.SWORD,\n    oath_1.AttackDieFace.TWO_SWORDS_AND_SKULL,\n];\nchai_1.expect(someFaces.sort()).to.deep.equal(expected);",
                  "err": {},
                  "uuid": "7b2b755c-b7e7-4c32-899b-f626d4de9b6f",
                  "parentUUID": "a7e5d874-8433-463b-9b22-0c5f01cfbd32",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7b2b755c-b7e7-4c32-899b-f626d4de9b6f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0d597cfd-5fd9-46f4-98cf-bc85fed837d8",
              "title": "Defense dice faces",
              "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/oath/oath.spec.ts",
              "file": "/spec/oath/oath.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should have consistent order",
                  "fullTitle": "Oath domain model Defense dice faces should have consistent order",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const someFaces = [\n    oath_1.DefenseDieFace.DOUBLE,\n    oath_1.DefenseDieFace.TWO_SHIELDS,\n    oath_1.DefenseDieFace.SHIELD,\n    oath_1.DefenseDieFace.TWO_SHIELDS,\n    oath_1.DefenseDieFace.BLANK,\n    oath_1.DefenseDieFace.SHIELD,\n];\nconst expected = [\n    oath_1.DefenseDieFace.BLANK,\n    oath_1.DefenseDieFace.SHIELD,\n    oath_1.DefenseDieFace.SHIELD,\n    oath_1.DefenseDieFace.TWO_SHIELDS,\n    oath_1.DefenseDieFace.TWO_SHIELDS,\n    oath_1.DefenseDieFace.DOUBLE,\n];\nchai_1.expect(someFaces.sort()).to.deep.equal(expected);",
                  "err": {},
                  "uuid": "ea6dce20-e3fe-4fbe-910a-59d13ddc5f25",
                  "parentUUID": "0d597cfd-5fd9-46f4-98cf-bc85fed837d8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ea6dce20-e3fe-4fbe-910a-59d13ddc5f25"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d1841299-973c-4aa4-9128-3523e570a12d",
              "title": "CampaignResult",
              "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/oath/oath.spec.ts",
              "file": "/spec/oath/oath.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "f4cf470c-a92c-4d4c-b678-12f15addc3bf",
                  "title": "campaignResultCompareFn",
                  "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/oath/oath.spec.ts",
                  "file": "/spec/oath/oath.spec.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "returns 0 if result are equal",
                      "fullTitle": "Oath domain model CampaignResult campaignResultCompareFn returns 0 if result are equal",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "chai_1.expect(oath_1.campaignResultCompareFn({ attack: 3, defense: 2, kill: 0 }, { attack: 3, defense: 2, kill: 0 })).to.equal(0);",
                      "err": {},
                      "uuid": "e1faf497-59ad-41ba-b930-3d79339ec73d",
                      "parentUUID": "f4cf470c-a92c-4d4c-b678-12f15addc3bf",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "can be used to sort results by attack descending, then defense ascending then kill ascending",
                      "fullTitle": "Oath domain model CampaignResult campaignResultCompareFn can be used to sort results by attack descending, then defense ascending then kill ascending",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const someResults = [\n    { attack: 5, defense: 2, kill: 0 },\n    { attack: 5, defense: 2, kill: 0 },\n    { attack: 3, defense: 0, kill: 2 },\n    { attack: 4, defense: 4, kill: 0 },\n    { attack: 5, defense: 3, kill: 3 },\n    { attack: 5, defense: 1, kill: 0 },\n    { attack: 5, defense: 1, kill: 2 },\n];\nconst expected = [\n    { attack: 5, defense: 1, kill: 0 },\n    { attack: 5, defense: 1, kill: 2 },\n    { attack: 5, defense: 2, kill: 0 },\n    { attack: 5, defense: 2, kill: 0 },\n    { attack: 5, defense: 3, kill: 3 },\n    { attack: 4, defense: 4, kill: 0 },\n    { attack: 3, defense: 0, kill: 2 },\n];\nchai_1.expect(someResults.sort(oath_1.campaignResultCompareFn)).to.deep.equal(expected);",
                      "err": {},
                      "uuid": "46f51329-16c8-4b83-8e70-8a91635e57ca",
                      "parentUUID": "f4cf470c-a92c-4d4c-b678-12f15addc3bf",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "e1faf497-59ad-41ba-b930-3d79339ec73d",
                    "46f51329-16c8-4b83-8e70-8a91635e57ca"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "24d1d181-c292-42df-afab-4f15b83aa995",
              "title": "toAttackResult",
              "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/oath/oath.spec.ts",
              "file": "/spec/oath/oath.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "can sum up a bunch of die faces into a campaign result",
                  "fullTitle": "Oath domain model toAttackResult can sum up a bunch of die faces into a campaign result",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const rolled = [\n    oath_1.AttackDieFace.HOLLOW_SWORD,\n    oath_1.AttackDieFace.TWO_SWORDS_AND_SKULL,\n    oath_1.AttackDieFace.SWORD,\n    oath_1.AttackDieFace.SWORD,\n    oath_1.AttackDieFace.HOLLOW_SWORD,\n    oath_1.AttackDieFace.HOLLOW_SWORD,\n];\nconst result = oath_1.toAttackResult(rolled);\nchai_1.expect(result).to.deep.equal({ attack: 5, kill: 1 });",
                  "err": {},
                  "uuid": "8104405a-720a-4a00-9530-bae9474c2b5e",
                  "parentUUID": "24d1d181-c292-42df-afab-4f15b83aa995",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8104405a-720a-4a00-9530-bae9474c2b5e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "062acc34-2f23-4543-9fb4-bac0c6f1ba4e",
              "title": "toDefenseResult",
              "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/oath/oath.spec.ts",
              "file": "/spec/oath/oath.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "can sum up a bunch of die faces into a campaign result",
                  "fullTitle": "Oath domain model toDefenseResult can sum up a bunch of die faces into a campaign result",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const rolled = [\n    oath_1.DefenseDieFace.DOUBLE,\n    oath_1.DefenseDieFace.TWO_SHIELDS,\n    oath_1.DefenseDieFace.SHIELD,\n    oath_1.DefenseDieFace.TWO_SHIELDS,\n    oath_1.DefenseDieFace.BLANK,\n    oath_1.DefenseDieFace.SHIELD,\n];\nconst result = oath_1.toDefenseResult(rolled);\nchai_1.expect(result).to.deep.equal({ defense: 12 });",
                  "err": {},
                  "uuid": "50aa5a6f-783d-447f-bf53-2d455ec530b7",
                  "parentUUID": "062acc34-2f23-4543-9fb4-bac0c6f1ba4e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "50aa5a6f-783d-447f-bf53-2d455ec530b7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "1bbd0977-ba40-4308-9a4d-2b12c34c38d8",
          "title": "utils",
          "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/utils/arrays.spec.ts",
          "file": "/spec/utils/arrays.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "253e83ff-167b-46dc-8b12-39b6b5037454",
              "title": "flatten",
              "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/utils/arrays.spec.ts",
              "file": "/spec/utils/arrays.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "flattens an array",
                  "fullTitle": "utils flatten flattens an array",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.expect(arrays_1.flatten([[], [1], [2]])).to.deep.equal([1, 2]);",
                  "err": {},
                  "uuid": "ae953f2f-e560-4133-a4e2-25597ca05ae3",
                  "parentUUID": "253e83ff-167b-46dc-8b12-39b6b5037454",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ae953f2f-e560-4133-a4e2-25597ca05ae3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d7ad7bde-09cc-4ae2-af2c-58fc00d56bc4",
              "title": "arrayEquals",
              "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/utils/arrays.spec.ts",
              "file": "/spec/utils/arrays.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns true if the arrays contain the same values in the same order",
                  "fullTitle": "utils arrayEquals returns true if the arrays contain the same values in the same order",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.expect(arrays_1.arrayEquals([1, 2, 3], [1, 2, 3])).to.be.true;",
                  "err": {},
                  "uuid": "f209e634-1403-495d-9510-f72ed5741c77",
                  "parentUUID": "d7ad7bde-09cc-4ae2-af2c-58fc00d56bc4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns false if the arrays do not contain the same values",
                  "fullTitle": "utils arrayEquals returns false if the arrays do not contain the same values",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.expect(arrays_1.arrayEquals([1, 2, 3], [1, 2, 4])).to.be.false;",
                  "err": {},
                  "uuid": "6f477afc-8c9f-4c21-a613-d21a838e44fb",
                  "parentUUID": "d7ad7bde-09cc-4ae2-af2c-58fc00d56bc4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns false if the arrays contain the same values but in a different order",
                  "fullTitle": "utils arrayEquals returns false if the arrays contain the same values but in a different order",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.expect(arrays_1.arrayEquals([1, 2, 3], [3, 1, 2])).to.be.false;",
                  "err": {},
                  "uuid": "b4e8aa56-a5b5-4042-822e-d5f1643f1469",
                  "parentUUID": "d7ad7bde-09cc-4ae2-af2c-58fc00d56bc4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can compare different primitives",
                  "fullTitle": "utils arrayEquals can compare different primitives",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.expect(arrays_1.arrayEquals([\"a\", \"b\"], [\"a\", \"b\"])).to.be.true;\nchai_1.expect(arrays_1.arrayEquals([1.0, 2.5], [1.0, 2.5])).to.be.true;\nchai_1.expect(arrays_1.arrayEquals([true, false], [true, false])).to.be.true;\nchai_1.expect(arrays_1.arrayEquals([1, null, undefined], [1, null, undefined])).to.be\n    .true;",
                  "err": {},
                  "uuid": "4d98d05d-2c10-4b26-82d0-cdac12e82a61",
                  "parentUUID": "d7ad7bde-09cc-4ae2-af2c-58fc00d56bc4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f209e634-1403-495d-9510-f72ed5741c77",
                "6f477afc-8c9f-4c21-a613-d21a838e44fb",
                "b4e8aa56-a5b5-4042-822e-d5f1643f1469",
                "4d98d05d-2c10-4b26-82d0-cdac12e82a61"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "db97c704-dae6-46d0-8685-0407ed82c7b8",
              "title": "replace",
              "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/utils/arrays.spec.ts",
              "file": "/spec/utils/arrays.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should replace at specified index",
                  "fullTitle": "utils replace should replace at specified index",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const arr = [\"a\", \"b\", \"c\"];\nconst replaced = arrays_1.replace(arr, 1, \"x\");\nchai_1.expect(replaced).to.deep.equal([\"a\", \"x\", \"c\"]);",
                  "err": {},
                  "uuid": "d87f508d-b581-40a8-982d-7cd2b77421bf",
                  "parentUUID": "db97c704-dae6-46d0-8685-0407ed82c7b8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to replace at first position",
                  "fullTitle": "utils replace should be able to replace at first position",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const arr = [\"a\", \"b\", \"c\"];\nconst replaced = arrays_1.replace(arr, 0, \"x\");\nchai_1.expect(replaced).to.deep.equal([\"x\", \"b\", \"c\"]);",
                  "err": {},
                  "uuid": "3b1fc79e-3d63-4043-b985-e287bb852f9b",
                  "parentUUID": "db97c704-dae6-46d0-8685-0407ed82c7b8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to replace at last position",
                  "fullTitle": "utils replace should be able to replace at last position",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const arr = [\"a\", \"b\", \"c\"];\nconst replaced = arrays_1.replace(arr, 2, \"x\");\nchai_1.expect(replaced).to.deep.equal([\"a\", \"b\", \"x\"]);",
                  "err": {},
                  "uuid": "b234319a-f43a-4924-8820-57a9a280d82f",
                  "parentUUID": "db97c704-dae6-46d0-8685-0407ed82c7b8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the same array if specified index is < 0",
                  "fullTitle": "utils replace should return the same array if specified index is < 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const arr = [\"a\", \"b\", \"c\"];\nconst replaced = arrays_1.replace(arr, -1, \"x\");\nchai_1.expect(replaced).to.deep.equal([\"a\", \"b\", \"c\"]);",
                  "err": {},
                  "uuid": "c06d6db6-890c-4b5b-a11e-e091d4d59e6b",
                  "parentUUID": "db97c704-dae6-46d0-8685-0407ed82c7b8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the same array if specified index is > array length",
                  "fullTitle": "utils replace should return the same array if specified index is > array length",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const arr = [\"a\", \"b\", \"c\"];\nconst replaced = arrays_1.replace(arr, 3, \"x\");\nchai_1.expect(replaced).to.deep.equal([\"a\", \"b\", \"c\"]);",
                  "err": {},
                  "uuid": "e97e3ca0-8edc-439c-846a-95a3616c7fcb",
                  "parentUUID": "db97c704-dae6-46d0-8685-0407ed82c7b8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should leave the original array untouched",
                  "fullTitle": "utils replace should leave the original array untouched",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const arr = [\"a\", \"b\", \"c\"];\narrays_1.replace(arr, 1, \"x\");\nchai_1.expect(arr).to.deep.equal([\"a\", \"b\", \"c\"]);",
                  "err": {},
                  "uuid": "0c2ba855-3811-4404-a66a-eefea77c5c71",
                  "parentUUID": "db97c704-dae6-46d0-8685-0407ed82c7b8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d87f508d-b581-40a8-982d-7cd2b77421bf",
                "3b1fc79e-3d63-4043-b985-e287bb852f9b",
                "b234319a-f43a-4924-8820-57a9a280d82f",
                "c06d6db6-890c-4b5b-a11e-e091d4d59e6b",
                "e97e3ca0-8edc-439c-846a-95a3616c7fcb",
                "0c2ba855-3811-4404-a66a-eefea77c5c71"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.2.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "index",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.1"
    },
    "marge": {
      "options": {
        "reportDir": "reports/tests",
        "reportFilename": "index"
      },
      "version": "5.1.0"
    }
  }
}