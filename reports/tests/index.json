{
  "stats": {
    "suites": 11,
    "tests": 24,
    "passes": 24,
    "pending": 0,
    "failures": 0,
    "start": "2020-12-15T16:03:17.183Z",
    "end": "2020-12-15T16:03:17.204Z",
    "duration": 21,
    "testsRegistered": 24,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "ce55b679-e756-41f5-85c5-6dbafc99b4f5",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "21c18f1e-2a21-4b11-a490-49cf6da6f4fd",
          "title": "combinatorics",
          "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/combinatorics.spec.ts",
          "file": "/spec/combinatorics.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "5546fa4e-155c-4b87-8297-1d985c9bf89c",
              "title": "cartesianProduct",
              "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/combinatorics.spec.ts",
              "file": "/spec/combinatorics.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should compute cartesian product of 2 arrays",
                  "fullTitle": "combinatorics cartesianProduct should compute cartesian product of 2 arrays",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const arr1 = [1, 2];\nconst arr2 = [3, 4];\nconst expected = [\n    [1, 3],\n    [1, 4],\n    [2, 3],\n    [2, 4],\n];\nchai_1.expect(combinatorics_1.cartesianProduct(arr1, arr2)).to.deep.equals(expected);",
                  "err": {},
                  "uuid": "07f986ad-2527-4cff-8820-7f632a4248de",
                  "parentUUID": "5546fa4e-155c-4b87-8297-1d985c9bf89c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "07f986ad-2527-4cff-8820-7f632a4248de"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "43d6bf04-e783-460d-862f-3cf4b7fde4fb",
          "title": "exports",
          "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/exports.spec.ts",
          "file": "/spec/exports.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "exports the `odds` function",
              "fullTitle": "exports exports the `odds` function",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai_1.expect(OathOdds.odds).to.exist;",
              "err": {},
              "uuid": "4319d487-624a-43de-bc21-4da4e6639f0b",
              "parentUUID": "43d6bf04-e783-460d-862f-3cf4b7fde4fb",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4319d487-624a-43de-bc21-4da4e6639f0b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "c42617df-99e1-4044-a6e2-3906dade4b82",
          "title": "Fraction",
          "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/Fraction.spec.ts",
          "file": "/spec/Fraction.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "fractions with same numerator and denominator are equal",
              "fullTitle": "Fraction fractions with same numerator and denominator are equal",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const frac1 = new Fraction_1.Fraction(1, 3);\nconst frac2 = new Fraction_1.Fraction(1, 3);\nchai_1.expect(frac1.sameAs(frac2)).to.be.true;",
              "err": {},
              "uuid": "54876ca0-d670-43d0-9d80-11f1fe7bd555",
              "parentUUID": "c42617df-99e1-4044-a6e2-3906dade4b82",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "fractions with same numerator and different denominator are not equal",
              "fullTitle": "Fraction fractions with same numerator and different denominator are not equal",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const frac1 = new Fraction_1.Fraction(1, 3);\nconst frac2 = new Fraction_1.Fraction(1, 4);\nchai_1.expect(frac1.sameAs(frac2)).to.be.false;",
              "err": {},
              "uuid": "6f702745-a999-445d-9478-8f0e3173f721",
              "parentUUID": "c42617df-99e1-4044-a6e2-3906dade4b82",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "fractions reducing to the same fraction are equal",
              "fullTitle": "Fraction fractions reducing to the same fraction are equal",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const frac1 = new Fraction_1.Fraction(1, 2);\nconst frac2 = new Fraction_1.Fraction(2, 4);\nchai_1.expect(frac1.sameAs(frac2)).to.be.true;",
              "err": {},
              "uuid": "a8b6846c-c1e0-4a4a-a8bc-f9fee8201130",
              "parentUUID": "c42617df-99e1-4044-a6e2-3906dade4b82",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "can add fractions",
              "fullTitle": "Fraction can add fractions",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const frac1 = new Fraction_1.Fraction(1, 3);\nconst frac2 = new Fraction_1.Fraction(1, 4);\nconst expected = new Fraction_1.Fraction(7, 12);\nchai_1.expect(frac1.add(frac2).sameAs(expected)).to.be.true;",
              "err": {},
              "uuid": "0c070cff-0a0a-4241-99bf-ba8c4fd6ac8a",
              "parentUUID": "c42617df-99e1-4044-a6e2-3906dade4b82",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "can multiply fractions",
              "fullTitle": "Fraction can multiply fractions",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const frac1 = new Fraction_1.Fraction(1, 3);\nconst frac2 = new Fraction_1.Fraction(1, 4);\nconst expected = new Fraction_1.Fraction(1, 12);\nchai_1.expect(frac1.multiply(frac2).sameAs(expected)).to.be.true;",
              "err": {},
              "uuid": "c7b3e438-e989-4827-a06c-636b6395a1a1",
              "parentUUID": "c42617df-99e1-4044-a6e2-3906dade4b82",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "can compute to float",
              "fullTitle": "Fraction can compute to float",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const frac = new Fraction_1.Fraction(1, 2);\nchai_1.expect(frac.valueOf()).to.equal(0.5);",
              "err": {},
              "uuid": "8b878dce-cc04-4284-9894-b65a0c0a9d02",
              "parentUUID": "c42617df-99e1-4044-a6e2-3906dade4b82",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "54876ca0-d670-43d0-9d80-11f1fe7bd555",
            "6f702745-a999-445d-9478-8f0e3173f721",
            "a8b6846c-c1e0-4a4a-a8bc-f9fee8201130",
            "0c070cff-0a0a-4241-99bf-ba8c4fd6ac8a",
            "c7b3e438-e989-4827-a06c-636b6395a1a1",
            "8b878dce-cc04-4284-9894-b65a0c0a9d02"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "dbf60e6b-7766-4393-bc33-a0e389d209d6",
          "title": "odds",
          "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/index.spec.ts",
          "file": "/spec/index.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "with only 1 random device",
              "fullTitle": "odds with only 1 random device",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const d6 = new RandomDevice_1.RandomDevice([\n    [1, new Fraction_1.Fraction(1, 6)],\n    [2, new Fraction_1.Fraction(1, 6)],\n    [3, new Fraction_1.Fraction(1, 6)],\n    [4, new Fraction_1.Fraction(1, 6)],\n    [5, new Fraction_1.Fraction(1, 6)],\n    [6, new Fraction_1.Fraction(1, 6)],\n]);\nconst expected = [\n    { set: [1], odds: new Fraction_1.Fraction(1, 6) },\n    { set: [2], odds: new Fraction_1.Fraction(1, 6) },\n    { set: [3], odds: new Fraction_1.Fraction(1, 6) },\n    { set: [4], odds: new Fraction_1.Fraction(1, 6) },\n    { set: [5], odds: new Fraction_1.Fraction(1, 6) },\n    { set: [6], odds: new Fraction_1.Fraction(1, 6) },\n];\nconst results = src_1.odds([d6]);\ncompareToExpected(chai_1.expect, expected, results);",
              "err": {},
              "uuid": "2d7b7591-b923-4428-8a5f-da32f3de4bd4",
              "parentUUID": "dbf60e6b-7766-4393-bc33-a0e389d209d6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "with 2 random devices",
              "fullTitle": "odds with 2 random devices",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const d4 = new RandomDevice_1.RandomDevice([\n    [1, new Fraction_1.Fraction(1, 4)],\n    [2, new Fraction_1.Fraction(1, 4)],\n    [3, new Fraction_1.Fraction(1, 4)],\n    [4, new Fraction_1.Fraction(1, 4)],\n]);\nconst abcDie = new RandomDevice_1.RandomDevice([\n    [\"a\", new Fraction_1.Fraction(1, 3)],\n    [\"b\", new Fraction_1.Fraction(1, 3)],\n    [\"c\", new Fraction_1.Fraction(1, 3)],\n]);\nconst expected = [\n    { set: [1, \"a\"], odds: new Fraction_1.Fraction(1, 12) },\n    { set: [1, \"b\"], odds: new Fraction_1.Fraction(1, 12) },\n    { set: [1, \"c\"], odds: new Fraction_1.Fraction(1, 12) },\n    { set: [2, \"a\"], odds: new Fraction_1.Fraction(1, 12) },\n    { set: [2, \"b\"], odds: new Fraction_1.Fraction(1, 12) },\n    { set: [2, \"c\"], odds: new Fraction_1.Fraction(1, 12) },\n    { set: [3, \"a\"], odds: new Fraction_1.Fraction(1, 12) },\n    { set: [3, \"b\"], odds: new Fraction_1.Fraction(1, 12) },\n    { set: [3, \"c\"], odds: new Fraction_1.Fraction(1, 12) },\n    { set: [4, \"a\"], odds: new Fraction_1.Fraction(1, 12) },\n    { set: [4, \"b\"], odds: new Fraction_1.Fraction(1, 12) },\n    { set: [4, \"c\"], odds: new Fraction_1.Fraction(1, 12) },\n];\nconst results = src_1.odds([d4, abcDie]);\ncompareToExpected(chai_1.expect, expected, results);",
              "err": {},
              "uuid": "5d811057-4be0-4873-97b4-47ff7f540492",
              "parentUUID": "dbf60e6b-7766-4393-bc33-a0e389d209d6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "combines identical sets",
              "fullTitle": "odds combines identical sets",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const d2 = new RandomDevice_1.RandomDevice([\n    [1, new Fraction_1.Fraction(1, 2)],\n    [2, new Fraction_1.Fraction(1, 2)],\n]);\nconst expected = [\n    { set: [1, 1], odds: new Fraction_1.Fraction(1, 4) },\n    { set: [1, 2], odds: new Fraction_1.Fraction(1, 2) },\n    { set: [2, 2], odds: new Fraction_1.Fraction(1, 4) },\n];\nconst results = src_1.odds([d2, d2]);\ncompareToExpected(chai_1.expect, expected, results);",
              "err": {},
              "uuid": "7faa4601-30da-4041-9edb-4406f0dc2df4",
              "parentUUID": "dbf60e6b-7766-4393-bc33-a0e389d209d6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2d7b7591-b923-4428-8a5f-da32f3de4bd4",
            "5d811057-4be0-4873-97b4-47ff7f540492",
            "7faa4601-30da-4041-9edb-4406f0dc2df4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "3e27ea51-4bda-4a57-8b3b-8adbf6bb6f79",
          "title": "SetWithOdds",
          "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/SetWithOdds.spec.ts",
          "file": "/spec/SetWithOdds.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "93f5ce2f-caed-4e98-8187-ada0f3282880",
              "title": "combineSetWithOdds",
              "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/SetWithOdds.spec.ts",
              "file": "/spec/SetWithOdds.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "combines 2 sets with odds",
                  "fullTitle": "SetWithOdds combineSetWithOdds combines 2 sets with odds",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swo1 = {\n    odds: new Fraction_1.Fraction(1, 3),\n    set: [1, 2],\n};\nconst swo2 = {\n    odds: new Fraction_1.Fraction(1, 2),\n    set: [\"a\", \"b\"],\n};\nconst combined = SetWithOdds_1.combineSetWithOdds(swo1, swo2);\nchai_1.expect(combined.set).to.deep.equal([1, 2, \"a\", \"b\"]);\nchai_1.expect(combined.odds.sameAs(new Fraction_1.Fraction(1, 6))).to.be.true;",
                  "err": {},
                  "uuid": "90f844ab-26c3-4c6b-bb02-7c5c27a49882",
                  "parentUUID": "93f5ce2f-caed-4e98-8187-ada0f3282880",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can be used for reduction",
                  "fullTitle": "SetWithOdds combineSetWithOdds can be used for reduction",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const sets = [\n    { set: [1, 2], odds: new Fraction_1.Fraction(1, 2) },\n    { set: [5, 6], odds: new Fraction_1.Fraction(1, 3) },\n    { set: [8, 9], odds: new Fraction_1.Fraction(1, 4) },\n];\nconst combined = sets.reduce(SetWithOdds_1.combineSetWithOdds);\nchai_1.expect(combined.set).to.deep.equal([1, 2, 5, 6, 8, 9]);\nchai_1.expect(combined.odds.sameAs(new Fraction_1.Fraction(1, 24))).to.be.true;",
                  "err": {},
                  "uuid": "7675345b-0b68-4437-9837-b88dafdd07be",
                  "parentUUID": "93f5ce2f-caed-4e98-8187-ada0f3282880",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "90f844ab-26c3-4c6b-bb02-7c5c27a49882",
                "7675345b-0b68-4437-9837-b88dafdd07be"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "05355826-6881-47e9-9a45-4a471d8d0d9d",
          "title": "utils",
          "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/utils.spec.ts",
          "file": "/spec/utils.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "14a17c28-a80f-4a55-b3cf-6acc41b77a29",
              "title": "flatten",
              "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/utils.spec.ts",
              "file": "/spec/utils.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "flattens an array",
                  "fullTitle": "utils flatten flattens an array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.expect(utils_1.flatten([[], [1], [2]])).to.deep.equal([1, 2]);",
                  "err": {},
                  "uuid": "141c3fc8-65db-4501-a634-f456de0d46bc",
                  "parentUUID": "14a17c28-a80f-4a55-b3cf-6acc41b77a29",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "141c3fc8-65db-4501-a634-f456de0d46bc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2145c3c0-b329-44e8-bda9-e46995ccc5a4",
              "title": "arrayEquals",
              "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/utils.spec.ts",
              "file": "/spec/utils.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns true if the arrays contain the same values in the same order",
                  "fullTitle": "utils arrayEquals returns true if the arrays contain the same values in the same order",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.expect(utils_1.arrayEquals([1, 2, 3], [1, 2, 3])).to.be.true;",
                  "err": {},
                  "uuid": "971a3dc8-d0d4-4592-a065-80428c3d9897",
                  "parentUUID": "2145c3c0-b329-44e8-bda9-e46995ccc5a4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns false if the arrays do not contain the same values",
                  "fullTitle": "utils arrayEquals returns false if the arrays do not contain the same values",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.expect(utils_1.arrayEquals([1, 2, 3], [1, 2, 4])).to.be.false;",
                  "err": {},
                  "uuid": "183a9608-c1af-41da-9d09-198dfaa9221b",
                  "parentUUID": "2145c3c0-b329-44e8-bda9-e46995ccc5a4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns false if the arrays contain the same values but in a different order",
                  "fullTitle": "utils arrayEquals returns false if the arrays contain the same values but in a different order",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.expect(utils_1.arrayEquals([1, 2, 3], [3, 1, 2])).to.be.false;",
                  "err": {},
                  "uuid": "70791b9f-dfdb-4285-af8c-6b7442d9704e",
                  "parentUUID": "2145c3c0-b329-44e8-bda9-e46995ccc5a4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can compare different primitives",
                  "fullTitle": "utils arrayEquals can compare different primitives",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.expect(utils_1.arrayEquals([\"a\", \"b\"], [\"a\", \"b\"])).to.be.true;\nchai_1.expect(utils_1.arrayEquals([1.0, 2.5], [1.0, 2.5])).to.be.true;\nchai_1.expect(utils_1.arrayEquals([true, false], [true, false])).to.be.true;\nchai_1.expect(utils_1.arrayEquals([1, null, undefined], [1, null, undefined])).to.be\n    .true;",
                  "err": {},
                  "uuid": "ad722ee4-59fa-41b6-b241-7ef84c3e3398",
                  "parentUUID": "2145c3c0-b329-44e8-bda9-e46995ccc5a4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "971a3dc8-d0d4-4592-a065-80428c3d9897",
                "183a9608-c1af-41da-9d09-198dfaa9221b",
                "70791b9f-dfdb-4285-af8c-6b7442d9704e",
                "ad722ee4-59fa-41b6-b241-7ef84c3e3398"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "22ba9d51-8e62-4404-8ae3-47786ad7a218",
              "title": "replace",
              "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/utils.spec.ts",
              "file": "/spec/utils.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should replace at specified index",
                  "fullTitle": "utils replace should replace at specified index",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const arr = [\"a\", \"b\", \"c\"];\nconst replaced = utils_1.replace(arr, 1, \"x\");\nchai_1.expect(replaced).to.deep.equal([\"a\", \"x\", \"c\"]);",
                  "err": {},
                  "uuid": "4c793b4f-12b5-4058-a323-46823c9c5f45",
                  "parentUUID": "22ba9d51-8e62-4404-8ae3-47786ad7a218",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to replace at first position",
                  "fullTitle": "utils replace should be able to replace at first position",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const arr = [\"a\", \"b\", \"c\"];\nconst replaced = utils_1.replace(arr, 0, \"x\");\nchai_1.expect(replaced).to.deep.equal([\"x\", \"b\", \"c\"]);",
                  "err": {},
                  "uuid": "7acb8ad3-e299-4b6c-8490-7ff99154847e",
                  "parentUUID": "22ba9d51-8e62-4404-8ae3-47786ad7a218",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to replace at last position",
                  "fullTitle": "utils replace should be able to replace at last position",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const arr = [\"a\", \"b\", \"c\"];\nconst replaced = utils_1.replace(arr, 2, \"x\");\nchai_1.expect(replaced).to.deep.equal([\"a\", \"b\", \"x\"]);",
                  "err": {},
                  "uuid": "d10686e2-2980-4a88-af57-9c0876a34d3c",
                  "parentUUID": "22ba9d51-8e62-4404-8ae3-47786ad7a218",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the same array if specified index is < 0",
                  "fullTitle": "utils replace should return the same array if specified index is < 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const arr = [\"a\", \"b\", \"c\"];\nconst replaced = utils_1.replace(arr, -1, \"x\");\nchai_1.expect(replaced).to.deep.equal([\"a\", \"b\", \"c\"]);",
                  "err": {},
                  "uuid": "14acd0f3-0ad0-455a-8992-ffa919638b88",
                  "parentUUID": "22ba9d51-8e62-4404-8ae3-47786ad7a218",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the same array if specified index is > array length",
                  "fullTitle": "utils replace should return the same array if specified index is > array length",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const arr = [\"a\", \"b\", \"c\"];\nconst replaced = utils_1.replace(arr, 3, \"x\");\nchai_1.expect(replaced).to.deep.equal([\"a\", \"b\", \"c\"]);",
                  "err": {},
                  "uuid": "819edb6f-a956-42ce-9819-fd35d54b6916",
                  "parentUUID": "22ba9d51-8e62-4404-8ae3-47786ad7a218",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should leave the original array untouched",
                  "fullTitle": "utils replace should leave the original array untouched",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const arr = [\"a\", \"b\", \"c\"];\nutils_1.replace(arr, 1, \"x\");\nchai_1.expect(arr).to.deep.equal([\"a\", \"b\", \"c\"]);",
                  "err": {},
                  "uuid": "31377366-f892-4617-976b-b3d82fbbc041",
                  "parentUUID": "22ba9d51-8e62-4404-8ae3-47786ad7a218",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4c793b4f-12b5-4058-a323-46823c9c5f45",
                "7acb8ad3-e299-4b6c-8490-7ff99154847e",
                "d10686e2-2980-4a88-af57-9c0876a34d3c",
                "14acd0f3-0ad0-455a-8992-ffa919638b88",
                "819edb6f-a956-42ce-9819-fd35d54b6916",
                "31377366-f892-4617-976b-b3d82fbbc041"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.2.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "index",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.1"
    },
    "marge": {
      "options": {
        "reportDir": "reports/tests",
        "reportFilename": "index"
      },
      "version": "5.1.0"
    }
  }
}