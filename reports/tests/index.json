{
  "stats": {
    "suites": 22,
    "tests": 35,
    "passes": 35,
    "pending": 0,
    "failures": 0,
    "start": "2021-01-04T14:19:57.455Z",
    "end": "2021-01-04T14:19:57.488Z",
    "duration": 33,
    "testsRegistered": 35,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "6974e654-c348-4c44-81d3-47cf56d89000",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "df7d617f-9b79-4b2d-9631-fad10ce313ac",
          "title": "exports",
          "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/exports.spec.ts",
          "file": "/spec/exports.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "exports the `odds` function",
              "fullTitle": "exports exports the `odds` function",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai_1.expect(OathOdds.rollCampaign).to.exist;",
              "err": {},
              "uuid": "9bee150e-6105-4365-baf1-22fb8483a06a",
              "parentUUID": "df7d617f-9b79-4b2d-9631-fad10ce313ac",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9bee150e-6105-4365-baf1-22fb8483a06a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "c3f5fff1-9c12-4fd1-bb3f-b9c07258a14d",
          "title": "OathOdds",
          "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/index.spec.ts",
          "file": "/spec/index.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "edd090ce-bdad-46aa-a8b0-1dbbab175141",
              "title": "rollCampaign",
              "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/index.spec.ts",
              "file": "/spec/index.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns all possible result of the campaign along with their odds",
                  "fullTitle": "OathOdds rollCampaign returns all possible result of the campaign along with their odds",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expected = [\n    {\n        oddsOfValue: new src_1.Fraction(1, 12),\n        value: { attack: 2, defense: 0, kill: 1 },\n    },\n    {\n        oddsOfValue: new src_1.Fraction(1, 18),\n        value: { attack: 2, defense: 1, kill: 1 },\n    },\n    {\n        oddsOfValue: new src_1.Fraction(1, 36),\n        value: { attack: 2, defense: 2, kill: 1 },\n    },\n    {\n        oddsOfValue: new src_1.Fraction(1, 6),\n        value: { attack: 1, defense: 0, kill: 0 },\n    },\n    {\n        oddsOfValue: new src_1.Fraction(1, 9),\n        value: { attack: 1, defense: 1, kill: 0 },\n    },\n    {\n        oddsOfValue: new src_1.Fraction(1, 18),\n        value: { attack: 1, defense: 2, kill: 0 },\n    },\n    {\n        oddsOfValue: new src_1.Fraction(1, 4),\n        value: { attack: 0, defense: 0, kill: 0 },\n    },\n    {\n        oddsOfValue: new src_1.Fraction(1, 6),\n        value: { attack: 0, defense: 1, kill: 0 },\n    },\n    {\n        oddsOfValue: new src_1.Fraction(1, 12),\n        value: { attack: 0, defense: 2, kill: 0 },\n    },\n];\nconst results = src_1.rollCampaign(1, 1);\nsupport_1.compareToExpected(chai_1.expect, expected, results, (a, b) => CampaignResult_1.campaignResultCompareFn(a, b) === 0);",
                  "err": {},
                  "uuid": "2cc2a67a-637a-419d-bfd6-d6f5ce141509",
                  "parentUUID": "edd090ce-bdad-46aa-a8b0-1dbbab175141",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2cc2a67a-637a-419d-bfd6-d6f5ce141509"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "50a1e001-1bd3-4cfc-816d-72603e36ebed",
              "title": "computeCampaignSuccess",
              "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/index.spec.ts",
              "file": "/spec/index.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns remaining warbands along with odds",
                  "fullTitle": "OathOdds computeCampaignSuccess returns remaining warbands along with odds",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const results = src_1.computeCampaignSuccess(3, 3, 2, 2);\nchai_1.expect(results).to.have.length(4);\nconst withZero = results.filter((i) => i.remainingWarbands === 0);\nchai_1.expect(withZero).to.have.length(1);\nchai_1.expect(withZero[0].odds).to.be.sameFractionAs(new src_1.Fraction(2297, 7776));\nconst withOne = results.filter((i) => i.remainingWarbands === 1);\nchai_1.expect(withOne).to.have.length(1);\nchai_1.expect(withOne[0].odds).to.be.sameFractionAs(new src_1.Fraction(113, 432));\nconst withTwo = results.filter((i) => i.remainingWarbands === 2);\nchai_1.expect(withTwo).to.have.length(1);\nchai_1.expect(withTwo[0].odds).to.be.sameFractionAs(new src_1.Fraction(1645, 7776));\nconst withThree = results.filter((i) => i.remainingWarbands === 3);\nchai_1.expect(withThree).to.have.length(1);\nchai_1.expect(withThree[0].odds).to.be.sameFractionAs(new src_1.Fraction(1, 108));",
                  "err": {},
                  "uuid": "90ac9243-8d20-49c0-a852-949d3a124189",
                  "parentUUID": "50a1e001-1bd3-4cfc-816d-72603e36ebed",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns results sorted by remaining warbands ascending",
                  "fullTitle": "OathOdds computeCampaignSuccess returns results sorted by remaining warbands ascending",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.expect(src_1.computeCampaignSuccess(3, 3, 2, 2).map((i) => i.remainingWarbands)).to.deep.equal([0, 1, 2, 3]);",
                  "err": {},
                  "uuid": "9fb3caf4-9b66-4c6f-bbbf-0ef2cca2b924",
                  "parentUUID": "50a1e001-1bd3-4cfc-816d-72603e36ebed",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "90ac9243-8d20-49c0-a852-949d3a124189",
                "9fb3caf4-9b66-4c6f-bbbf-0ef2cca2b924"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a7f2a92a-0349-49c3-a288-8820bfd18d97",
          "title": "combinatorics",
          "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/math/combinatorics.spec.ts",
          "file": "/spec/math/combinatorics.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "c0bddd9c-cfda-49fa-abfa-e68d8e479b43",
              "title": "cartesianProduct",
              "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/math/combinatorics.spec.ts",
              "file": "/spec/math/combinatorics.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should compute cartesian product of 2 arrays",
                  "fullTitle": "combinatorics cartesianProduct should compute cartesian product of 2 arrays",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const arr1 = [1, 2];\nconst arr2 = [3, 4];\nconst expected = [\n    [1, 3],\n    [1, 4],\n    [2, 3],\n    [2, 4],\n];\nchai_1.expect(combinatorics_1.cartesianProduct(arr1, arr2)).to.deep.equals(expected);",
                  "err": {},
                  "uuid": "7ec15901-8450-47d9-9fc3-02c6ce59b302",
                  "parentUUID": "c0bddd9c-cfda-49fa-abfa-e68d8e479b43",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7ec15901-8450-47d9-9fc3-02c6ce59b302"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "b3925c09-6abc-435b-ad78-846a00e2793c",
          "title": "Fraction",
          "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/math/Fraction.spec.ts",
          "file": "/spec/math/Fraction.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "fractions with same numerator and denominator are equal",
              "fullTitle": "Fraction fractions with same numerator and denominator are equal",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const frac1 = new Fraction_1.Fraction(1, 3);\nconst frac2 = new Fraction_1.Fraction(1, 3);\nchai_1.expect(frac1.sameAs(frac2)).to.be.true;",
              "err": {},
              "uuid": "75568ba9-b643-4cec-8b26-5a86e52fc736",
              "parentUUID": "b3925c09-6abc-435b-ad78-846a00e2793c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "fractions with same numerator and different denominator are not equal",
              "fullTitle": "Fraction fractions with same numerator and different denominator are not equal",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const frac1 = new Fraction_1.Fraction(1, 3);\nconst frac2 = new Fraction_1.Fraction(1, 4);\nchai_1.expect(frac1.sameAs(frac2)).to.be.false;",
              "err": {},
              "uuid": "f2e323ba-5cad-456e-aa09-40da524c9c43",
              "parentUUID": "b3925c09-6abc-435b-ad78-846a00e2793c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "fractions reducing to the same fraction are equal",
              "fullTitle": "Fraction fractions reducing to the same fraction are equal",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const frac1 = new Fraction_1.Fraction(1, 2);\nconst frac2 = new Fraction_1.Fraction(2, 4);\nchai_1.expect(frac1.sameAs(frac2)).to.be.true;",
              "err": {},
              "uuid": "266f08df-4750-43e9-ad81-521cc5e2c4ef",
              "parentUUID": "b3925c09-6abc-435b-ad78-846a00e2793c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "can add fractions",
              "fullTitle": "Fraction can add fractions",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const frac1 = new Fraction_1.Fraction(1, 3);\nconst frac2 = new Fraction_1.Fraction(1, 4);\nconst expected = new Fraction_1.Fraction(7, 12);\nchai_1.expect(frac1.add(frac2).sameAs(expected)).to.be.true;",
              "err": {},
              "uuid": "470e1ba4-d3ab-4b3f-b43e-348bafc542e4",
              "parentUUID": "b3925c09-6abc-435b-ad78-846a00e2793c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "can multiply fractions",
              "fullTitle": "Fraction can multiply fractions",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const frac1 = new Fraction_1.Fraction(1, 3);\nconst frac2 = new Fraction_1.Fraction(1, 4);\nconst expected = new Fraction_1.Fraction(1, 12);\nchai_1.expect(frac1.multiply(frac2).sameAs(expected)).to.be.true;",
              "err": {},
              "uuid": "16d157d0-2eb1-482d-99ef-10a4f63bb57d",
              "parentUUID": "b3925c09-6abc-435b-ad78-846a00e2793c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "can compute to float",
              "fullTitle": "Fraction can compute to float",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const frac = new Fraction_1.Fraction(1, 2);\nchai_1.expect(frac.valueOf()).to.equal(0.5);",
              "err": {},
              "uuid": "fca900c2-c14e-4750-8fe9-e859647257e1",
              "parentUUID": "b3925c09-6abc-435b-ad78-846a00e2793c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "75568ba9-b643-4cec-8b26-5a86e52fc736",
            "f2e323ba-5cad-456e-aa09-40da524c9c43",
            "266f08df-4750-43e9-ad81-521cc5e2c4ef",
            "470e1ba4-d3ab-4b3f-b43e-348bafc542e4",
            "16d157d0-2eb1-482d-99ef-10a4f63bb57d",
            "fca900c2-c14e-4750-8fe9-e859647257e1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "aaf47911-1d12-4ad9-8a75-f4c05ed96fca",
          "title": "math",
          "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/math/index.spec.ts",
          "file": "/spec/math/index.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "3dd3cf10-3af3-4fb6-a9f7-7475850a113e",
              "title": "combineSetWithOdds",
              "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/math/index.spec.ts",
              "file": "/spec/math/index.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "combines 2 sets with odds",
                  "fullTitle": "math combineSetWithOdds combines 2 sets with odds",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swo1 = {\n    oddsOfValue: new math_1.Fraction(1, 3),\n    value: [1, 2],\n};\nconst swo2 = {\n    oddsOfValue: new math_1.Fraction(1, 2),\n    value: [\"a\", \"b\"],\n};\nconst combined = math_1.combineSetWithOdds(swo1, swo2);\nchai_1.expect(combined.value).to.deep.equal([1, 2, \"a\", \"b\"]);\nchai_1.expect(combined.oddsOfValue.sameAs(new math_1.Fraction(1, 6))).to.be.true;",
                  "err": {},
                  "uuid": "9501ca33-089d-4537-8eef-821cd4fc1135",
                  "parentUUID": "3dd3cf10-3af3-4fb6-a9f7-7475850a113e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can be used for reduction",
                  "fullTitle": "math combineSetWithOdds can be used for reduction",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const sets = [\n    { value: [1, 2], oddsOfValue: new math_1.Fraction(1, 2) },\n    { value: [5, 6], oddsOfValue: new math_1.Fraction(1, 3) },\n    { value: [8, 9], oddsOfValue: new math_1.Fraction(1, 4) },\n];\nconst combined = sets.reduce(math_1.combineSetWithOdds);\nchai_1.expect(combined.value).to.deep.equal([1, 2, 5, 6, 8, 9]);\nchai_1.expect(combined.oddsOfValue.sameAs(new math_1.Fraction(1, 24))).to.be.true;",
                  "err": {},
                  "uuid": "c751bb43-b34d-4afc-92b0-9f9a8a95052d",
                  "parentUUID": "3dd3cf10-3af3-4fb6-a9f7-7475850a113e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9501ca33-089d-4537-8eef-821cd4fc1135",
                "c751bb43-b34d-4afc-92b0-9f9a8a95052d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d62df4be-7a9f-4768-9cbc-f2cdbad0f947",
              "title": "odds",
              "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/math/index.spec.ts",
              "file": "/spec/math/index.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "with only 1 random device",
                  "fullTitle": "math odds with only 1 random device",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const d6 = new math_1.RandomDevice([\n    [1, new math_1.Fraction(1, 6)],\n    [2, new math_1.Fraction(1, 6)],\n    [3, new math_1.Fraction(1, 6)],\n    [4, new math_1.Fraction(1, 6)],\n    [5, new math_1.Fraction(1, 6)],\n    [6, new math_1.Fraction(1, 6)],\n]);\nconst expected = [\n    { value: [1], oddsOfValue: new math_1.Fraction(1, 6) },\n    { value: [2], oddsOfValue: new math_1.Fraction(1, 6) },\n    { value: [3], oddsOfValue: new math_1.Fraction(1, 6) },\n    { value: [4], oddsOfValue: new math_1.Fraction(1, 6) },\n    { value: [5], oddsOfValue: new math_1.Fraction(1, 6) },\n    { value: [6], oddsOfValue: new math_1.Fraction(1, 6) },\n];\nconst results = math_1.odds([d6]);\nsupport_1.compareToExpected(chai_1.expect, expected, results, support_1.arraysOfOutcomesAreSame);",
                  "err": {},
                  "uuid": "0fd90872-1621-435c-bfbc-26387c9e072e",
                  "parentUUID": "d62df4be-7a9f-4768-9cbc-f2cdbad0f947",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "with 2 random devices",
                  "fullTitle": "math odds with 2 random devices",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const d4 = new math_1.RandomDevice([\n    [1, new math_1.Fraction(1, 4)],\n    [2, new math_1.Fraction(1, 4)],\n    [3, new math_1.Fraction(1, 4)],\n    [4, new math_1.Fraction(1, 4)],\n]);\nconst abcDie = new math_1.RandomDevice([\n    [\"a\", new math_1.Fraction(1, 3)],\n    [\"b\", new math_1.Fraction(1, 3)],\n    [\"c\", new math_1.Fraction(1, 3)],\n]);\nconst expected = [\n    { value: [1, \"a\"], oddsOfValue: new math_1.Fraction(1, 12) },\n    { value: [1, \"b\"], oddsOfValue: new math_1.Fraction(1, 12) },\n    { value: [1, \"c\"], oddsOfValue: new math_1.Fraction(1, 12) },\n    { value: [2, \"a\"], oddsOfValue: new math_1.Fraction(1, 12) },\n    { value: [2, \"b\"], oddsOfValue: new math_1.Fraction(1, 12) },\n    { value: [2, \"c\"], oddsOfValue: new math_1.Fraction(1, 12) },\n    { value: [3, \"a\"], oddsOfValue: new math_1.Fraction(1, 12) },\n    { value: [3, \"b\"], oddsOfValue: new math_1.Fraction(1, 12) },\n    { value: [3, \"c\"], oddsOfValue: new math_1.Fraction(1, 12) },\n    { value: [4, \"a\"], oddsOfValue: new math_1.Fraction(1, 12) },\n    { value: [4, \"b\"], oddsOfValue: new math_1.Fraction(1, 12) },\n    { value: [4, \"c\"], oddsOfValue: new math_1.Fraction(1, 12) },\n];\nconst results = math_1.odds([d4, abcDie]);\nsupport_1.compareToExpected(chai_1.expect, expected, results, support_1.arraysOfOutcomesAreSame);",
                  "err": {},
                  "uuid": "56b1c951-d075-4b5e-8647-1c8f18155bcb",
                  "parentUUID": "d62df4be-7a9f-4768-9cbc-f2cdbad0f947",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "combines identical sets",
                  "fullTitle": "math odds combines identical sets",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const d2 = new math_1.RandomDevice([\n    [1, new math_1.Fraction(1, 2)],\n    [2, new math_1.Fraction(1, 2)],\n]);\nconst expected = [\n    { value: [1, 1], oddsOfValue: new math_1.Fraction(1, 4) },\n    { value: [1, 2], oddsOfValue: new math_1.Fraction(1, 2) },\n    { value: [2, 2], oddsOfValue: new math_1.Fraction(1, 4) },\n];\nconst results = math_1.odds([d2, d2]);\nsupport_1.compareToExpected(chai_1.expect, expected, results, support_1.arraysOfOutcomesAreSame);",
                  "err": {},
                  "uuid": "e5084f04-de66-4b6c-b39d-0ca022c894e6",
                  "parentUUID": "d62df4be-7a9f-4768-9cbc-f2cdbad0f947",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0fd90872-1621-435c-bfbc-26387c9e072e",
                "56b1c951-d075-4b5e-8647-1c8f18155bcb",
                "e5084f04-de66-4b6c-b39d-0ca022c894e6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "dea261ed-0159-4369-adc5-9091972279b2",
              "title": "roll",
              "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/math/index.spec.ts",
              "file": "/spec/math/index.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "can roll a single random device",
                  "fullTitle": "math roll can roll a single random device",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const d4 = new math_1.RandomDevice([\n    [1, new math_1.Fraction(1, 4)],\n    [2, new math_1.Fraction(1, 4)],\n    [3, new math_1.Fraction(1, 4)],\n    [4, new math_1.Fraction(1, 4)],\n]);\nconst expected = [\n    { value: 1, oddsOfValue: new math_1.Fraction(1, 4) },\n    { value: 2, oddsOfValue: new math_1.Fraction(1, 4) },\n    { value: 3, oddsOfValue: new math_1.Fraction(1, 4) },\n    { value: 4, oddsOfValue: new math_1.Fraction(1, 4) },\n];\nconst results = math_1.roll(d4, 1, sum, (a, b) => a === b);\nsupport_1.compareToExpected(chai_1.expect, expected, results, (a, b) => a === b);",
                  "err": {},
                  "uuid": "f3af47dc-6558-4772-9c5a-1eb9b3ed4808",
                  "parentUUID": "dea261ed-0159-4369-adc5-9091972279b2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can roll several random devices",
                  "fullTitle": "math roll can roll several random devices",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const d4 = new math_1.RandomDevice([\n    [1, new math_1.Fraction(1, 4)],\n    [2, new math_1.Fraction(1, 4)],\n    [3, new math_1.Fraction(1, 4)],\n    [4, new math_1.Fraction(1, 4)],\n]);\nconst expected = [\n    { value: 2, oddsOfValue: new math_1.Fraction(1, 16) },\n    { value: 3, oddsOfValue: new math_1.Fraction(2, 16) },\n    { value: 4, oddsOfValue: new math_1.Fraction(3, 16) },\n    { value: 5, oddsOfValue: new math_1.Fraction(4, 16) },\n    { value: 6, oddsOfValue: new math_1.Fraction(3, 16) },\n    { value: 7, oddsOfValue: new math_1.Fraction(2, 16) },\n    { value: 8, oddsOfValue: new math_1.Fraction(1, 16) },\n];\nconst results = math_1.roll(d4, 2, sum, (a, b) => a === b);\nsupport_1.compareToExpected(chai_1.expect, expected, results, (a, b) => a === b);",
                  "err": {},
                  "uuid": "9a93015e-be33-4493-aefd-3eee2ae742f6",
                  "parentUUID": "dea261ed-0159-4369-adc5-9091972279b2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f3af47dc-6558-4772-9c5a-1eb9b3ed4808",
                "9a93015e-be33-4493-aefd-3eee2ae742f6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "b5c154d3-a8ac-4d30-9a85-86d0a11bc78a",
          "title": "Oath domain model",
          "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/oath/oath.spec.ts",
          "file": "/spec/oath/oath.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "da1037b6-f731-42d5-bc20-f1ec8b10435f",
              "title": "Attack dice faces",
              "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/oath/oath.spec.ts",
              "file": "/spec/oath/oath.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should have consistent order",
                  "fullTitle": "Oath domain model Attack dice faces should have consistent order",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const someFaces = [\n    oath_1.AttackDieFace.HOLLOW_SWORD,\n    oath_1.AttackDieFace.TWO_SWORDS_AND_SKULL,\n    oath_1.AttackDieFace.SWORD,\n    oath_1.AttackDieFace.SWORD,\n];\nconst expected = [\n    oath_1.AttackDieFace.HOLLOW_SWORD,\n    oath_1.AttackDieFace.SWORD,\n    oath_1.AttackDieFace.SWORD,\n    oath_1.AttackDieFace.TWO_SWORDS_AND_SKULL,\n];\nchai_1.expect(someFaces.sort()).to.deep.equal(expected);",
                  "err": {},
                  "uuid": "9e2f0f90-765d-45e2-8886-76e9db986757",
                  "parentUUID": "da1037b6-f731-42d5-bc20-f1ec8b10435f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9e2f0f90-765d-45e2-8886-76e9db986757"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6428ce40-6ea1-4730-ac3a-60d92d330a0c",
              "title": "Defense dice faces",
              "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/oath/oath.spec.ts",
              "file": "/spec/oath/oath.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should have consistent order",
                  "fullTitle": "Oath domain model Defense dice faces should have consistent order",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const someFaces = [\n    oath_1.DefenseDieFace.DOUBLE,\n    oath_1.DefenseDieFace.TWO_SHIELDS,\n    oath_1.DefenseDieFace.SHIELD,\n    oath_1.DefenseDieFace.TWO_SHIELDS,\n    oath_1.DefenseDieFace.BLANK,\n    oath_1.DefenseDieFace.SHIELD,\n];\nconst expected = [\n    oath_1.DefenseDieFace.BLANK,\n    oath_1.DefenseDieFace.SHIELD,\n    oath_1.DefenseDieFace.SHIELD,\n    oath_1.DefenseDieFace.TWO_SHIELDS,\n    oath_1.DefenseDieFace.TWO_SHIELDS,\n    oath_1.DefenseDieFace.DOUBLE,\n];\nchai_1.expect(someFaces.sort()).to.deep.equal(expected);",
                  "err": {},
                  "uuid": "c130fa2b-ae02-4f87-ba89-a5807574af63",
                  "parentUUID": "6428ce40-6ea1-4730-ac3a-60d92d330a0c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c130fa2b-ae02-4f87-ba89-a5807574af63"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3303954c-1f6a-4661-9765-e86d1ef9e751",
              "title": "CampaignResult",
              "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/oath/oath.spec.ts",
              "file": "/spec/oath/oath.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "82dc8f6e-ab04-4568-8c61-145f88f82f0b",
                  "title": "campaignResultCompareFn",
                  "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/oath/oath.spec.ts",
                  "file": "/spec/oath/oath.spec.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "returns 0 if result are equal",
                      "fullTitle": "Oath domain model CampaignResult campaignResultCompareFn returns 0 if result are equal",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "chai_1.expect(oath_1.campaignResultCompareFn({ attack: 3, defense: 2, kill: 0 }, { attack: 3, defense: 2, kill: 0 })).to.equal(0);",
                      "err": {},
                      "uuid": "25034691-f7a7-410c-a871-91d893b090d2",
                      "parentUUID": "82dc8f6e-ab04-4568-8c61-145f88f82f0b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "can be used to sort results by attack descending, then defense ascending then kill ascending",
                      "fullTitle": "Oath domain model CampaignResult campaignResultCompareFn can be used to sort results by attack descending, then defense ascending then kill ascending",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const someResults = [\n    { attack: 5, defense: 2, kill: 0 },\n    { attack: 5, defense: 2, kill: 0 },\n    { attack: 3, defense: 0, kill: 2 },\n    { attack: 4, defense: 4, kill: 0 },\n    { attack: 5, defense: 3, kill: 3 },\n    { attack: 5, defense: 1, kill: 0 },\n    { attack: 5, defense: 1, kill: 2 },\n];\nconst expected = [\n    { attack: 5, defense: 1, kill: 0 },\n    { attack: 5, defense: 1, kill: 2 },\n    { attack: 5, defense: 2, kill: 0 },\n    { attack: 5, defense: 2, kill: 0 },\n    { attack: 5, defense: 3, kill: 3 },\n    { attack: 4, defense: 4, kill: 0 },\n    { attack: 3, defense: 0, kill: 2 },\n];\nchai_1.expect(someResults.sort(oath_1.campaignResultCompareFn)).to.deep.equal(expected);",
                      "err": {},
                      "uuid": "f8898d04-9f7b-4fe3-943e-3e2b5bbd2a3f",
                      "parentUUID": "82dc8f6e-ab04-4568-8c61-145f88f82f0b",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "25034691-f7a7-410c-a871-91d893b090d2",
                    "f8898d04-9f7b-4fe3-943e-3e2b5bbd2a3f"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "88d8a892-785c-46e5-97fd-ebd6525fa511",
              "title": "toAttackResult",
              "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/oath/oath.spec.ts",
              "file": "/spec/oath/oath.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "can sum up a bunch of die faces into a campaign result",
                  "fullTitle": "Oath domain model toAttackResult can sum up a bunch of die faces into a campaign result",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const rolled = [\n    oath_1.AttackDieFace.HOLLOW_SWORD,\n    oath_1.AttackDieFace.TWO_SWORDS_AND_SKULL,\n    oath_1.AttackDieFace.SWORD,\n    oath_1.AttackDieFace.SWORD,\n    oath_1.AttackDieFace.HOLLOW_SWORD,\n    oath_1.AttackDieFace.HOLLOW_SWORD,\n];\nconst result = oath_1.toAttackResult(rolled);\nchai_1.expect(result).to.deep.equal({ attack: 5, kill: 1 });",
                  "err": {},
                  "uuid": "7c71c00f-cd77-4692-9191-8188291ea008",
                  "parentUUID": "88d8a892-785c-46e5-97fd-ebd6525fa511",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7c71c00f-cd77-4692-9191-8188291ea008"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "87b49295-af30-4e87-9af6-01092e542d98",
              "title": "toDefenseResult",
              "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/oath/oath.spec.ts",
              "file": "/spec/oath/oath.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "can sum up a bunch of die faces into a campaign result",
                  "fullTitle": "Oath domain model toDefenseResult can sum up a bunch of die faces into a campaign result",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const rolled = [\n    oath_1.DefenseDieFace.DOUBLE,\n    oath_1.DefenseDieFace.TWO_SHIELDS,\n    oath_1.DefenseDieFace.SHIELD,\n    oath_1.DefenseDieFace.TWO_SHIELDS,\n    oath_1.DefenseDieFace.BLANK,\n    oath_1.DefenseDieFace.SHIELD,\n];\nconst result = oath_1.toDefenseResult(rolled);\nchai_1.expect(result).to.deep.equal({ defense: 12 });",
                  "err": {},
                  "uuid": "a50f65ed-de4f-4ae1-af82-1ac15f6f8fb3",
                  "parentUUID": "87b49295-af30-4e87-9af6-01092e542d98",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a50f65ed-de4f-4ae1-af82-1ac15f6f8fb3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "ce883344-78ed-440d-a125-e01107286514",
          "title": "utils",
          "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/utils/arrays.spec.ts",
          "file": "/spec/utils/arrays.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "22b3ac41-f3d8-4d6d-a66a-01699bb39e6b",
              "title": "flatten",
              "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/utils/arrays.spec.ts",
              "file": "/spec/utils/arrays.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "flattens an array",
                  "fullTitle": "utils flatten flattens an array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.expect(arrays_1.flatten([[], [1], [2]])).to.deep.equal([1, 2]);",
                  "err": {},
                  "uuid": "002aa7e2-c1ab-4ffb-9676-09bffba47022",
                  "parentUUID": "22b3ac41-f3d8-4d6d-a66a-01699bb39e6b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "002aa7e2-c1ab-4ffb-9676-09bffba47022"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "950c37e5-3c81-46e8-a450-27ad76597f26",
              "title": "arrayEquals",
              "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/utils/arrays.spec.ts",
              "file": "/spec/utils/arrays.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns true if the arrays contain the same values in the same order",
                  "fullTitle": "utils arrayEquals returns true if the arrays contain the same values in the same order",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.expect(arrays_1.arrayEquals([1, 2, 3], [1, 2, 3])).to.be.true;",
                  "err": {},
                  "uuid": "b579b9c3-8059-42ec-b83c-b8a27fa6f867",
                  "parentUUID": "950c37e5-3c81-46e8-a450-27ad76597f26",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns false if the arrays do not contain the same values",
                  "fullTitle": "utils arrayEquals returns false if the arrays do not contain the same values",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.expect(arrays_1.arrayEquals([1, 2, 3], [1, 2, 4])).to.be.false;",
                  "err": {},
                  "uuid": "0791a566-db1c-44a5-a04d-d798af4349e1",
                  "parentUUID": "950c37e5-3c81-46e8-a450-27ad76597f26",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns false if the arrays contain the same values but in a different order",
                  "fullTitle": "utils arrayEquals returns false if the arrays contain the same values but in a different order",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.expect(arrays_1.arrayEquals([1, 2, 3], [3, 1, 2])).to.be.false;",
                  "err": {},
                  "uuid": "9e69dae7-1317-4dee-a455-e17a0f4a3170",
                  "parentUUID": "950c37e5-3c81-46e8-a450-27ad76597f26",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can compare different primitives",
                  "fullTitle": "utils arrayEquals can compare different primitives",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.expect(arrays_1.arrayEquals([\"a\", \"b\"], [\"a\", \"b\"])).to.be.true;\nchai_1.expect(arrays_1.arrayEquals([1.0, 2.5], [1.0, 2.5])).to.be.true;\nchai_1.expect(arrays_1.arrayEquals([true, false], [true, false])).to.be.true;\nchai_1.expect(arrays_1.arrayEquals([1, null, undefined], [1, null, undefined])).to.be\n    .true;",
                  "err": {},
                  "uuid": "9adc8ca9-3b9e-46ca-a3e0-5e372239a4cd",
                  "parentUUID": "950c37e5-3c81-46e8-a450-27ad76597f26",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b579b9c3-8059-42ec-b83c-b8a27fa6f867",
                "0791a566-db1c-44a5-a04d-d798af4349e1",
                "9e69dae7-1317-4dee-a455-e17a0f4a3170",
                "9adc8ca9-3b9e-46ca-a3e0-5e372239a4cd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6c686352-711a-444d-b7a9-61e21b5678e9",
              "title": "replace",
              "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/utils/arrays.spec.ts",
              "file": "/spec/utils/arrays.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should replace at specified index",
                  "fullTitle": "utils replace should replace at specified index",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const arr = [\"a\", \"b\", \"c\"];\nconst replaced = arrays_1.replace(arr, 1, \"x\");\nchai_1.expect(replaced).to.deep.equal([\"a\", \"x\", \"c\"]);",
                  "err": {},
                  "uuid": "fcca2cdb-90cb-46c8-9c87-e953b38eccfd",
                  "parentUUID": "6c686352-711a-444d-b7a9-61e21b5678e9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to replace at first position",
                  "fullTitle": "utils replace should be able to replace at first position",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const arr = [\"a\", \"b\", \"c\"];\nconst replaced = arrays_1.replace(arr, 0, \"x\");\nchai_1.expect(replaced).to.deep.equal([\"x\", \"b\", \"c\"]);",
                  "err": {},
                  "uuid": "c3ec0187-94f4-4f4c-8218-3fb61e44916e",
                  "parentUUID": "6c686352-711a-444d-b7a9-61e21b5678e9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to replace at last position",
                  "fullTitle": "utils replace should be able to replace at last position",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const arr = [\"a\", \"b\", \"c\"];\nconst replaced = arrays_1.replace(arr, 2, \"x\");\nchai_1.expect(replaced).to.deep.equal([\"a\", \"b\", \"x\"]);",
                  "err": {},
                  "uuid": "c0598ca0-7af5-4df9-9912-ac01516f02c4",
                  "parentUUID": "6c686352-711a-444d-b7a9-61e21b5678e9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the same array if specified index is < 0",
                  "fullTitle": "utils replace should return the same array if specified index is < 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const arr = [\"a\", \"b\", \"c\"];\nconst replaced = arrays_1.replace(arr, -1, \"x\");\nchai_1.expect(replaced).to.deep.equal([\"a\", \"b\", \"c\"]);",
                  "err": {},
                  "uuid": "faf2efc2-c4fe-4869-8a13-5b705250d52c",
                  "parentUUID": "6c686352-711a-444d-b7a9-61e21b5678e9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the same array if specified index is > array length",
                  "fullTitle": "utils replace should return the same array if specified index is > array length",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const arr = [\"a\", \"b\", \"c\"];\nconst replaced = arrays_1.replace(arr, 3, \"x\");\nchai_1.expect(replaced).to.deep.equal([\"a\", \"b\", \"c\"]);",
                  "err": {},
                  "uuid": "21e60675-1d89-4b1b-92d3-4d25ae0ef8c6",
                  "parentUUID": "6c686352-711a-444d-b7a9-61e21b5678e9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should leave the original array untouched",
                  "fullTitle": "utils replace should leave the original array untouched",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const arr = [\"a\", \"b\", \"c\"];\narrays_1.replace(arr, 1, \"x\");\nchai_1.expect(arr).to.deep.equal([\"a\", \"b\", \"c\"]);",
                  "err": {},
                  "uuid": "bf679f3d-049b-43aa-b41d-1928aec1aa4b",
                  "parentUUID": "6c686352-711a-444d-b7a9-61e21b5678e9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fcca2cdb-90cb-46c8-9c87-e953b38eccfd",
                "c3ec0187-94f4-4f4c-8218-3fb61e44916e",
                "c0598ca0-7af5-4df9-9912-ac01516f02c4",
                "faf2efc2-c4fe-4869-8a13-5b705250d52c",
                "21e60675-1d89-4b1b-92d3-4d25ae0ef8c6",
                "bf679f3d-049b-43aa-b41d-1928aec1aa4b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.2.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "index",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.1"
    },
    "marge": {
      "options": {
        "reportDir": "reports/tests",
        "reportFilename": "index"
      },
      "version": "5.1.0"
    }
  }
}