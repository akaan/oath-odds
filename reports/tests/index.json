{
  "stats": {
    "suites": 18,
    "tests": 29,
    "passes": 29,
    "pending": 0,
    "failures": 0,
    "start": "2020-12-16T11:10:49.975Z",
    "end": "2020-12-16T11:10:50.004Z",
    "duration": 29,
    "testsRegistered": 29,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "81aaf34e-b2c0-491d-be4a-6f531cac72a9",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "2d0ef348-c8e6-4ea9-bc06-d2eeccf99f0d",
          "title": "exports",
          "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/exports.spec.ts",
          "file": "/spec/exports.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "exports the `odds` function",
              "fullTitle": "exports exports the `odds` function",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai_1.expect(OathOdds.rollCampaign).to.exist;",
              "err": {},
              "uuid": "17a12d72-8e52-42ce-976d-e33d0cdc5202",
              "parentUUID": "2d0ef348-c8e6-4ea9-bc06-d2eeccf99f0d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "17a12d72-8e52-42ce-976d-e33d0cdc5202"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "cc37ceaa-f096-42ad-a959-cbcc8d07d57f",
          "title": "OathOdds",
          "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/index.spec.ts",
          "file": "/spec/index.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "61600d76-4ff7-4cab-a6d1-830c21be4d33",
              "title": "rollCampaign",
              "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/index.spec.ts",
              "file": "/spec/index.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "",
                  "fullTitle": "OathOdds rollCampaign ",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expected = [\n    {\n        odds: new src_1.Fraction(1, 12),\n        result: { attack: 2, defense: 0, kill: 1 },\n    },\n    {\n        odds: new src_1.Fraction(1, 18),\n        result: { attack: 2, defense: 1, kill: 1 },\n    },\n    {\n        odds: new src_1.Fraction(1, 36),\n        result: { attack: 2, defense: 2, kill: 1 },\n    },\n    {\n        odds: new src_1.Fraction(1, 6),\n        result: { attack: 1, defense: 0, kill: 0 },\n    },\n    {\n        odds: new src_1.Fraction(1, 9),\n        result: { attack: 1, defense: 1, kill: 0 },\n    },\n    {\n        odds: new src_1.Fraction(1, 18),\n        result: { attack: 1, defense: 2, kill: 0 },\n    },\n    {\n        odds: new src_1.Fraction(1, 4),\n        result: { attack: 0, defense: 0, kill: 0 },\n    },\n    {\n        odds: new src_1.Fraction(1, 6),\n        result: { attack: 0, defense: 1, kill: 0 },\n    },\n    {\n        odds: new src_1.Fraction(1, 12),\n        result: { attack: 0, defense: 2, kill: 0 },\n    },\n];\nconst results = src_1.rollCampaign(1, 1);\ncompareToExpected(chai_1.expect, expected, results);",
                  "err": {},
                  "uuid": "9d40d5a0-f4ec-4bb2-ac59-2645f1b3e3e1",
                  "parentUUID": "61600d76-4ff7-4cab-a6d1-830c21be4d33",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9d40d5a0-f4ec-4bb2-ac59-2645f1b3e3e1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "bf413847-3458-4db5-8da2-96244f74d462",
          "title": "combinatorics",
          "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/math/combinatorics.spec.ts",
          "file": "/spec/math/combinatorics.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "4f924b77-e0a8-46d2-8ee2-35ffb4a67ea4",
              "title": "cartesianProduct",
              "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/math/combinatorics.spec.ts",
              "file": "/spec/math/combinatorics.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should compute cartesian product of 2 arrays",
                  "fullTitle": "combinatorics cartesianProduct should compute cartesian product of 2 arrays",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const arr1 = [1, 2];\nconst arr2 = [3, 4];\nconst expected = [\n    [1, 3],\n    [1, 4],\n    [2, 3],\n    [2, 4],\n];\nchai_1.expect(combinatorics_1.cartesianProduct(arr1, arr2)).to.deep.equals(expected);",
                  "err": {},
                  "uuid": "034d8d97-334e-431c-9296-f51ae05294d0",
                  "parentUUID": "4f924b77-e0a8-46d2-8ee2-35ffb4a67ea4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "034d8d97-334e-431c-9296-f51ae05294d0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "7a93edcd-5407-430e-b157-d7d3082d3170",
          "title": "Fraction",
          "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/math/Fraction.spec.ts",
          "file": "/spec/math/Fraction.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "fractions with same numerator and denominator are equal",
              "fullTitle": "Fraction fractions with same numerator and denominator are equal",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const frac1 = new Fraction_1.Fraction(1, 3);\nconst frac2 = new Fraction_1.Fraction(1, 3);\nchai_1.expect(frac1.sameAs(frac2)).to.be.true;",
              "err": {},
              "uuid": "d9fe5137-48e7-43cd-ba4f-b87832601a17",
              "parentUUID": "7a93edcd-5407-430e-b157-d7d3082d3170",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "fractions with same numerator and different denominator are not equal",
              "fullTitle": "Fraction fractions with same numerator and different denominator are not equal",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const frac1 = new Fraction_1.Fraction(1, 3);\nconst frac2 = new Fraction_1.Fraction(1, 4);\nchai_1.expect(frac1.sameAs(frac2)).to.be.false;",
              "err": {},
              "uuid": "44e94926-7bd9-4ef6-88d0-c5d53ca66663",
              "parentUUID": "7a93edcd-5407-430e-b157-d7d3082d3170",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "fractions reducing to the same fraction are equal",
              "fullTitle": "Fraction fractions reducing to the same fraction are equal",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const frac1 = new Fraction_1.Fraction(1, 2);\nconst frac2 = new Fraction_1.Fraction(2, 4);\nchai_1.expect(frac1.sameAs(frac2)).to.be.true;",
              "err": {},
              "uuid": "2d07ad31-85be-4e00-a820-e618014dfbb2",
              "parentUUID": "7a93edcd-5407-430e-b157-d7d3082d3170",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "can add fractions",
              "fullTitle": "Fraction can add fractions",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const frac1 = new Fraction_1.Fraction(1, 3);\nconst frac2 = new Fraction_1.Fraction(1, 4);\nconst expected = new Fraction_1.Fraction(7, 12);\nchai_1.expect(frac1.add(frac2).sameAs(expected)).to.be.true;",
              "err": {},
              "uuid": "90f7f95f-6e7e-4260-81e3-843a3fac26ca",
              "parentUUID": "7a93edcd-5407-430e-b157-d7d3082d3170",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "can multiply fractions",
              "fullTitle": "Fraction can multiply fractions",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const frac1 = new Fraction_1.Fraction(1, 3);\nconst frac2 = new Fraction_1.Fraction(1, 4);\nconst expected = new Fraction_1.Fraction(1, 12);\nchai_1.expect(frac1.multiply(frac2).sameAs(expected)).to.be.true;",
              "err": {},
              "uuid": "d1a29cd6-d6e9-437d-bbbb-eaf084e0ccbd",
              "parentUUID": "7a93edcd-5407-430e-b157-d7d3082d3170",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "can compute to float",
              "fullTitle": "Fraction can compute to float",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const frac = new Fraction_1.Fraction(1, 2);\nchai_1.expect(frac.valueOf()).to.equal(0.5);",
              "err": {},
              "uuid": "f25f6940-42ba-4182-b49d-73603235647e",
              "parentUUID": "7a93edcd-5407-430e-b157-d7d3082d3170",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d9fe5137-48e7-43cd-ba4f-b87832601a17",
            "44e94926-7bd9-4ef6-88d0-c5d53ca66663",
            "2d07ad31-85be-4e00-a820-e618014dfbb2",
            "90f7f95f-6e7e-4260-81e3-843a3fac26ca",
            "d1a29cd6-d6e9-437d-bbbb-eaf084e0ccbd",
            "f25f6940-42ba-4182-b49d-73603235647e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "2ba12acc-9450-4333-806c-f59ede44e888",
          "title": "odds",
          "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/math/index.spec.ts",
          "file": "/spec/math/index.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "with only 1 random device",
              "fullTitle": "odds with only 1 random device",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const d6 = new math_1.RandomDevice([\n    [1, new math_1.Fraction(1, 6)],\n    [2, new math_1.Fraction(1, 6)],\n    [3, new math_1.Fraction(1, 6)],\n    [4, new math_1.Fraction(1, 6)],\n    [5, new math_1.Fraction(1, 6)],\n    [6, new math_1.Fraction(1, 6)],\n]);\nconst expected = [\n    { set: [1], odds: new math_1.Fraction(1, 6) },\n    { set: [2], odds: new math_1.Fraction(1, 6) },\n    { set: [3], odds: new math_1.Fraction(1, 6) },\n    { set: [4], odds: new math_1.Fraction(1, 6) },\n    { set: [5], odds: new math_1.Fraction(1, 6) },\n    { set: [6], odds: new math_1.Fraction(1, 6) },\n];\nconst results = math_1.odds([d6]);\ncompareToExpected(chai_1.expect, expected, results);",
              "err": {},
              "uuid": "752e749e-e27a-424f-b43b-51b81d1acffc",
              "parentUUID": "2ba12acc-9450-4333-806c-f59ede44e888",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "with 2 random devices",
              "fullTitle": "odds with 2 random devices",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const d4 = new math_1.RandomDevice([\n    [1, new math_1.Fraction(1, 4)],\n    [2, new math_1.Fraction(1, 4)],\n    [3, new math_1.Fraction(1, 4)],\n    [4, new math_1.Fraction(1, 4)],\n]);\nconst abcDie = new math_1.RandomDevice([\n    [\"a\", new math_1.Fraction(1, 3)],\n    [\"b\", new math_1.Fraction(1, 3)],\n    [\"c\", new math_1.Fraction(1, 3)],\n]);\nconst expected = [\n    { set: [1, \"a\"], odds: new math_1.Fraction(1, 12) },\n    { set: [1, \"b\"], odds: new math_1.Fraction(1, 12) },\n    { set: [1, \"c\"], odds: new math_1.Fraction(1, 12) },\n    { set: [2, \"a\"], odds: new math_1.Fraction(1, 12) },\n    { set: [2, \"b\"], odds: new math_1.Fraction(1, 12) },\n    { set: [2, \"c\"], odds: new math_1.Fraction(1, 12) },\n    { set: [3, \"a\"], odds: new math_1.Fraction(1, 12) },\n    { set: [3, \"b\"], odds: new math_1.Fraction(1, 12) },\n    { set: [3, \"c\"], odds: new math_1.Fraction(1, 12) },\n    { set: [4, \"a\"], odds: new math_1.Fraction(1, 12) },\n    { set: [4, \"b\"], odds: new math_1.Fraction(1, 12) },\n    { set: [4, \"c\"], odds: new math_1.Fraction(1, 12) },\n];\nconst results = math_1.odds([d4, abcDie]);\ncompareToExpected(chai_1.expect, expected, results);",
              "err": {},
              "uuid": "53a26fed-c838-4cbc-b823-c41bfe35a110",
              "parentUUID": "2ba12acc-9450-4333-806c-f59ede44e888",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "combines identical sets",
              "fullTitle": "odds combines identical sets",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const d2 = new math_1.RandomDevice([\n    [1, new math_1.Fraction(1, 2)],\n    [2, new math_1.Fraction(1, 2)],\n]);\nconst expected = [\n    { set: [1, 1], odds: new math_1.Fraction(1, 4) },\n    { set: [1, 2], odds: new math_1.Fraction(1, 2) },\n    { set: [2, 2], odds: new math_1.Fraction(1, 4) },\n];\nconst results = math_1.odds([d2, d2]);\ncompareToExpected(chai_1.expect, expected, results);",
              "err": {},
              "uuid": "c89deafc-61c6-4d1b-9b46-9f43935f6bb7",
              "parentUUID": "2ba12acc-9450-4333-806c-f59ede44e888",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "752e749e-e27a-424f-b43b-51b81d1acffc",
            "53a26fed-c838-4cbc-b823-c41bfe35a110",
            "c89deafc-61c6-4d1b-9b46-9f43935f6bb7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "da3795d4-831f-4f8e-8874-6d0536b577d7",
          "title": "SetWithOdds",
          "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/math/SetWithOdds.spec.ts",
          "file": "/spec/math/SetWithOdds.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "196c0b23-33f5-4eab-a417-91a99729742f",
              "title": "combineSetWithOdds",
              "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/math/SetWithOdds.spec.ts",
              "file": "/spec/math/SetWithOdds.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "combines 2 sets with odds",
                  "fullTitle": "SetWithOdds combineSetWithOdds combines 2 sets with odds",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swo1 = {\n    odds: new math_1.Fraction(1, 3),\n    set: [1, 2],\n};\nconst swo2 = {\n    odds: new math_1.Fraction(1, 2),\n    set: [\"a\", \"b\"],\n};\nconst combined = math_1.combineSetWithOdds(swo1, swo2);\nchai_1.expect(combined.set).to.deep.equal([1, 2, \"a\", \"b\"]);\nchai_1.expect(combined.odds.sameAs(new math_1.Fraction(1, 6))).to.be.true;",
                  "err": {},
                  "uuid": "0398e988-7ec8-44ac-b0e1-c5a99a602c68",
                  "parentUUID": "196c0b23-33f5-4eab-a417-91a99729742f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can be used for reduction",
                  "fullTitle": "SetWithOdds combineSetWithOdds can be used for reduction",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const sets = [\n    { set: [1, 2], odds: new math_1.Fraction(1, 2) },\n    { set: [5, 6], odds: new math_1.Fraction(1, 3) },\n    { set: [8, 9], odds: new math_1.Fraction(1, 4) },\n];\nconst combined = sets.reduce(math_1.combineSetWithOdds);\nchai_1.expect(combined.set).to.deep.equal([1, 2, 5, 6, 8, 9]);\nchai_1.expect(combined.odds.sameAs(new math_1.Fraction(1, 24))).to.be.true;",
                  "err": {},
                  "uuid": "cb8f1d29-5390-4a93-ad2f-279aa28bb45f",
                  "parentUUID": "196c0b23-33f5-4eab-a417-91a99729742f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0398e988-7ec8-44ac-b0e1-c5a99a602c68",
                "cb8f1d29-5390-4a93-ad2f-279aa28bb45f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "537aee34-c2c7-4bf7-947c-013b7e38b33c",
          "title": "Oath domain model",
          "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/oath/oath.spec.ts",
          "file": "/spec/oath/oath.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "fffc9439-d535-48c0-9125-72648402b5c9",
              "title": "Attack and Defense dice faces",
              "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/oath/oath.spec.ts",
              "file": "/spec/oath/oath.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should have consistent order",
                  "fullTitle": "Oath domain model Attack and Defense dice faces should have consistent order",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const someFaces = [\n    oath_1.DefenseDieFace.DOUBLE,\n    oath_1.DefenseDieFace.TWO_SHIELDS,\n    oath_1.AttackDieFace.HOLLOW_SWORD,\n    oath_1.DefenseDieFace.SHIELD,\n    oath_1.AttackDieFace.TWO_SWORDS_AND_SKULL,\n    oath_1.AttackDieFace.SWORD,\n    oath_1.DefenseDieFace.TWO_SHIELDS,\n    oath_1.AttackDieFace.SWORD,\n    oath_1.DefenseDieFace.BLANK,\n    oath_1.DefenseDieFace.SHIELD,\n];\nconst expected = [\n    oath_1.AttackDieFace.HOLLOW_SWORD,\n    oath_1.AttackDieFace.SWORD,\n    oath_1.AttackDieFace.SWORD,\n    oath_1.AttackDieFace.TWO_SWORDS_AND_SKULL,\n    oath_1.DefenseDieFace.BLANK,\n    oath_1.DefenseDieFace.SHIELD,\n    oath_1.DefenseDieFace.SHIELD,\n    oath_1.DefenseDieFace.TWO_SHIELDS,\n    oath_1.DefenseDieFace.TWO_SHIELDS,\n    oath_1.DefenseDieFace.DOUBLE,\n];\nchai_1.expect(someFaces.sort()).to.deep.equal(expected);",
                  "err": {},
                  "uuid": "fe63c0ee-7895-464c-81f3-ea1d417e06bf",
                  "parentUUID": "fffc9439-d535-48c0-9125-72648402b5c9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fe63c0ee-7895-464c-81f3-ea1d417e06bf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "404ef7a0-23a4-414d-aca6-28ff91fc6169",
              "title": "CampaignResult",
              "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/oath/oath.spec.ts",
              "file": "/spec/oath/oath.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "af8aed2b-15fb-4f8b-b9ef-af93a5524f38",
                  "title": "campaignResultCompareFn",
                  "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/oath/oath.spec.ts",
                  "file": "/spec/oath/oath.spec.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "returns 0 if result are equal",
                      "fullTitle": "Oath domain model CampaignResult campaignResultCompareFn returns 0 if result are equal",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "chai_1.expect(oath_1.campaignResultCompareFn({ attack: 3, defense: 2, kill: 0 }, { attack: 3, defense: 2, kill: 0 })).to.equal(0);",
                      "err": {},
                      "uuid": "63293639-3c94-4486-8816-dab031751bd5",
                      "parentUUID": "af8aed2b-15fb-4f8b-b9ef-af93a5524f38",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "can be used to sort results by attack descending, then defense ascending then kill ascending",
                      "fullTitle": "Oath domain model CampaignResult campaignResultCompareFn can be used to sort results by attack descending, then defense ascending then kill ascending",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const someResults = [\n    { attack: 5, defense: 2, kill: 0 },\n    { attack: 5, defense: 2, kill: 0 },\n    { attack: 3, defense: 0, kill: 2 },\n    { attack: 4, defense: 4, kill: 0 },\n    { attack: 5, defense: 3, kill: 3 },\n    { attack: 5, defense: 1, kill: 0 },\n    { attack: 5, defense: 1, kill: 2 },\n];\nconst expected = [\n    { attack: 5, defense: 1, kill: 0 },\n    { attack: 5, defense: 1, kill: 2 },\n    { attack: 5, defense: 2, kill: 0 },\n    { attack: 5, defense: 2, kill: 0 },\n    { attack: 5, defense: 3, kill: 3 },\n    { attack: 4, defense: 4, kill: 0 },\n    { attack: 3, defense: 0, kill: 2 },\n];\nchai_1.expect(someResults.sort(oath_1.campaignResultCompareFn)).to.deep.equal(expected);",
                      "err": {},
                      "uuid": "7303d177-3078-4698-a19d-ffc4a3aab442",
                      "parentUUID": "af8aed2b-15fb-4f8b-b9ef-af93a5524f38",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "63293639-3c94-4486-8816-dab031751bd5",
                    "7303d177-3078-4698-a19d-ffc4a3aab442"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c1a40ea6-57ad-45bc-90a0-fa4530abd72b",
              "title": "toCampaignResult",
              "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/oath/oath.spec.ts",
              "file": "/spec/oath/oath.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "can sum up a bunch of die faces into a campaign result",
                  "fullTitle": "Oath domain model toCampaignResult can sum up a bunch of die faces into a campaign result",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const rolled = [\n    oath_1.DefenseDieFace.DOUBLE,\n    oath_1.DefenseDieFace.TWO_SHIELDS,\n    oath_1.AttackDieFace.HOLLOW_SWORD,\n    oath_1.DefenseDieFace.SHIELD,\n    oath_1.AttackDieFace.TWO_SWORDS_AND_SKULL,\n    oath_1.AttackDieFace.SWORD,\n    oath_1.DefenseDieFace.TWO_SHIELDS,\n    oath_1.AttackDieFace.SWORD,\n    oath_1.AttackDieFace.HOLLOW_SWORD,\n    oath_1.DefenseDieFace.BLANK,\n    oath_1.DefenseDieFace.SHIELD,\n    oath_1.AttackDieFace.HOLLOW_SWORD,\n];\nconst result = oath_1.toCampaignResult(rolled);\nchai_1.expect(result).to.deep.equal({ attack: 5, defense: 12, kill: 1 });\nchai_1.expect(result.attack).to.equal(5);\nchai_1.expect(result.defense).to.equal(12);\nchai_1.expect(result.kill).to.equal(1);",
                  "err": {},
                  "uuid": "86966cf1-e9a7-4864-8bba-6ceb974d1f2b",
                  "parentUUID": "c1a40ea6-57ad-45bc-90a0-fa4530abd72b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "86966cf1-e9a7-4864-8bba-6ceb974d1f2b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "5f8846bb-d85b-49e3-88b1-bcd1a2cc494a",
          "title": "utils",
          "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/utils/arrays.spec.ts",
          "file": "/spec/utils/arrays.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "4deaf04a-13aa-4ce2-aa36-2ff222b99cca",
              "title": "flatten",
              "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/utils/arrays.spec.ts",
              "file": "/spec/utils/arrays.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "flattens an array",
                  "fullTitle": "utils flatten flattens an array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.expect(arrays_1.flatten([[], [1], [2]])).to.deep.equal([1, 2]);",
                  "err": {},
                  "uuid": "aea6a25d-cc73-42f8-b686-6b5fa3d81a18",
                  "parentUUID": "4deaf04a-13aa-4ce2-aa36-2ff222b99cca",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "aea6a25d-cc73-42f8-b686-6b5fa3d81a18"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4f02dc52-a3dc-4aea-89a8-65d9d1503659",
              "title": "arrayEquals",
              "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/utils/arrays.spec.ts",
              "file": "/spec/utils/arrays.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns true if the arrays contain the same values in the same order",
                  "fullTitle": "utils arrayEquals returns true if the arrays contain the same values in the same order",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.expect(arrays_1.arrayEquals([1, 2, 3], [1, 2, 3])).to.be.true;",
                  "err": {},
                  "uuid": "85d5f1cc-a146-4d7d-bca9-62a44dcc4207",
                  "parentUUID": "4f02dc52-a3dc-4aea-89a8-65d9d1503659",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns false if the arrays do not contain the same values",
                  "fullTitle": "utils arrayEquals returns false if the arrays do not contain the same values",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.expect(arrays_1.arrayEquals([1, 2, 3], [1, 2, 4])).to.be.false;",
                  "err": {},
                  "uuid": "2837db59-5dbe-4d2a-8239-cb003ade218f",
                  "parentUUID": "4f02dc52-a3dc-4aea-89a8-65d9d1503659",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns false if the arrays contain the same values but in a different order",
                  "fullTitle": "utils arrayEquals returns false if the arrays contain the same values but in a different order",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.expect(arrays_1.arrayEquals([1, 2, 3], [3, 1, 2])).to.be.false;",
                  "err": {},
                  "uuid": "c062924e-7eb4-4ec1-b24b-028ab93e6710",
                  "parentUUID": "4f02dc52-a3dc-4aea-89a8-65d9d1503659",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can compare different primitives",
                  "fullTitle": "utils arrayEquals can compare different primitives",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.expect(arrays_1.arrayEquals([\"a\", \"b\"], [\"a\", \"b\"])).to.be.true;\nchai_1.expect(arrays_1.arrayEquals([1.0, 2.5], [1.0, 2.5])).to.be.true;\nchai_1.expect(arrays_1.arrayEquals([true, false], [true, false])).to.be.true;\nchai_1.expect(arrays_1.arrayEquals([1, null, undefined], [1, null, undefined])).to.be\n    .true;",
                  "err": {},
                  "uuid": "9c3b075b-44cf-4189-9fb7-8efe25eba0f8",
                  "parentUUID": "4f02dc52-a3dc-4aea-89a8-65d9d1503659",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "85d5f1cc-a146-4d7d-bca9-62a44dcc4207",
                "2837db59-5dbe-4d2a-8239-cb003ade218f",
                "c062924e-7eb4-4ec1-b24b-028ab93e6710",
                "9c3b075b-44cf-4189-9fb7-8efe25eba0f8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fc4b834b-2b99-4d23-8b74-222b17769347",
              "title": "replace",
              "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/utils/arrays.spec.ts",
              "file": "/spec/utils/arrays.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should replace at specified index",
                  "fullTitle": "utils replace should replace at specified index",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const arr = [\"a\", \"b\", \"c\"];\nconst replaced = arrays_1.replace(arr, 1, \"x\");\nchai_1.expect(replaced).to.deep.equal([\"a\", \"x\", \"c\"]);",
                  "err": {},
                  "uuid": "0abf2d44-f867-4274-a25f-525d0b31fbd0",
                  "parentUUID": "fc4b834b-2b99-4d23-8b74-222b17769347",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to replace at first position",
                  "fullTitle": "utils replace should be able to replace at first position",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const arr = [\"a\", \"b\", \"c\"];\nconst replaced = arrays_1.replace(arr, 0, \"x\");\nchai_1.expect(replaced).to.deep.equal([\"x\", \"b\", \"c\"]);",
                  "err": {},
                  "uuid": "e584962e-c62a-4a42-b4ff-e3d5c6eeb14b",
                  "parentUUID": "fc4b834b-2b99-4d23-8b74-222b17769347",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to replace at last position",
                  "fullTitle": "utils replace should be able to replace at last position",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const arr = [\"a\", \"b\", \"c\"];\nconst replaced = arrays_1.replace(arr, 2, \"x\");\nchai_1.expect(replaced).to.deep.equal([\"a\", \"b\", \"x\"]);",
                  "err": {},
                  "uuid": "20f4130d-5489-4639-9d83-687cd51621ac",
                  "parentUUID": "fc4b834b-2b99-4d23-8b74-222b17769347",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the same array if specified index is < 0",
                  "fullTitle": "utils replace should return the same array if specified index is < 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const arr = [\"a\", \"b\", \"c\"];\nconst replaced = arrays_1.replace(arr, -1, \"x\");\nchai_1.expect(replaced).to.deep.equal([\"a\", \"b\", \"c\"]);",
                  "err": {},
                  "uuid": "a9820458-9308-4b8c-911a-a87b0fb2117c",
                  "parentUUID": "fc4b834b-2b99-4d23-8b74-222b17769347",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the same array if specified index is > array length",
                  "fullTitle": "utils replace should return the same array if specified index is > array length",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const arr = [\"a\", \"b\", \"c\"];\nconst replaced = arrays_1.replace(arr, 3, \"x\");\nchai_1.expect(replaced).to.deep.equal([\"a\", \"b\", \"c\"]);",
                  "err": {},
                  "uuid": "cb33932b-e672-453f-b1d2-9942bf8d3506",
                  "parentUUID": "fc4b834b-2b99-4d23-8b74-222b17769347",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should leave the original array untouched",
                  "fullTitle": "utils replace should leave the original array untouched",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const arr = [\"a\", \"b\", \"c\"];\narrays_1.replace(arr, 1, \"x\");\nchai_1.expect(arr).to.deep.equal([\"a\", \"b\", \"c\"]);",
                  "err": {},
                  "uuid": "51d3c630-3136-4192-bd65-5c907f6cfb89",
                  "parentUUID": "fc4b834b-2b99-4d23-8b74-222b17769347",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0abf2d44-f867-4274-a25f-525d0b31fbd0",
                "e584962e-c62a-4a42-b4ff-e3d5c6eeb14b",
                "20f4130d-5489-4639-9d83-687cd51621ac",
                "a9820458-9308-4b8c-911a-a87b0fb2117c",
                "cb33932b-e672-453f-b1d2-9942bf8d3506",
                "51d3c630-3136-4192-bd65-5c907f6cfb89"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.2.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "index",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.1"
    },
    "marge": {
      "options": {
        "reportDir": "reports/tests",
        "reportFilename": "index"
      },
      "version": "5.1.0"
    }
  }
}