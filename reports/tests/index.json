{
  "stats": {
    "suites": 11,
    "tests": 24,
    "passes": 24,
    "pending": 0,
    "failures": 0,
    "start": "2020-12-15T15:08:09.564Z",
    "end": "2020-12-15T15:08:09.591Z",
    "duration": 27,
    "testsRegistered": 24,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "b2e15e6b-fe6e-4615-ad73-a0db571fb787",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "d3b32458-a1a7-4212-b8fe-a712ba7eb31f",
          "title": "combinatorics",
          "fullFile": "/Users/sylvain.desve/Developer/akaan/oath-odds/spec/combinatorics.spec.ts",
          "file": "/spec/combinatorics.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "e6fdc6e4-2191-4292-ac69-154883316d6b",
              "title": "cartesianProduct",
              "fullFile": "/Users/sylvain.desve/Developer/akaan/oath-odds/spec/combinatorics.spec.ts",
              "file": "/spec/combinatorics.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should compute cartesian product of 2 arrays",
                  "fullTitle": "combinatorics cartesianProduct should compute cartesian product of 2 arrays",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const arr1 = [1, 2];\nconst arr2 = [3, 4];\nconst expected = [\n    [1, 3],\n    [1, 4],\n    [2, 3],\n    [2, 4],\n];\nchai_1.expect(combinatorics_1.cartesianProduct(arr1, arr2)).to.deep.equals(expected);",
                  "err": {},
                  "uuid": "952affd4-848d-4be2-b689-45a2d8cab1cd",
                  "parentUUID": "e6fdc6e4-2191-4292-ac69-154883316d6b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "952affd4-848d-4be2-b689-45a2d8cab1cd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "2ef05886-f17c-4765-b7b0-a4c434e981cf",
          "title": "exports",
          "fullFile": "/Users/sylvain.desve/Developer/akaan/oath-odds/spec/exports.spec.ts",
          "file": "/spec/exports.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "exports the `odds` function",
              "fullTitle": "exports exports the `odds` function",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai_1.expect(OathOdds.odds).to.exist;",
              "err": {},
              "uuid": "04923b78-288f-4f3c-b157-4cdf0c5fdaa8",
              "parentUUID": "2ef05886-f17c-4765-b7b0-a4c434e981cf",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "04923b78-288f-4f3c-b157-4cdf0c5fdaa8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "ce329f9d-58ab-45ac-9b24-29b2e97cb6a9",
          "title": "Fraction",
          "fullFile": "/Users/sylvain.desve/Developer/akaan/oath-odds/spec/Fraction.spec.ts",
          "file": "/spec/Fraction.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "fractions with same numerator and denominator are equal",
              "fullTitle": "Fraction fractions with same numerator and denominator are equal",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const frac1 = new Fraction_1.Fraction(1, 3);\nconst frac2 = new Fraction_1.Fraction(1, 3);\nchai_1.expect(frac1.sameAs(frac2)).to.be.true;",
              "err": {},
              "uuid": "93b57f98-b173-4732-83e9-809a52ad8ca2",
              "parentUUID": "ce329f9d-58ab-45ac-9b24-29b2e97cb6a9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "fractions with same numerator and different denominator are not equal",
              "fullTitle": "Fraction fractions with same numerator and different denominator are not equal",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const frac1 = new Fraction_1.Fraction(1, 3);\nconst frac2 = new Fraction_1.Fraction(1, 4);\nchai_1.expect(frac1.sameAs(frac2)).to.be.false;",
              "err": {},
              "uuid": "84970e91-bedc-499d-92e0-d70dda77369b",
              "parentUUID": "ce329f9d-58ab-45ac-9b24-29b2e97cb6a9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "fractions reducing to the same fraction are equal",
              "fullTitle": "Fraction fractions reducing to the same fraction are equal",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const frac1 = new Fraction_1.Fraction(1, 2);\nconst frac2 = new Fraction_1.Fraction(2, 4);\nchai_1.expect(frac1.sameAs(frac2)).to.be.true;",
              "err": {},
              "uuid": "42c00f32-0148-4e0c-bcac-b0606b738630",
              "parentUUID": "ce329f9d-58ab-45ac-9b24-29b2e97cb6a9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "can add fractions",
              "fullTitle": "Fraction can add fractions",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const frac1 = new Fraction_1.Fraction(1, 3);\nconst frac2 = new Fraction_1.Fraction(1, 4);\nconst expected = new Fraction_1.Fraction(7, 12);\nchai_1.expect(frac1.add(frac2).sameAs(expected)).to.be.true;",
              "err": {},
              "uuid": "0e8e53e3-9928-4aa2-95ed-2225c51f390b",
              "parentUUID": "ce329f9d-58ab-45ac-9b24-29b2e97cb6a9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "can multiply fractions",
              "fullTitle": "Fraction can multiply fractions",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const frac1 = new Fraction_1.Fraction(1, 3);\nconst frac2 = new Fraction_1.Fraction(1, 4);\nconst expected = new Fraction_1.Fraction(1, 12);\nchai_1.expect(frac1.multiply(frac2).sameAs(expected)).to.be.true;",
              "err": {},
              "uuid": "eb69b024-c0e1-4109-a7d7-9b2aa8840762",
              "parentUUID": "ce329f9d-58ab-45ac-9b24-29b2e97cb6a9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "can compute to float",
              "fullTitle": "Fraction can compute to float",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const frac = new Fraction_1.Fraction(1, 2);\nchai_1.expect(frac.valueOf()).to.equal(0.5);",
              "err": {},
              "uuid": "d5657629-adcf-422a-8cf8-ac2f511ff212",
              "parentUUID": "ce329f9d-58ab-45ac-9b24-29b2e97cb6a9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "93b57f98-b173-4732-83e9-809a52ad8ca2",
            "84970e91-bedc-499d-92e0-d70dda77369b",
            "42c00f32-0148-4e0c-bcac-b0606b738630",
            "0e8e53e3-9928-4aa2-95ed-2225c51f390b",
            "eb69b024-c0e1-4109-a7d7-9b2aa8840762",
            "d5657629-adcf-422a-8cf8-ac2f511ff212"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "ef6e25c7-163a-4177-a22f-bc40fc695fe2",
          "title": "odds",
          "fullFile": "/Users/sylvain.desve/Developer/akaan/oath-odds/spec/index.spec.ts",
          "file": "/spec/index.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "with only 1 random device",
              "fullTitle": "odds with only 1 random device",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const d6 = new RandomDevice_1.RandomDevice([\n    [1, new Fraction_1.Fraction(1, 6)],\n    [2, new Fraction_1.Fraction(1, 6)],\n    [3, new Fraction_1.Fraction(1, 6)],\n    [4, new Fraction_1.Fraction(1, 6)],\n    [5, new Fraction_1.Fraction(1, 6)],\n    [6, new Fraction_1.Fraction(1, 6)],\n]);\nconst expected = [\n    { set: [1], odds: new Fraction_1.Fraction(1, 6) },\n    { set: [2], odds: new Fraction_1.Fraction(1, 6) },\n    { set: [3], odds: new Fraction_1.Fraction(1, 6) },\n    { set: [4], odds: new Fraction_1.Fraction(1, 6) },\n    { set: [5], odds: new Fraction_1.Fraction(1, 6) },\n    { set: [6], odds: new Fraction_1.Fraction(1, 6) },\n];\nconst results = src_1.odds([d6]);\ncompareToExpected(chai_1.expect, expected, results);",
              "err": {},
              "uuid": "bce3a6f3-4606-453b-9a2d-0a65dfe0873e",
              "parentUUID": "ef6e25c7-163a-4177-a22f-bc40fc695fe2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "with 2 random devices",
              "fullTitle": "odds with 2 random devices",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const d4 = new RandomDevice_1.RandomDevice([\n    [1, new Fraction_1.Fraction(1, 4)],\n    [2, new Fraction_1.Fraction(1, 4)],\n    [3, new Fraction_1.Fraction(1, 4)],\n    [4, new Fraction_1.Fraction(1, 4)],\n]);\nconst abcDie = new RandomDevice_1.RandomDevice([\n    [\"a\", new Fraction_1.Fraction(1, 3)],\n    [\"b\", new Fraction_1.Fraction(1, 3)],\n    [\"c\", new Fraction_1.Fraction(1, 3)],\n]);\nconst expected = [\n    { set: [1, \"a\"], odds: new Fraction_1.Fraction(1, 12) },\n    { set: [1, \"b\"], odds: new Fraction_1.Fraction(1, 12) },\n    { set: [1, \"c\"], odds: new Fraction_1.Fraction(1, 12) },\n    { set: [2, \"a\"], odds: new Fraction_1.Fraction(1, 12) },\n    { set: [2, \"b\"], odds: new Fraction_1.Fraction(1, 12) },\n    { set: [2, \"c\"], odds: new Fraction_1.Fraction(1, 12) },\n    { set: [3, \"a\"], odds: new Fraction_1.Fraction(1, 12) },\n    { set: [3, \"b\"], odds: new Fraction_1.Fraction(1, 12) },\n    { set: [3, \"c\"], odds: new Fraction_1.Fraction(1, 12) },\n    { set: [4, \"a\"], odds: new Fraction_1.Fraction(1, 12) },\n    { set: [4, \"b\"], odds: new Fraction_1.Fraction(1, 12) },\n    { set: [4, \"c\"], odds: new Fraction_1.Fraction(1, 12) },\n];\nconst results = src_1.odds([d4, abcDie]);\ncompareToExpected(chai_1.expect, expected, results);",
              "err": {},
              "uuid": "58c2e76a-998f-480e-8008-4138308256b2",
              "parentUUID": "ef6e25c7-163a-4177-a22f-bc40fc695fe2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "combines identical sets",
              "fullTitle": "odds combines identical sets",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const d2 = new RandomDevice_1.RandomDevice([\n    [1, new Fraction_1.Fraction(1, 2)],\n    [2, new Fraction_1.Fraction(1, 2)],\n]);\nconst expected = [\n    { set: [1, 1], odds: new Fraction_1.Fraction(1, 4) },\n    { set: [1, 2], odds: new Fraction_1.Fraction(1, 2) },\n    { set: [2, 2], odds: new Fraction_1.Fraction(1, 4) },\n];\nconst results = src_1.odds([d2, d2]);\ncompareToExpected(chai_1.expect, expected, results);",
              "err": {},
              "uuid": "c0a555ca-4429-4d63-9508-c7fa70a7989b",
              "parentUUID": "ef6e25c7-163a-4177-a22f-bc40fc695fe2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "bce3a6f3-4606-453b-9a2d-0a65dfe0873e",
            "58c2e76a-998f-480e-8008-4138308256b2",
            "c0a555ca-4429-4d63-9508-c7fa70a7989b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "83738c9f-9a14-4389-9552-7b364389774b",
          "title": "SetWithOdds",
          "fullFile": "/Users/sylvain.desve/Developer/akaan/oath-odds/spec/SetWithOdds.spec.ts",
          "file": "/spec/SetWithOdds.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "52af905d-b054-4696-84a2-5b8dd6160993",
              "title": "combineSetWithOdds",
              "fullFile": "/Users/sylvain.desve/Developer/akaan/oath-odds/spec/SetWithOdds.spec.ts",
              "file": "/spec/SetWithOdds.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "combines 2 sets with odds",
                  "fullTitle": "SetWithOdds combineSetWithOdds combines 2 sets with odds",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swo1 = {\n    odds: new Fraction_1.Fraction(1, 3),\n    set: [1, 2],\n};\nconst swo2 = {\n    odds: new Fraction_1.Fraction(1, 2),\n    set: [\"a\", \"b\"],\n};\nconst combined = SetWithOdds_1.combineSetWithOdds(swo1, swo2);\nchai_1.expect(combined.set).to.deep.equal([1, 2, \"a\", \"b\"]);\nchai_1.expect(combined.odds.sameAs(new Fraction_1.Fraction(1, 6))).to.be.true;",
                  "err": {},
                  "uuid": "492c0c8c-6be0-413f-b1e8-e8eb4dbc7a80",
                  "parentUUID": "52af905d-b054-4696-84a2-5b8dd6160993",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can be used for reduction",
                  "fullTitle": "SetWithOdds combineSetWithOdds can be used for reduction",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const sets = [\n    { set: [1, 2], odds: new Fraction_1.Fraction(1, 2) },\n    { set: [5, 6], odds: new Fraction_1.Fraction(1, 3) },\n    { set: [8, 9], odds: new Fraction_1.Fraction(1, 4) },\n];\nconst combined = sets.reduce(SetWithOdds_1.combineSetWithOdds);\nchai_1.expect(combined.set).to.deep.equal([1, 2, 5, 6, 8, 9]);\nchai_1.expect(combined.odds.sameAs(new Fraction_1.Fraction(1, 24))).to.be.true;",
                  "err": {},
                  "uuid": "84d6b3da-b7dc-4d70-a84c-11684301510c",
                  "parentUUID": "52af905d-b054-4696-84a2-5b8dd6160993",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "492c0c8c-6be0-413f-b1e8-e8eb4dbc7a80",
                "84d6b3da-b7dc-4d70-a84c-11684301510c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "46d691f6-a5ca-4191-b603-394094c41a88",
          "title": "utils",
          "fullFile": "/Users/sylvain.desve/Developer/akaan/oath-odds/spec/utils.spec.ts",
          "file": "/spec/utils.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "34a09644-d3f0-4fc4-b9fe-1dbb61353018",
              "title": "flatten",
              "fullFile": "/Users/sylvain.desve/Developer/akaan/oath-odds/spec/utils.spec.ts",
              "file": "/spec/utils.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "flattens an array",
                  "fullTitle": "utils flatten flattens an array",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.expect(utils_1.flatten([[], [1], [2]])).to.deep.equal([1, 2]);",
                  "err": {},
                  "uuid": "cb2275e7-d08c-46eb-9132-9b27c14d0b23",
                  "parentUUID": "34a09644-d3f0-4fc4-b9fe-1dbb61353018",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cb2275e7-d08c-46eb-9132-9b27c14d0b23"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "09a6418f-d2e3-440e-bff5-0cfbee0bd53e",
              "title": "arrayEquals",
              "fullFile": "/Users/sylvain.desve/Developer/akaan/oath-odds/spec/utils.spec.ts",
              "file": "/spec/utils.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns true if the arrays contain the same values in the same order",
                  "fullTitle": "utils arrayEquals returns true if the arrays contain the same values in the same order",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.expect(utils_1.arrayEquals([1, 2, 3], [1, 2, 3])).to.be.true;",
                  "err": {},
                  "uuid": "9f4dba94-beb1-4239-8ff4-81b75f7e0868",
                  "parentUUID": "09a6418f-d2e3-440e-bff5-0cfbee0bd53e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns false if the arrays do not contain the same values",
                  "fullTitle": "utils arrayEquals returns false if the arrays do not contain the same values",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.expect(utils_1.arrayEquals([1, 2, 3], [1, 2, 4])).to.be.false;",
                  "err": {},
                  "uuid": "b4dd92fb-a716-4476-9999-8dd63ea5849e",
                  "parentUUID": "09a6418f-d2e3-440e-bff5-0cfbee0bd53e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns false if the arrays contain the same values but in a different order",
                  "fullTitle": "utils arrayEquals returns false if the arrays contain the same values but in a different order",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.expect(utils_1.arrayEquals([1, 2, 3], [3, 1, 2])).to.be.false;",
                  "err": {},
                  "uuid": "54990660-5f14-42b5-bb99-0b6a9aab276c",
                  "parentUUID": "09a6418f-d2e3-440e-bff5-0cfbee0bd53e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can compare different primitives",
                  "fullTitle": "utils arrayEquals can compare different primitives",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.expect(utils_1.arrayEquals([\"a\", \"b\"], [\"a\", \"b\"])).to.be.true;\nchai_1.expect(utils_1.arrayEquals([1.0, 2.5], [1.0, 2.5])).to.be.true;\nchai_1.expect(utils_1.arrayEquals([true, false], [true, false])).to.be.true;\nchai_1.expect(utils_1.arrayEquals([1, null, undefined], [1, null, undefined])).to.be\n    .true;",
                  "err": {},
                  "uuid": "3d83190d-e947-48c2-8f9a-c2a57bf197ea",
                  "parentUUID": "09a6418f-d2e3-440e-bff5-0cfbee0bd53e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9f4dba94-beb1-4239-8ff4-81b75f7e0868",
                "b4dd92fb-a716-4476-9999-8dd63ea5849e",
                "54990660-5f14-42b5-bb99-0b6a9aab276c",
                "3d83190d-e947-48c2-8f9a-c2a57bf197ea"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1772ebb0-7588-4c29-b58c-de6310534989",
              "title": "replace",
              "fullFile": "/Users/sylvain.desve/Developer/akaan/oath-odds/spec/utils.spec.ts",
              "file": "/spec/utils.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should replace at specified index",
                  "fullTitle": "utils replace should replace at specified index",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const arr = [\"a\", \"b\", \"c\"];\nconst replaced = utils_1.replace(arr, 1, \"x\");\nchai_1.expect(replaced).to.deep.equal([\"a\", \"x\", \"c\"]);",
                  "err": {},
                  "uuid": "5fafa35c-2196-44b9-88a9-00d3c70d8a56",
                  "parentUUID": "1772ebb0-7588-4c29-b58c-de6310534989",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to replace at first position",
                  "fullTitle": "utils replace should be able to replace at first position",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const arr = [\"a\", \"b\", \"c\"];\nconst replaced = utils_1.replace(arr, 0, \"x\");\nchai_1.expect(replaced).to.deep.equal([\"x\", \"b\", \"c\"]);",
                  "err": {},
                  "uuid": "ba6c21cf-0028-4b70-b2ac-1b7ddea84a91",
                  "parentUUID": "1772ebb0-7588-4c29-b58c-de6310534989",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to replace at last position",
                  "fullTitle": "utils replace should be able to replace at last position",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const arr = [\"a\", \"b\", \"c\"];\nconst replaced = utils_1.replace(arr, 2, \"x\");\nchai_1.expect(replaced).to.deep.equal([\"a\", \"b\", \"x\"]);",
                  "err": {},
                  "uuid": "7b3a7c0e-266e-4a4e-a347-0076539356b8",
                  "parentUUID": "1772ebb0-7588-4c29-b58c-de6310534989",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the same array if specified index is < 0",
                  "fullTitle": "utils replace should return the same array if specified index is < 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const arr = [\"a\", \"b\", \"c\"];\nconst replaced = utils_1.replace(arr, -1, \"x\");\nchai_1.expect(replaced).to.deep.equal([\"a\", \"b\", \"c\"]);",
                  "err": {},
                  "uuid": "41a87b22-7538-4413-8a28-bdde9f6f2bb5",
                  "parentUUID": "1772ebb0-7588-4c29-b58c-de6310534989",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the same array if specified index is > array length",
                  "fullTitle": "utils replace should return the same array if specified index is > array length",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const arr = [\"a\", \"b\", \"c\"];\nconst replaced = utils_1.replace(arr, 3, \"x\");\nchai_1.expect(replaced).to.deep.equal([\"a\", \"b\", \"c\"]);",
                  "err": {},
                  "uuid": "e0a7ec44-e694-45be-8fd5-9013d791fbad",
                  "parentUUID": "1772ebb0-7588-4c29-b58c-de6310534989",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should leave the original array untouched",
                  "fullTitle": "utils replace should leave the original array untouched",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const arr = [\"a\", \"b\", \"c\"];\nutils_1.replace(arr, 1, \"x\");\nchai_1.expect(arr).to.deep.equal([\"a\", \"b\", \"c\"]);",
                  "err": {},
                  "uuid": "fc8dda14-59b9-4fdb-a859-ce4c30593bad",
                  "parentUUID": "1772ebb0-7588-4c29-b58c-de6310534989",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5fafa35c-2196-44b9-88a9-00d3c70d8a56",
                "ba6c21cf-0028-4b70-b2ac-1b7ddea84a91",
                "7b3a7c0e-266e-4a4e-a347-0076539356b8",
                "41a87b22-7538-4413-8a28-bdde9f6f2bb5",
                "e0a7ec44-e694-45be-8fd5-9013d791fbad",
                "fc8dda14-59b9-4fdb-a859-ce4c30593bad"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.2.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "index",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.1"
    },
    "marge": {
      "options": {
        "reportDir": "reports/tests",
        "reportFilename": "index"
      },
      "version": "5.1.0"
    }
  }
}