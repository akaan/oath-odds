{
  "stats": {
    "suites": 21,
    "tests": 33,
    "passes": 33,
    "pending": 0,
    "failures": 0,
    "start": "2020-12-17T15:16:40.218Z",
    "end": "2020-12-17T15:16:40.257Z",
    "duration": 39,
    "testsRegistered": 33,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "fecd8707-5d13-4ef4-9ce0-d3ae5800dc9a",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "4fd1ed7f-24ac-4379-9065-00efdb6c4218",
          "title": "exports",
          "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/exports.spec.ts",
          "file": "/spec/exports.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "exports the `odds` function",
              "fullTitle": "exports exports the `odds` function",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai_1.expect(OathOdds.rollCampaign).to.exist;",
              "err": {},
              "uuid": "d9e29831-57b7-40f7-bbd0-a1e7a6ee8408",
              "parentUUID": "4fd1ed7f-24ac-4379-9065-00efdb6c4218",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d9e29831-57b7-40f7-bbd0-a1e7a6ee8408"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "de55f2fd-93ca-495b-9137-755ce9ace03e",
          "title": "OathOdds",
          "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/index.spec.ts",
          "file": "/spec/index.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "82876304-b866-4cc7-92b4-e759edaaadd1",
              "title": "rollCampaign",
              "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/index.spec.ts",
              "file": "/spec/index.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "",
                  "fullTitle": "OathOdds rollCampaign ",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expected = [\n    {\n        oddsOfValue: new src_1.Fraction(1, 12),\n        value: { attack: 2, defense: 0, kill: 1 },\n    },\n    {\n        oddsOfValue: new src_1.Fraction(1, 18),\n        value: { attack: 2, defense: 1, kill: 1 },\n    },\n    {\n        oddsOfValue: new src_1.Fraction(1, 36),\n        value: { attack: 2, defense: 2, kill: 1 },\n    },\n    {\n        oddsOfValue: new src_1.Fraction(1, 6),\n        value: { attack: 1, defense: 0, kill: 0 },\n    },\n    {\n        oddsOfValue: new src_1.Fraction(1, 9),\n        value: { attack: 1, defense: 1, kill: 0 },\n    },\n    {\n        oddsOfValue: new src_1.Fraction(1, 18),\n        value: { attack: 1, defense: 2, kill: 0 },\n    },\n    {\n        oddsOfValue: new src_1.Fraction(1, 4),\n        value: { attack: 0, defense: 0, kill: 0 },\n    },\n    {\n        oddsOfValue: new src_1.Fraction(1, 6),\n        value: { attack: 0, defense: 1, kill: 0 },\n    },\n    {\n        oddsOfValue: new src_1.Fraction(1, 12),\n        value: { attack: 0, defense: 2, kill: 0 },\n    },\n];\nconst results = src_1.rollCampaign(1, 1);\ncompareToExpected(chai_1.expect, expected, results);",
                  "err": {},
                  "uuid": "effe2169-9e78-4814-bddf-7fc46ef1a198",
                  "parentUUID": "82876304-b866-4cc7-92b4-e759edaaadd1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "effe2169-9e78-4814-bddf-7fc46ef1a198"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "130943bc-2c1b-411d-9d09-d49bfcf3fa05",
          "title": "combinatorics",
          "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/math/combinatorics.spec.ts",
          "file": "/spec/math/combinatorics.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "f07c81c0-c1f0-4d90-b8a3-9508d7d040f7",
              "title": "cartesianProduct",
              "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/math/combinatorics.spec.ts",
              "file": "/spec/math/combinatorics.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should compute cartesian product of 2 arrays",
                  "fullTitle": "combinatorics cartesianProduct should compute cartesian product of 2 arrays",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const arr1 = [1, 2];\nconst arr2 = [3, 4];\nconst expected = [\n    [1, 3],\n    [1, 4],\n    [2, 3],\n    [2, 4],\n];\nchai_1.expect(combinatorics_1.cartesianProduct(arr1, arr2)).to.deep.equals(expected);",
                  "err": {},
                  "uuid": "5edc7951-e8f4-4582-b6e9-40ba41bc9ea5",
                  "parentUUID": "f07c81c0-c1f0-4d90-b8a3-9508d7d040f7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5edc7951-e8f4-4582-b6e9-40ba41bc9ea5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "87d37f00-9df3-4b45-aefa-c2f61f4b4773",
          "title": "Fraction",
          "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/math/Fraction.spec.ts",
          "file": "/spec/math/Fraction.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "fractions with same numerator and denominator are equal",
              "fullTitle": "Fraction fractions with same numerator and denominator are equal",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const frac1 = new Fraction_1.Fraction(1, 3);\nconst frac2 = new Fraction_1.Fraction(1, 3);\nchai_1.expect(frac1.sameAs(frac2)).to.be.true;",
              "err": {},
              "uuid": "76607cf8-fb21-4c8d-bed4-994d22dc3911",
              "parentUUID": "87d37f00-9df3-4b45-aefa-c2f61f4b4773",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "fractions with same numerator and different denominator are not equal",
              "fullTitle": "Fraction fractions with same numerator and different denominator are not equal",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const frac1 = new Fraction_1.Fraction(1, 3);\nconst frac2 = new Fraction_1.Fraction(1, 4);\nchai_1.expect(frac1.sameAs(frac2)).to.be.false;",
              "err": {},
              "uuid": "d6d5b9df-6a13-45ac-8a27-4f9c0c19595f",
              "parentUUID": "87d37f00-9df3-4b45-aefa-c2f61f4b4773",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "fractions reducing to the same fraction are equal",
              "fullTitle": "Fraction fractions reducing to the same fraction are equal",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const frac1 = new Fraction_1.Fraction(1, 2);\nconst frac2 = new Fraction_1.Fraction(2, 4);\nchai_1.expect(frac1.sameAs(frac2)).to.be.true;",
              "err": {},
              "uuid": "2b57e9f8-3020-4eb2-82bd-8cd397ba7a72",
              "parentUUID": "87d37f00-9df3-4b45-aefa-c2f61f4b4773",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "can add fractions",
              "fullTitle": "Fraction can add fractions",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const frac1 = new Fraction_1.Fraction(1, 3);\nconst frac2 = new Fraction_1.Fraction(1, 4);\nconst expected = new Fraction_1.Fraction(7, 12);\nchai_1.expect(frac1.add(frac2).sameAs(expected)).to.be.true;",
              "err": {},
              "uuid": "bcc57400-a866-49ae-9aac-fefa95adcf57",
              "parentUUID": "87d37f00-9df3-4b45-aefa-c2f61f4b4773",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "can multiply fractions",
              "fullTitle": "Fraction can multiply fractions",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const frac1 = new Fraction_1.Fraction(1, 3);\nconst frac2 = new Fraction_1.Fraction(1, 4);\nconst expected = new Fraction_1.Fraction(1, 12);\nchai_1.expect(frac1.multiply(frac2).sameAs(expected)).to.be.true;",
              "err": {},
              "uuid": "f1a82227-00f8-4c40-b639-63f4743f1695",
              "parentUUID": "87d37f00-9df3-4b45-aefa-c2f61f4b4773",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "can compute to float",
              "fullTitle": "Fraction can compute to float",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const frac = new Fraction_1.Fraction(1, 2);\nchai_1.expect(frac.valueOf()).to.equal(0.5);",
              "err": {},
              "uuid": "2477c234-da10-4322-b2c2-1c6484fed076",
              "parentUUID": "87d37f00-9df3-4b45-aefa-c2f61f4b4773",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "76607cf8-fb21-4c8d-bed4-994d22dc3911",
            "d6d5b9df-6a13-45ac-8a27-4f9c0c19595f",
            "2b57e9f8-3020-4eb2-82bd-8cd397ba7a72",
            "bcc57400-a866-49ae-9aac-fefa95adcf57",
            "f1a82227-00f8-4c40-b639-63f4743f1695",
            "2477c234-da10-4322-b2c2-1c6484fed076"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "eef87171-22d5-424e-b9b7-bbab8408b524",
          "title": "math",
          "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/math/index.spec.ts",
          "file": "/spec/math/index.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "aad3855d-2743-450f-80cc-616ac042d610",
              "title": "combineSetWithOdds",
              "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/math/index.spec.ts",
              "file": "/spec/math/index.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "combines 2 sets with odds",
                  "fullTitle": "math combineSetWithOdds combines 2 sets with odds",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swo1 = {\n    oddsOfValue: new math_1.Fraction(1, 3),\n    value: [1, 2],\n};\nconst swo2 = {\n    oddsOfValue: new math_1.Fraction(1, 2),\n    value: [\"a\", \"b\"],\n};\nconst combined = math_1.combineSetWithOdds(swo1, swo2);\nchai_1.expect(combined.value).to.deep.equal([1, 2, \"a\", \"b\"]);\nchai_1.expect(combined.oddsOfValue.sameAs(new math_1.Fraction(1, 6))).to.be.true;",
                  "err": {},
                  "uuid": "099229bc-6c75-4fc1-abfa-65f7105a8220",
                  "parentUUID": "aad3855d-2743-450f-80cc-616ac042d610",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can be used for reduction",
                  "fullTitle": "math combineSetWithOdds can be used for reduction",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const sets = [\n    { value: [1, 2], oddsOfValue: new math_1.Fraction(1, 2) },\n    { value: [5, 6], oddsOfValue: new math_1.Fraction(1, 3) },\n    { value: [8, 9], oddsOfValue: new math_1.Fraction(1, 4) },\n];\nconst combined = sets.reduce(math_1.combineSetWithOdds);\nchai_1.expect(combined.value).to.deep.equal([1, 2, 5, 6, 8, 9]);\nchai_1.expect(combined.oddsOfValue.sameAs(new math_1.Fraction(1, 24))).to.be.true;",
                  "err": {},
                  "uuid": "5bb1c112-0700-413d-9d4b-9102891fca78",
                  "parentUUID": "aad3855d-2743-450f-80cc-616ac042d610",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "099229bc-6c75-4fc1-abfa-65f7105a8220",
                "5bb1c112-0700-413d-9d4b-9102891fca78"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2b4607f6-71a8-4333-a333-efc19bfba662",
              "title": "odds",
              "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/math/index.spec.ts",
              "file": "/spec/math/index.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "with only 1 random device",
                  "fullTitle": "math odds with only 1 random device",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const d6 = new math_1.RandomDevice([\n    [1, new math_1.Fraction(1, 6)],\n    [2, new math_1.Fraction(1, 6)],\n    [3, new math_1.Fraction(1, 6)],\n    [4, new math_1.Fraction(1, 6)],\n    [5, new math_1.Fraction(1, 6)],\n    [6, new math_1.Fraction(1, 6)],\n]);\nconst expected = [\n    { value: [1], oddsOfValue: new math_1.Fraction(1, 6) },\n    { value: [2], oddsOfValue: new math_1.Fraction(1, 6) },\n    { value: [3], oddsOfValue: new math_1.Fraction(1, 6) },\n    { value: [4], oddsOfValue: new math_1.Fraction(1, 6) },\n    { value: [5], oddsOfValue: new math_1.Fraction(1, 6) },\n    { value: [6], oddsOfValue: new math_1.Fraction(1, 6) },\n];\nconst results = math_1.odds([d6]);\ncompareToExpected(chai_1.expect, expected, results, arraysOfOutcomesAreSame);",
                  "err": {},
                  "uuid": "c4afd92a-241c-4b91-baef-2229d24aa06a",
                  "parentUUID": "2b4607f6-71a8-4333-a333-efc19bfba662",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "with 2 random devices",
                  "fullTitle": "math odds with 2 random devices",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const d4 = new math_1.RandomDevice([\n    [1, new math_1.Fraction(1, 4)],\n    [2, new math_1.Fraction(1, 4)],\n    [3, new math_1.Fraction(1, 4)],\n    [4, new math_1.Fraction(1, 4)],\n]);\nconst abcDie = new math_1.RandomDevice([\n    [\"a\", new math_1.Fraction(1, 3)],\n    [\"b\", new math_1.Fraction(1, 3)],\n    [\"c\", new math_1.Fraction(1, 3)],\n]);\nconst expected = [\n    { value: [1, \"a\"], oddsOfValue: new math_1.Fraction(1, 12) },\n    { value: [1, \"b\"], oddsOfValue: new math_1.Fraction(1, 12) },\n    { value: [1, \"c\"], oddsOfValue: new math_1.Fraction(1, 12) },\n    { value: [2, \"a\"], oddsOfValue: new math_1.Fraction(1, 12) },\n    { value: [2, \"b\"], oddsOfValue: new math_1.Fraction(1, 12) },\n    { value: [2, \"c\"], oddsOfValue: new math_1.Fraction(1, 12) },\n    { value: [3, \"a\"], oddsOfValue: new math_1.Fraction(1, 12) },\n    { value: [3, \"b\"], oddsOfValue: new math_1.Fraction(1, 12) },\n    { value: [3, \"c\"], oddsOfValue: new math_1.Fraction(1, 12) },\n    { value: [4, \"a\"], oddsOfValue: new math_1.Fraction(1, 12) },\n    { value: [4, \"b\"], oddsOfValue: new math_1.Fraction(1, 12) },\n    { value: [4, \"c\"], oddsOfValue: new math_1.Fraction(1, 12) },\n];\nconst results = math_1.odds([d4, abcDie]);\ncompareToExpected(chai_1.expect, expected, results, arraysOfOutcomesAreSame);",
                  "err": {},
                  "uuid": "dffdf851-672e-42d8-95ef-6b1f48f81cd5",
                  "parentUUID": "2b4607f6-71a8-4333-a333-efc19bfba662",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "combines identical sets",
                  "fullTitle": "math odds combines identical sets",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const d2 = new math_1.RandomDevice([\n    [1, new math_1.Fraction(1, 2)],\n    [2, new math_1.Fraction(1, 2)],\n]);\nconst expected = [\n    { value: [1, 1], oddsOfValue: new math_1.Fraction(1, 4) },\n    { value: [1, 2], oddsOfValue: new math_1.Fraction(1, 2) },\n    { value: [2, 2], oddsOfValue: new math_1.Fraction(1, 4) },\n];\nconst results = math_1.odds([d2, d2]);\ncompareToExpected(chai_1.expect, expected, results, arraysOfOutcomesAreSame);",
                  "err": {},
                  "uuid": "caddb2a9-2c3b-46c4-87c1-76cbedcbb822",
                  "parentUUID": "2b4607f6-71a8-4333-a333-efc19bfba662",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c4afd92a-241c-4b91-baef-2229d24aa06a",
                "dffdf851-672e-42d8-95ef-6b1f48f81cd5",
                "caddb2a9-2c3b-46c4-87c1-76cbedcbb822"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "cea5b148-53fc-4b65-888d-ca2790a90151",
              "title": "roll",
              "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/math/index.spec.ts",
              "file": "/spec/math/index.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "can roll a single random device",
                  "fullTitle": "math roll can roll a single random device",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const d4 = new math_1.RandomDevice([\n    [1, new math_1.Fraction(1, 4)],\n    [2, new math_1.Fraction(1, 4)],\n    [3, new math_1.Fraction(1, 4)],\n    [4, new math_1.Fraction(1, 4)],\n]);\nconst expected = [\n    { value: 1, oddsOfValue: new math_1.Fraction(1, 4) },\n    { value: 2, oddsOfValue: new math_1.Fraction(1, 4) },\n    { value: 3, oddsOfValue: new math_1.Fraction(1, 4) },\n    { value: 4, oddsOfValue: new math_1.Fraction(1, 4) },\n];\nconst results = math_1.roll(d4, 1, sum, (a, b) => a === b);\ncompareToExpected(chai_1.expect, expected, results, (a, b) => a === b);",
                  "err": {},
                  "uuid": "39d6c9d5-7722-4251-8740-609dc9928e59",
                  "parentUUID": "cea5b148-53fc-4b65-888d-ca2790a90151",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can roll several random devices",
                  "fullTitle": "math roll can roll several random devices",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const d4 = new math_1.RandomDevice([\n    [1, new math_1.Fraction(1, 4)],\n    [2, new math_1.Fraction(1, 4)],\n    [3, new math_1.Fraction(1, 4)],\n    [4, new math_1.Fraction(1, 4)],\n]);\nconst expected = [\n    { value: 2, oddsOfValue: new math_1.Fraction(1, 16) },\n    { value: 3, oddsOfValue: new math_1.Fraction(2, 16) },\n    { value: 4, oddsOfValue: new math_1.Fraction(3, 16) },\n    { value: 5, oddsOfValue: new math_1.Fraction(4, 16) },\n    { value: 6, oddsOfValue: new math_1.Fraction(3, 16) },\n    { value: 7, oddsOfValue: new math_1.Fraction(2, 16) },\n    { value: 8, oddsOfValue: new math_1.Fraction(1, 16) },\n];\nconst results = math_1.roll(d4, 2, sum, (a, b) => a === b);\ncompareToExpected(chai_1.expect, expected, results, (a, b) => a === b);",
                  "err": {},
                  "uuid": "f8019398-3ec2-4af2-bffb-4762851f71aa",
                  "parentUUID": "cea5b148-53fc-4b65-888d-ca2790a90151",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "39d6c9d5-7722-4251-8740-609dc9928e59",
                "f8019398-3ec2-4af2-bffb-4762851f71aa"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "4ce69c68-059f-47f7-9d28-a5fca7444e7b",
          "title": "Oath domain model",
          "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/oath/oath.spec.ts",
          "file": "/spec/oath/oath.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "9c4c1868-7aa5-464c-ba23-e388c316e818",
              "title": "Attack dice faces",
              "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/oath/oath.spec.ts",
              "file": "/spec/oath/oath.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should have consistent order",
                  "fullTitle": "Oath domain model Attack dice faces should have consistent order",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const someFaces = [\n    oath_1.AttackDieFace.HOLLOW_SWORD,\n    oath_1.AttackDieFace.TWO_SWORDS_AND_SKULL,\n    oath_1.AttackDieFace.SWORD,\n    oath_1.AttackDieFace.SWORD,\n];\nconst expected = [\n    oath_1.AttackDieFace.HOLLOW_SWORD,\n    oath_1.AttackDieFace.SWORD,\n    oath_1.AttackDieFace.SWORD,\n    oath_1.AttackDieFace.TWO_SWORDS_AND_SKULL,\n];\nchai_1.expect(someFaces.sort()).to.deep.equal(expected);",
                  "err": {},
                  "uuid": "a7479989-2e22-4579-a8eb-9129f3ac2f59",
                  "parentUUID": "9c4c1868-7aa5-464c-ba23-e388c316e818",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a7479989-2e22-4579-a8eb-9129f3ac2f59"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e533c968-6f40-4261-9edc-4b9f40760030",
              "title": "Defense dice faces",
              "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/oath/oath.spec.ts",
              "file": "/spec/oath/oath.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should have consistent order",
                  "fullTitle": "Oath domain model Defense dice faces should have consistent order",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const someFaces = [\n    oath_1.DefenseDieFace.DOUBLE,\n    oath_1.DefenseDieFace.TWO_SHIELDS,\n    oath_1.DefenseDieFace.SHIELD,\n    oath_1.DefenseDieFace.TWO_SHIELDS,\n    oath_1.DefenseDieFace.BLANK,\n    oath_1.DefenseDieFace.SHIELD,\n];\nconst expected = [\n    oath_1.DefenseDieFace.BLANK,\n    oath_1.DefenseDieFace.SHIELD,\n    oath_1.DefenseDieFace.SHIELD,\n    oath_1.DefenseDieFace.TWO_SHIELDS,\n    oath_1.DefenseDieFace.TWO_SHIELDS,\n    oath_1.DefenseDieFace.DOUBLE,\n];\nchai_1.expect(someFaces.sort()).to.deep.equal(expected);",
                  "err": {},
                  "uuid": "3a6d5d18-c54c-4ccf-bd0c-c5c4812daa60",
                  "parentUUID": "e533c968-6f40-4261-9edc-4b9f40760030",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3a6d5d18-c54c-4ccf-bd0c-c5c4812daa60"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "75f94a04-f5a8-4b1e-9019-32e9c92cbaf2",
              "title": "CampaignResult",
              "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/oath/oath.spec.ts",
              "file": "/spec/oath/oath.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "ed9f9447-a015-46f5-bd6f-68772247fecc",
                  "title": "campaignResultCompareFn",
                  "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/oath/oath.spec.ts",
                  "file": "/spec/oath/oath.spec.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "returns 0 if result are equal",
                      "fullTitle": "Oath domain model CampaignResult campaignResultCompareFn returns 0 if result are equal",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "chai_1.expect(oath_1.campaignResultCompareFn({ attack: 3, defense: 2, kill: 0 }, { attack: 3, defense: 2, kill: 0 })).to.equal(0);",
                      "err": {},
                      "uuid": "e155ed31-3c22-41a1-9096-fecc8aa196c9",
                      "parentUUID": "ed9f9447-a015-46f5-bd6f-68772247fecc",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "can be used to sort results by attack descending, then defense ascending then kill ascending",
                      "fullTitle": "Oath domain model CampaignResult campaignResultCompareFn can be used to sort results by attack descending, then defense ascending then kill ascending",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const someResults = [\n    { attack: 5, defense: 2, kill: 0 },\n    { attack: 5, defense: 2, kill: 0 },\n    { attack: 3, defense: 0, kill: 2 },\n    { attack: 4, defense: 4, kill: 0 },\n    { attack: 5, defense: 3, kill: 3 },\n    { attack: 5, defense: 1, kill: 0 },\n    { attack: 5, defense: 1, kill: 2 },\n];\nconst expected = [\n    { attack: 5, defense: 1, kill: 0 },\n    { attack: 5, defense: 1, kill: 2 },\n    { attack: 5, defense: 2, kill: 0 },\n    { attack: 5, defense: 2, kill: 0 },\n    { attack: 5, defense: 3, kill: 3 },\n    { attack: 4, defense: 4, kill: 0 },\n    { attack: 3, defense: 0, kill: 2 },\n];\nchai_1.expect(someResults.sort(oath_1.campaignResultCompareFn)).to.deep.equal(expected);",
                      "err": {},
                      "uuid": "9aefeb47-ba4a-4951-907b-a7d4b316ee44",
                      "parentUUID": "ed9f9447-a015-46f5-bd6f-68772247fecc",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "e155ed31-3c22-41a1-9096-fecc8aa196c9",
                    "9aefeb47-ba4a-4951-907b-a7d4b316ee44"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "32c16b3b-d1c5-44ff-9273-2cf26b481804",
              "title": "toAttackResult",
              "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/oath/oath.spec.ts",
              "file": "/spec/oath/oath.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "can sum up a bunch of die faces into a campaign result",
                  "fullTitle": "Oath domain model toAttackResult can sum up a bunch of die faces into a campaign result",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const rolled = [\n    oath_1.AttackDieFace.HOLLOW_SWORD,\n    oath_1.AttackDieFace.TWO_SWORDS_AND_SKULL,\n    oath_1.AttackDieFace.SWORD,\n    oath_1.AttackDieFace.SWORD,\n    oath_1.AttackDieFace.HOLLOW_SWORD,\n    oath_1.AttackDieFace.HOLLOW_SWORD,\n];\nconst result = oath_1.toAttackResult(rolled);\nchai_1.expect(result).to.deep.equal({ attack: 5, kill: 1 });",
                  "err": {},
                  "uuid": "54b08e03-13af-43a7-a958-6277185e2b6d",
                  "parentUUID": "32c16b3b-d1c5-44ff-9273-2cf26b481804",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "54b08e03-13af-43a7-a958-6277185e2b6d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "04c8343b-c9f1-4f7b-a1f0-01c12dd3b83b",
              "title": "toDefenseResult",
              "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/oath/oath.spec.ts",
              "file": "/spec/oath/oath.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "can sum up a bunch of die faces into a campaign result",
                  "fullTitle": "Oath domain model toDefenseResult can sum up a bunch of die faces into a campaign result",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const rolled = [\n    oath_1.DefenseDieFace.DOUBLE,\n    oath_1.DefenseDieFace.TWO_SHIELDS,\n    oath_1.DefenseDieFace.SHIELD,\n    oath_1.DefenseDieFace.TWO_SHIELDS,\n    oath_1.DefenseDieFace.BLANK,\n    oath_1.DefenseDieFace.SHIELD,\n];\nconst result = oath_1.toDefenseResult(rolled);\nchai_1.expect(result).to.deep.equal({ defense: 12 });",
                  "err": {},
                  "uuid": "42bc7e57-f14b-4b39-b928-09e2836e8ab4",
                  "parentUUID": "04c8343b-c9f1-4f7b-a1f0-01c12dd3b83b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "42bc7e57-f14b-4b39-b928-09e2836e8ab4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f5cd5566-4f9f-4416-b089-725942720056",
          "title": "utils",
          "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/utils/arrays.spec.ts",
          "file": "/spec/utils/arrays.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ad5e439e-683e-450a-9a2c-ae9737df93f8",
              "title": "flatten",
              "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/utils/arrays.spec.ts",
              "file": "/spec/utils/arrays.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "flattens an array",
                  "fullTitle": "utils flatten flattens an array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.expect(arrays_1.flatten([[], [1], [2]])).to.deep.equal([1, 2]);",
                  "err": {},
                  "uuid": "cf66efff-33e7-497b-8f88-63a4e4b8a166",
                  "parentUUID": "ad5e439e-683e-450a-9a2c-ae9737df93f8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cf66efff-33e7-497b-8f88-63a4e4b8a166"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "48e40c1e-4f94-43fe-acb6-df318ac0c1eb",
              "title": "arrayEquals",
              "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/utils/arrays.spec.ts",
              "file": "/spec/utils/arrays.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns true if the arrays contain the same values in the same order",
                  "fullTitle": "utils arrayEquals returns true if the arrays contain the same values in the same order",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.expect(arrays_1.arrayEquals([1, 2, 3], [1, 2, 3])).to.be.true;",
                  "err": {},
                  "uuid": "d80ad4a9-9bbe-496d-a8f3-06036a3c6702",
                  "parentUUID": "48e40c1e-4f94-43fe-acb6-df318ac0c1eb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns false if the arrays do not contain the same values",
                  "fullTitle": "utils arrayEquals returns false if the arrays do not contain the same values",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.expect(arrays_1.arrayEquals([1, 2, 3], [1, 2, 4])).to.be.false;",
                  "err": {},
                  "uuid": "9ab5d684-a025-4e25-83f1-187ca4078f3f",
                  "parentUUID": "48e40c1e-4f94-43fe-acb6-df318ac0c1eb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns false if the arrays contain the same values but in a different order",
                  "fullTitle": "utils arrayEquals returns false if the arrays contain the same values but in a different order",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.expect(arrays_1.arrayEquals([1, 2, 3], [3, 1, 2])).to.be.false;",
                  "err": {},
                  "uuid": "e43d405f-9d42-411c-99a5-a9a4307947db",
                  "parentUUID": "48e40c1e-4f94-43fe-acb6-df318ac0c1eb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can compare different primitives",
                  "fullTitle": "utils arrayEquals can compare different primitives",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.expect(arrays_1.arrayEquals([\"a\", \"b\"], [\"a\", \"b\"])).to.be.true;\nchai_1.expect(arrays_1.arrayEquals([1.0, 2.5], [1.0, 2.5])).to.be.true;\nchai_1.expect(arrays_1.arrayEquals([true, false], [true, false])).to.be.true;\nchai_1.expect(arrays_1.arrayEquals([1, null, undefined], [1, null, undefined])).to.be\n    .true;",
                  "err": {},
                  "uuid": "6dd6c9c7-5acb-4f6a-ba8a-95ea400008db",
                  "parentUUID": "48e40c1e-4f94-43fe-acb6-df318ac0c1eb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d80ad4a9-9bbe-496d-a8f3-06036a3c6702",
                "9ab5d684-a025-4e25-83f1-187ca4078f3f",
                "e43d405f-9d42-411c-99a5-a9a4307947db",
                "6dd6c9c7-5acb-4f6a-ba8a-95ea400008db"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "213b72e9-783a-41e6-9fda-e86d8605522f",
              "title": "replace",
              "fullFile": "/home/runner/work/oath-odds/oath-odds/spec/utils/arrays.spec.ts",
              "file": "/spec/utils/arrays.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should replace at specified index",
                  "fullTitle": "utils replace should replace at specified index",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const arr = [\"a\", \"b\", \"c\"];\nconst replaced = arrays_1.replace(arr, 1, \"x\");\nchai_1.expect(replaced).to.deep.equal([\"a\", \"x\", \"c\"]);",
                  "err": {},
                  "uuid": "20515be4-1675-46d7-9a64-9fc70cfc8d8e",
                  "parentUUID": "213b72e9-783a-41e6-9fda-e86d8605522f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to replace at first position",
                  "fullTitle": "utils replace should be able to replace at first position",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const arr = [\"a\", \"b\", \"c\"];\nconst replaced = arrays_1.replace(arr, 0, \"x\");\nchai_1.expect(replaced).to.deep.equal([\"x\", \"b\", \"c\"]);",
                  "err": {},
                  "uuid": "1fe8fc5a-eac8-4ddd-887f-c3bc2c8d5e6d",
                  "parentUUID": "213b72e9-783a-41e6-9fda-e86d8605522f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to replace at last position",
                  "fullTitle": "utils replace should be able to replace at last position",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const arr = [\"a\", \"b\", \"c\"];\nconst replaced = arrays_1.replace(arr, 2, \"x\");\nchai_1.expect(replaced).to.deep.equal([\"a\", \"b\", \"x\"]);",
                  "err": {},
                  "uuid": "c658744b-62e8-4052-900b-18382a349b5a",
                  "parentUUID": "213b72e9-783a-41e6-9fda-e86d8605522f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the same array if specified index is < 0",
                  "fullTitle": "utils replace should return the same array if specified index is < 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const arr = [\"a\", \"b\", \"c\"];\nconst replaced = arrays_1.replace(arr, -1, \"x\");\nchai_1.expect(replaced).to.deep.equal([\"a\", \"b\", \"c\"]);",
                  "err": {},
                  "uuid": "c9895fd5-dfdd-46b9-836c-6373a9de9764",
                  "parentUUID": "213b72e9-783a-41e6-9fda-e86d8605522f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the same array if specified index is > array length",
                  "fullTitle": "utils replace should return the same array if specified index is > array length",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const arr = [\"a\", \"b\", \"c\"];\nconst replaced = arrays_1.replace(arr, 3, \"x\");\nchai_1.expect(replaced).to.deep.equal([\"a\", \"b\", \"c\"]);",
                  "err": {},
                  "uuid": "274cccbb-da5a-4910-9f47-cacc901267a9",
                  "parentUUID": "213b72e9-783a-41e6-9fda-e86d8605522f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should leave the original array untouched",
                  "fullTitle": "utils replace should leave the original array untouched",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const arr = [\"a\", \"b\", \"c\"];\narrays_1.replace(arr, 1, \"x\");\nchai_1.expect(arr).to.deep.equal([\"a\", \"b\", \"c\"]);",
                  "err": {},
                  "uuid": "b5cf8f4f-967b-4e3e-b1f3-238c3301a278",
                  "parentUUID": "213b72e9-783a-41e6-9fda-e86d8605522f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "20515be4-1675-46d7-9a64-9fc70cfc8d8e",
                "1fe8fc5a-eac8-4ddd-887f-c3bc2c8d5e6d",
                "c658744b-62e8-4052-900b-18382a349b5a",
                "c9895fd5-dfdd-46b9-836c-6373a9de9764",
                "274cccbb-da5a-4910-9f47-cacc901267a9",
                "b5cf8f4f-967b-4e3e-b1f3-238c3301a278"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.2.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "index",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.1"
    },
    "marge": {
      "options": {
        "reportDir": "reports/tests",
        "reportFilename": "index"
      },
      "version": "5.1.0"
    }
  }
}