document.querySelector('mutation-test-report-app').report = {"files":{"/home/runner/work/oath-odds/oath-odds/src/index.ts":{"language":"typescript","mutants":[{"id":"0","location":{"end":{"column":2,"line":27},"start":{"column":67,"line":20}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"2","location":{"end":{"column":57,"line":25},"start":{"column":15,"line":25}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"3","location":{"end":{"column":57,"line":25},"start":{"column":15,"line":25}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"4","location":{"end":{"column":57,"line":25},"start":{"column":15,"line":25}},"mutatorName":"LogicalOperator","replacement":"a.attack === b.attack || a.kill === b.kill","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"5","location":{"end":{"column":36,"line":25},"start":{"column":15,"line":25}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"6","location":{"end":{"column":36,"line":25},"start":{"column":15,"line":25}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"7","location":{"end":{"column":36,"line":25},"start":{"column":15,"line":25}},"mutatorName":"EqualityOperator","replacement":"a.attack !== b.attack","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"8","location":{"end":{"column":57,"line":25},"start":{"column":40,"line":25}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"9","location":{"end":{"column":57,"line":25},"start":{"column":40,"line":25}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"10","location":{"end":{"column":57,"line":25},"start":{"column":40,"line":25}},"mutatorName":"EqualityOperator","replacement":"a.kill !== b.kill","status":"Survived"},{"id":"11","location":{"end":{"column":2,"line":44},"start":{"column":69,"line":37}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"12","location":{"end":{"column":38,"line":42},"start":{"column":5,"line":42}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"13","location":{"end":{"column":38,"line":42},"start":{"column":15,"line":42}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"14","location":{"end":{"column":38,"line":42},"start":{"column":15,"line":42}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"15","location":{"end":{"column":38,"line":42},"start":{"column":15,"line":42}},"mutatorName":"EqualityOperator","replacement":"a.defense !== b.defense","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"16","location":{"end":{"column":2,"line":68},"start":{"column":31,"line":59}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"17","location":{"end":{"column":69,"line":66},"start":{"column":22,"line":65}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"18","location":{"end":{"column":2,"line":78},"start":{"column":29,"line":72}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"19","location":{"end":{"column":4,"line":77},"start":{"column":10,"line":74}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"20","location":{"end":{"column":49,"line":76},"start":{"column":12,"line":76}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"1","location":{"end":{"column":57,"line":25},"start":{"column":5,"line":25}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"}],"source":"import { cartesianProduct, roll, WithOdds } from \"./math\";\nimport {\n  AttackDie,\n  AttackResult,\n  CampaignResult,\n  DefenseDie,\n  DefenseResult,\n  toAttackResult,\n  toDefenseResult,\n} from \"./oath\";\n\n/**\n * Lists all possible results of an attack roll.\n *\n * @param {number} diceNumber\n *   Number of attack (red) dice to roll.\n * @returns {WithOdds<AttackResult>[]}\n *   All possible results of rolling this number of attack dice.\n */\nfunction rollAttack(diceNumber: number): WithOdds<AttackResult>[] {\n  return roll(\n    AttackDie,\n    diceNumber,\n    toAttackResult,\n    (a, b) => a.attack === b.attack && a.kill === b.kill\n  );\n}\n\n/**\n * Lists all possible results of defense roll.\n *\n * @param {number} diceNumber\n *   Number of defense (blue) dice to roll.\n * @returns {WithOdds<DefenseResult>[]}\n *   All possible results of rolling this number of defense dice.\n */\nfunction rollDefense(diceNumber: number): WithOdds<DefenseResult>[] {\n  return roll(\n    DefenseDie,\n    diceNumber,\n    toDefenseResult,\n    (a, b) => a.defense === b.defense\n  );\n}\n\n/**\n * Lists all possible results of a campaign in Oath along with their odds.\n *\n * @param {number} attackDice\n *   Number of attack (red) dice to roll.\n * @param {number} defenseDice\n *   Number of defense (blue) dice to roll.\n * @returns {CampaignResultWithOdds[]}\n *   All possible results for this campaign along with their odds.\n */\nexport function rollCampaign(\n  attackDice: number,\n  defenseDice: number\n): WithOdds<CampaignResult>[] {\n  const attackRoll = rollAttack(attackDice);\n  const defenseRoll = rollDefense(defenseDice);\n\n  const product = cartesianProduct<any>(attackRoll, defenseRoll);\n\n  return product.map((pair) =>\n    merge(pair as [WithOdds<AttackResult>, WithOdds<DefenseResult>])\n  );\n}\n\nfunction merge(\n  attackDefensePair: [WithOdds<AttackResult>, WithOdds<DefenseResult>]\n): WithOdds<CampaignResult> {\n  const [attack, defense] = attackDefensePair;\n  return {\n    oddsOfValue: attack.oddsOfValue.multiply(defense.oddsOfValue),\n    value: { ...attack.value, ...defense.value },\n  };\n}\n\nexport { Fraction } from \"./math\";\n"},"/home/runner/work/oath-odds/oath-odds/src/math/Fraction.ts":{"language":"typescript","mutants":[{"id":"21","location":{"end":{"column":4,"line":21},"start":{"column":55,"line":17}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"22","location":{"end":{"column":4,"line":37},"start":{"column":41,"line":31}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"23","location":{"end":{"column":45,"line":34},"start":{"column":7,"line":33}},"mutatorName":"ArithmeticOperator","replacement":"this._numerator * other._denominator - other._numerator * this._denominator","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"24","location":{"end":{"column":43,"line":33},"start":{"column":7,"line":33}},"mutatorName":"ArithmeticOperator","replacement":"this._numerator / other._denominator","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"25","location":{"end":{"column":45,"line":34},"start":{"column":9,"line":34}},"mutatorName":"ArithmeticOperator","replacement":"other._numerator / this._denominator","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"27","location":{"end":{"column":4,"line":52},"start":{"column":46,"line":47}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"28","location":{"end":{"column":41,"line":49},"start":{"column":7,"line":49}},"mutatorName":"ArithmeticOperator","replacement":"this._numerator / other._numerator","status":"Survived"},{"id":"29","location":{"end":{"column":45,"line":50},"start":{"column":7,"line":50}},"mutatorName":"ArithmeticOperator","replacement":"this._denominator / other._denominator","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"26","location":{"end":{"column":45,"line":35},"start":{"column":7,"line":35}},"mutatorName":"ArithmeticOperator","replacement":"this._denominator / other._denominator","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"30","location":{"end":{"column":4,"line":62},"start":{"column":28,"line":60}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed","description":"Killed by: Fraction can compute to float"},{"id":"32","location":{"end":{"column":4,"line":79},"start":{"column":43,"line":72}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"31","location":{"end":{"column":47,"line":61},"start":{"column":12,"line":61}},"mutatorName":"ArithmeticOperator","replacement":"this._numerator * this._denominator","status":"Killed","description":"Killed by: Fraction can compute to float"},{"id":"33","location":{"end":{"column":47,"line":77},"start":{"column":7,"line":76}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed","description":"Killed by: Fraction fractions with same numerator and different denominator are not equal"},{"id":"35","location":{"end":{"column":47,"line":77},"start":{"column":7,"line":76}},"mutatorName":"LogicalOperator","replacement":"this._numerator === other._numerator || this._denominator === other._denominator","status":"Killed","description":"Killed by: Fraction fractions with same numerator and different denominator are not equal"},{"id":"34","location":{"end":{"column":47,"line":77},"start":{"column":7,"line":76}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"37","location":{"end":{"column":43,"line":76},"start":{"column":7,"line":76}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"36","location":{"end":{"column":43,"line":76},"start":{"column":7,"line":76}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"38","location":{"end":{"column":43,"line":76},"start":{"column":7,"line":76}},"mutatorName":"EqualityOperator","replacement":"this._numerator !== other._numerator","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"39","location":{"end":{"column":47,"line":77},"start":{"column":7,"line":77}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed","description":"Killed by: Fraction fractions with same numerator and different denominator are not equal"},{"id":"40","location":{"end":{"column":47,"line":77},"start":{"column":7,"line":77}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"41","location":{"end":{"column":47,"line":77},"start":{"column":7,"line":77}},"mutatorName":"EqualityOperator","replacement":"this._denominator !== other._denominator","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"42","location":{"end":{"column":4,"line":83},"start":{"column":29,"line":81}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"43","location":{"end":{"column":55,"line":82},"start":{"column":12,"line":82}},"mutatorName":"StringLiteral","replacement":"``","status":"Survived"},{"id":"44","location":{"end":{"column":4,"line":95},"start":{"column":27,"line":89}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"45","location":{"end":{"column":12,"line":91},"start":{"column":9,"line":91}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"46","location":{"end":{"column":12,"line":91},"start":{"column":9,"line":91}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"47","location":{"end":{"column":6,"line":94},"start":{"column":14,"line":91}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"48","location":{"end":{"column":46,"line":92},"start":{"column":25,"line":92}},"mutatorName":"ArithmeticOperator","replacement":"this._numerator * div","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"49","location":{"end":{"column":50,"line":93},"start":{"column":27,"line":93}},"mutatorName":"ArithmeticOperator","replacement":"this._denominator * div","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"51","location":{"end":{"column":12,"line":109},"start":{"column":7,"line":109}},"mutatorName":"ConditionalExpression","replacement":"true","status":"RuntimeError","description":"Error message: RangeError: Maximum call stack size exceeded\nRangeError: Maximum call stack size exceeded\n    at cover (/home/runner/work/oath-odds/oath-odds/.stryker-tmp/sandbox7294806/src/math/Fraction.ts:24:19)\n    at gcd (/home/runner/work/oath-odds/oath-odds/.stryker-tmp/sandbox7294806/src/math/Fraction.ts:186:9)\n    at gcd (/home/runner/work/oath-odds/oath-odds/.stryker-tmp/sandbox7294806/src/math/Fraction.ts:193:24)\n    at gcd (/home/runner/work/oath-odds/oath-odds/.stryker-tmp/sandbox7294806/src/math/Fraction.ts:193:24)\n    at gcd (/home/runner/work/oath-odds/oath-odds/.stryker-tmp/sandbox7294806/src/math/Fraction.ts:193:24)\n    at gcd (/home/runner/work/oath-odds/oath-odds/.stryker-tmp/sandbox7294806/src/math/Fraction.ts:193:24)\n    at gcd (/home/runner/work/oath-odds/oath-odds/.stryker-tmp/sandbox7294806/src/math/Fraction.ts:193:24)\n    at gcd (/home/runner/work/oath-odds/oath-odds/.stryker-tmp/sandbox7294806/src/math/Fraction.ts:193:24)\n    at gcd (/home/runner/work/oath-odds/oath-odds/.stryker-tmp/sandbox7294806/src/math/Fraction.ts:193:24)\n    at gcd (/home/runner/work/oath-odds/oath-odds/.stryker-tmp/sandbox7294806/src/math/Fraction.ts:193:24)"},{"id":"50","location":{"end":{"column":2,"line":118},"start":{"column":44,"line":108}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"52","location":{"end":{"column":12,"line":109},"start":{"column":7,"line":109}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"54","location":{"end":{"column":12,"line":109},"start":{"column":7,"line":109}},"mutatorName":"EqualityOperator","replacement":"b <= a","status":"RuntimeError","description":"Error message: RangeError: Maximum call stack size exceeded\nRangeError: Maximum call stack size exceeded\n    at cover (/home/runner/work/oath-odds/oath-odds/.stryker-tmp/sandbox7294806/src/math/Fraction.ts:24:19)\n    at gcd (/home/runner/work/oath-odds/oath-odds/.stryker-tmp/sandbox7294806/src/math/Fraction.ts:186:9)\n    at gcd (/home/runner/work/oath-odds/oath-odds/.stryker-tmp/sandbox7294806/src/math/Fraction.ts:211:24)\n    at gcd (/home/runner/work/oath-odds/oath-odds/.stryker-tmp/sandbox7294806/src/math/Fraction.ts:193:24)\n    at gcd (/home/runner/work/oath-odds/oath-odds/.stryker-tmp/sandbox7294806/src/math/Fraction.ts:211:24)\n    at gcd (/home/runner/work/oath-odds/oath-odds/.stryker-tmp/sandbox7294806/src/math/Fraction.ts:193:24)\n    at gcd (/home/runner/work/oath-odds/oath-odds/.stryker-tmp/sandbox7294806/src/math/Fraction.ts:211:24)\n    at gcd (/home/runner/work/oath-odds/oath-odds/.stryker-tmp/sandbox7294806/src/math/Fraction.ts:193:24)\n    at gcd (/home/runner/work/oath-odds/oath-odds/.stryker-tmp/sandbox7294806/src/math/Fraction.ts:211:24)\n    at gcd (/home/runner/work/oath-odds/oath-odds/.stryker-tmp/sandbox7294806/src/math/Fraction.ts:193:24)"},{"id":"53","location":{"end":{"column":12,"line":109},"start":{"column":7,"line":109}},"mutatorName":"EqualityOperator","replacement":"b >= a","status":"Survived"},{"id":"55","location":{"end":{"column":4,"line":111},"start":{"column":14,"line":109}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"57","location":{"end":{"column":14,"line":113},"start":{"column":7,"line":113}},"mutatorName":"ConditionalExpression","replacement":"false","status":"RuntimeError","description":"Error message: RangeError: Maximum call stack size exceeded\nRangeError: Maximum call stack size exceeded\n    at cover (/home/runner/work/oath-odds/oath-odds/.stryker-tmp/sandbox7294806/src/math/Fraction.ts:24:19)\n    at gcd (/home/runner/work/oath-odds/oath-odds/.stryker-tmp/sandbox7294806/src/math/Fraction.ts:187:139)\n    at gcd (/home/runner/work/oath-odds/oath-odds/.stryker-tmp/sandbox7294806/src/math/Fraction.ts:211:24)\n    at gcd (/home/runner/work/oath-odds/oath-odds/.stryker-tmp/sandbox7294806/src/math/Fraction.ts:211:24)\n    at gcd (/home/runner/work/oath-odds/oath-odds/.stryker-tmp/sandbox7294806/src/math/Fraction.ts:211:24)\n    at gcd (/home/runner/work/oath-odds/oath-odds/.stryker-tmp/sandbox7294806/src/math/Fraction.ts:211:24)\n    at gcd (/home/runner/work/oath-odds/oath-odds/.stryker-tmp/sandbox7294806/src/math/Fraction.ts:211:24)\n    at gcd (/home/runner/work/oath-odds/oath-odds/.stryker-tmp/sandbox7294806/src/math/Fraction.ts:211:24)\n    at gcd (/home/runner/work/oath-odds/oath-odds/.stryker-tmp/sandbox7294806/src/math/Fraction.ts:211:24)\n    at gcd (/home/runner/work/oath-odds/oath-odds/.stryker-tmp/sandbox7294806/src/math/Fraction.ts:211:24)"},{"id":"56","location":{"end":{"column":14,"line":113},"start":{"column":7,"line":113}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed","description":"Killed by: Fraction can add fractions"},{"id":"58","location":{"end":{"column":14,"line":113},"start":{"column":7,"line":113}},"mutatorName":"EqualityOperator","replacement":"b !== 0","status":"Killed","description":"Killed by: Fraction can add fractions"},{"id":"59","location":{"end":{"column":4,"line":115},"start":{"column":16,"line":113}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"60","location":{"end":{"column":4,"line":117},"start":{"column":10,"line":115}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"61","location":{"end":{"column":24,"line":116},"start":{"column":19,"line":116}},"mutatorName":"ArithmeticOperator","replacement":"a * b","status":"RuntimeError","description":"Error message: RangeError: Maximum call stack size exceeded\nRangeError: Maximum call stack size exceeded\n    at cover (/home/runner/work/oath-odds/oath-odds/.stryker-tmp/sandbox7294806/src/math/Fraction.ts:24:19)\n    at gcd (/home/runner/work/oath-odds/oath-odds/.stryker-tmp/sandbox7294806/src/math/Fraction.ts:186:9)\n    at gcd (/home/runner/work/oath-odds/oath-odds/.stryker-tmp/sandbox7294806/src/math/Fraction.ts:193:24)\n    at gcd (/home/runner/work/oath-odds/oath-odds/.stryker-tmp/sandbox7294806/src/math/Fraction.ts:211:24)\n    at gcd (/home/runner/work/oath-odds/oath-odds/.stryker-tmp/sandbox7294806/src/math/Fraction.ts:193:24)\n    at gcd (/home/runner/work/oath-odds/oath-odds/.stryker-tmp/sandbox7294806/src/math/Fraction.ts:211:24)\n    at gcd (/home/runner/work/oath-odds/oath-odds/.stryker-tmp/sandbox7294806/src/math/Fraction.ts:193:24)\n    at gcd (/home/runner/work/oath-odds/oath-odds/.stryker-tmp/sandbox7294806/src/math/Fraction.ts:211:24)\n    at gcd (/home/runner/work/oath-odds/oath-odds/.stryker-tmp/sandbox7294806/src/math/Fraction.ts:193:24)\n    at gcd (/home/runner/work/oath-odds/oath-odds/.stryker-tmp/sandbox7294806/src/math/Fraction.ts:211:24)"}],"source":"/**\n * A fraction with a numerator and a denominator.\n */\nexport class Fraction {\n  private _numerator: number;\n  private _denominator: number;\n\n  /**\n   * Creates and immediately reduce the fraction using the greatest common\n   * divider of the numerator and denominator.\n   *\n   * @param {number} numerator\n   *   The numerator of this fraction.\n   * @param {number} denominator\n   *   The denominator of this fraction.\n   */\n  constructor(numerator: number, denominator: number) {\n    this._numerator = numerator;\n    this._denominator = denominator;\n    this._reduce();\n  }\n\n  /**\n   * Return a new fraction by adding the given fraction to this fraction.\n   *\n   * @param {Fraction} other\n   *   The fraction to add to this one.\n   * @return {Fraction}\n   *   A new fraction obtained by adding the 2 fractions.\n   */\n  public add(other: Fraction): Fraction {\n    return new Fraction(\n      this._numerator * other._denominator +\n        other._numerator * this._denominator,\n      this._denominator * other._denominator\n    );\n  }\n\n  /**\n   * Return a new fraction by multiplying the given fraction by this fraction.\n   *\n   * @param {Fraction} other\n   *   The fraction to multply by this one.\n   * @return {Fraction}\n   *   A new fraction obtained by multiplying the 2 fractions.\n   */\n  public multiply(other: Fraction): Fraction {\n    return new Fraction(\n      this._numerator * other._numerator,\n      this._denominator * other._denominator\n    );\n  }\n\n  /**\n   * Returns the number value of this fraction.\n   *\n   * @return {number}\n   *   The number value of this fraction\n   */\n  public valueOf(): number {\n    return this._numerator / this._denominator;\n  }\n\n  /**\n   * Checks if this fraction is equal to the provided fraction.\n   *\n   * @param {Fraction} other\n   *   The fraction to compare to.\n   * @return {boolean}\n   *   `true` if the 2 fractions are equal, `false` else.\n   */\n  public sameAs(other: Fraction): boolean {\n    this._reduce();\n    other._reduce();\n    return (\n      this._numerator === other._numerator &&\n      this._denominator === other._denominator\n    );\n  }\n\n  public toString(): string {\n    return `${this._numerator} / ${this._denominator}`;\n  }\n\n  /**\n   * Reduce the fraction using the greatest common divider of the numerator\n   * and the denominator.\n   */\n  private _reduce(): void {\n    const div = gcd(this._numerator, this._denominator);\n    if (div) {\n      this._numerator = this._numerator / div;\n      this._denominator = this._denominator / div;\n    }\n  }\n}\n\n/**\n * Computes the greatest common divider of 2 integers.\n *\n * @param {number} a\n *   First integer.\n * @param {number} b\n *   Second integer.\n * @returns {number}\n *   Greatest common divider of `a` and `b`.\n */\nfunction gcd(a: number, b: number): number {\n  if (b > a) {\n    return gcd(b, a);\n  }\n\n  if (b === 0) {\n    return a;\n  } else {\n    return gcd(b, a % b);\n  }\n}\n"},"/home/runner/work/oath-odds/oath-odds/src/math/RandomDevice.ts":{"language":"typescript","mutants":[{"id":"62","location":{"end":{"column":56,"line":24},"start":{"column":54,"line":24}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"63","location":{"end":{"column":4,"line":39},"start":{"column":69,"line":32}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"64","location":{"end":{"column":6,"line":38},"start":{"column":42,"line":33}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"65","location":{"end":{"column":8,"line":37},"start":{"column":35,"line":34}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"66","location":{"end":{"column":25,"line":36},"start":{"column":16,"line":36}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"67","location":{"end":{"column":4,"line":50},"start":{"column":55,"line":48}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed","description":"Killed by: OathOdds rollCampaign "}],"source":"import { Fraction } from \"./Fraction\";\nimport { WithOdds } from \"./WithOdds\";\n\n/**\n * A device generating random outcomes with specific odds. For example, a\n * classic 6-sided can be created with the following code:\n *\n * ```javascript\n * const d6 = new RandomDevice<number>([\n *   [1, new Fraction(1, 6)],\n *   [2, new Fraction(1, 6)],\n *   [3, new Fraction(1, 6)],\n *   [4, new Fraction(1, 6)],\n *   [5, new Fraction(1, 6)],\n *   [6, new Fraction(1, 6)]\n * ]);\n * ```\n *\n * @param Outcome\n *   The type of the outcome generated from this random device.\n */\nexport class RandomDevice<Outcome> {\n  /** The sets and associated odds this random device generates. */\n  private _outcomesWithOdds: WithOdds<Outcome[]>[] = [];\n\n  /**\n   * Constructor for a random device.\n   *\n   * @param {ReadonlyArray<[Outcome, Fraction]>} outcomesWithOdds\n   *   An array of (outcome, odds) pairs.\n   */\n  constructor(outcomesWithOdds: ReadonlyArray<[Outcome, Fraction]>) {\n    for (const elem of outcomesWithOdds) {\n      this._outcomesWithOdds.push({\n        oddsOfValue: elem[1],\n        value: [elem[0]],\n      });\n    }\n  }\n\n  /**\n   * Get the possible outcomes and odds for this random device.\n   *\n   * @returns {SetWithOdds<Outcome>[]}\n   *   The possible outcomes (as sets) this random device can generate along\n   * with the odds of each outcome.\n   */\n  public getOutcomesWithOdds(): WithOdds<Outcome[]>[] {\n    return this._outcomesWithOdds;\n  }\n}\n"},"/home/runner/work/oath-odds/oath-odds/src/math/combinatorics.ts":{"language":"typescript","mutants":[{"id":"68","location":{"end":{"column":2,"line":30},"start":{"column":60,"line":17}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"69","location":{"end":{"column":6,"line":27},"start":{"column":31,"line":19}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"70","location":{"end":{"column":10,"line":25},"start":{"column":29,"line":21}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"72","location":{"end":{"column":29,"line":23},"start":{"column":20,"line":23}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"71","location":{"end":{"column":12,"line":24},"start":{"column":36,"line":22}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed","description":"Killed by: OathOdds rollCampaign "}],"source":"import { flatten } from \"../utils\";\n\n/**\n * Computes the cartesian product of arrays of elements.\n *\n * ```javascript\n * cartesianProduct([1, 2], [3, 4]) // [[1, 3], [1, 4], [2, 3], [2, 4]]\n * ```\n *\n * @param T`\n *   Type of the elements in the arrays.\n * @param {T[][]} sets\n *   The sets to use for the cartesian product.\n * @returns {T[][]}\n *   The cartesian product of all provided sets.\n */\nexport function cartesianProduct<T>(...sets: T[][]): T[][] {\n  return sets.reduce(\n    (acc: T[][], set: T[]) => {\n      return flatten(\n        acc.map((x: T[]) => {\n          return set.map((y: T) => {\n            return [...x, y];\n          });\n        })\n      );\n    },\n    [[]] as T[][]\n  );\n}\n"},"/home/runner/work/oath-odds/oath-odds/src/math/index.ts":{"language":"typescript","mutants":[{"id":"73","location":{"end":{"column":2,"line":52},"start":{"column":70,"line":16}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"74","location":{"end":{"column":50,"line":18},"start":{"column":20,"line":18}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"75","location":{"end":{"column":73,"line":21},"start":{"column":32,"line":21}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"76","location":{"end":{"column":6,"line":47},"start":{"column":55,"line":24}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"77","location":{"end":{"column":27,"line":25},"start":{"column":11,"line":25}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"78","location":{"end":{"column":27,"line":25},"start":{"column":11,"line":25}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"79","location":{"end":{"column":27,"line":25},"start":{"column":11,"line":25}},"mutatorName":"EqualityOperator","replacement":"acc.length !== 0","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"80","location":{"end":{"column":8,"line":27},"start":{"column":29,"line":25}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"81","location":{"end":{"column":25,"line":26},"start":{"column":16,"line":26}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"82","location":{"end":{"column":8,"line":46},"start":{"column":14,"line":27}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"83","location":{"end":{"column":58,"line":30},"start":{"column":48,"line":29}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed","description":"Killed by: math odds combines identical sets"},{"id":"84","location":{"end":{"column":34,"line":32},"start":{"column":13,"line":32}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"85","location":{"end":{"column":34,"line":32},"start":{"column":13,"line":32}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed","description":"Killed by: math odds combines identical sets"},{"id":"86","location":{"end":{"column":34,"line":32},"start":{"column":13,"line":32}},"mutatorName":"EqualityOperator","replacement":"matchingSetIndex >= -1","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"87","location":{"end":{"column":34,"line":32},"start":{"column":13,"line":32}},"mutatorName":"EqualityOperator","replacement":"matchingSetIndex <= -1","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"88","location":{"end":{"column":34,"line":32},"start":{"column":32,"line":32}},"mutatorName":"UnaryOperator","replacement":"+1","status":"Killed","description":"Killed by: math odds combines identical sets"},{"id":"89","location":{"end":{"column":10,"line":42},"start":{"column":36,"line":32}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed","description":"Killed by: math odds combines identical sets"},{"id":"90","location":{"end":{"column":12,"line":39},"start":{"column":30,"line":34}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed","description":"Killed by: math odds combines identical sets"},{"id":"91","location":{"end":{"column":10,"line":45},"start":{"column":16,"line":42}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"92","location":{"end":{"column":35,"line":44},"start":{"column":18,"line":44}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"93","location":{"end":{"column":7,"line":48},"start":{"column":5,"line":48}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"94","location":{"end":{"column":2,"line":96},"start":{"column":18,"line":59}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"95","location":{"end":{"column":4,"line":62},"start":{"column":38,"line":60}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"96","location":{"end":{"column":30,"line":61},"start":{"column":8,"line":61}},"mutatorName":"ArrayDeclaration","replacement":"Array()","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"97","location":{"end":{"column":5,"line":65},"start":{"column":10,"line":62}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"98","location":{"end":{"column":4,"line":65},"start":{"column":39,"line":62}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"99","location":{"end":{"column":6,"line":91},"start":{"column":51,"line":68}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"100","location":{"end":{"column":27,"line":69},"start":{"column":11,"line":69}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"101","location":{"end":{"column":27,"line":69},"start":{"column":11,"line":69}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"102","location":{"end":{"column":27,"line":69},"start":{"column":11,"line":69}},"mutatorName":"EqualityOperator","replacement":"acc.length !== 0","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"103","location":{"end":{"column":8,"line":71},"start":{"column":29,"line":69}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"104","location":{"end":{"column":25,"line":70},"start":{"column":16,"line":70}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"105","location":{"end":{"column":8,"line":90},"start":{"column":14,"line":71}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"106","location":{"end":{"column":46,"line":74},"start":{"column":51,"line":73}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"107","location":{"end":{"column":37,"line":76},"start":{"column":13,"line":76}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"108","location":{"end":{"column":37,"line":76},"start":{"column":13,"line":76}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"109","location":{"end":{"column":37,"line":76},"start":{"column":13,"line":76}},"mutatorName":"EqualityOperator","replacement":"matchingResultIndex >= -1","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"110","location":{"end":{"column":37,"line":76},"start":{"column":13,"line":76}},"mutatorName":"EqualityOperator","replacement":"matchingResultIndex <= -1","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"111","location":{"end":{"column":37,"line":76},"start":{"column":35,"line":76}},"mutatorName":"UnaryOperator","replacement":"+1","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"112","location":{"end":{"column":10,"line":86},"start":{"column":39,"line":76}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"113","location":{"end":{"column":12,"line":83},"start":{"column":33,"line":78}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"115","location":{"end":{"column":35,"line":88},"start":{"column":18,"line":88}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"114","location":{"end":{"column":10,"line":89},"start":{"column":16,"line":86}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"116","location":{"end":{"column":7,"line":92},"start":{"column":5,"line":92}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"117","location":{"end":{"column":2,"line":121},"start":{"column":24,"line":116}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed","description":"Killed by: math combineSetWithOdds combines 2 sets with odds"},{"id":"118","location":{"end":{"column":4,"line":120},"start":{"column":10,"line":117}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed","description":"Killed by: math combineSetWithOdds combines 2 sets with odds"},{"id":"119","location":{"end":{"column":45,"line":119},"start":{"column":12,"line":119}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed","description":"Killed by: math combineSetWithOdds combines 2 sets with odds"}],"source":"import { arrayEquals, replace } from \"../utils\";\nimport { cartesianProduct } from \"./combinatorics\";\nimport { RandomDevice } from \"./RandomDevice\";\nimport { WithOdds } from \"./WithOdds\";\n\n/**\n * Computes all possible sets from the provided list of random devices along\n * with the odds of obtaining this particular set.\n *\n * @param {Array<RandomDevice<any>>} devices\n *   The list of random devices from which to generate possible sets.\n * @returns {Array<SetWithOdds<any>>}\n *   All possible sets that can be obtainded from this lsit of random devices\n *   along with the odds of obtaining this particular set.\n */\nexport function odds<T>(devices: RandomDevice<T>[]): WithOdds<T[]>[] {\n  const product = cartesianProduct(\n    ...devices.map((d) => d.getOutcomesWithOdds())\n  );\n\n  const combined = product.map((sets) => sets.reduce(combineSetWithOdds));\n\n  const grouped = combined.reduce(\n    (acc: WithOdds<T[]>[], current: WithOdds<T[]>) => {\n      if (acc.length === 0) {\n        return [current];\n      } else {\n        // Find an equivalent set\n        const matchingSetIndex = acc.findIndex(({ value }) =>\n          arrayEquals(value.sort(), current.value.sort())\n        );\n        if (matchingSetIndex > -1) {\n          // Update the existing set by adding the odds\n          const updatedSet = {\n            oddsOfValue: acc[matchingSetIndex].oddsOfValue.add(\n              current.oddsOfValue\n            ),\n            value: acc[matchingSetIndex].value,\n          };\n\n          return replace(acc, matchingSetIndex, updatedSet);\n        } else {\n          // Add the set\n          return [...acc, current];\n        }\n      }\n    },\n    []\n  );\n\n  return grouped;\n}\n\nexport function roll<O, R>(\n  device: RandomDevice<O>,\n  numberOfDevices: number,\n  resultTransformationFn: (outcomes: O[]) => R,\n  resultEqualFn: (a: R, b: R) => boolean\n): WithOdds<R>[] {\n  const raw: WithOdds<R>[] = odds<O>([\n    ...Array(numberOfDevices).fill(device),\n  ]).map(({ value, oddsOfValue }) => ({\n    oddsOfValue,\n    value: resultTransformationFn(value),\n  }));\n\n  const sameResultsCombined = raw.reduce(\n    (acc: WithOdds<R>[], current: WithOdds<R>) => {\n      if (acc.length === 0) {\n        return [current];\n      } else {\n        // Find an equivalent result\n        const matchingResultIndex = acc.findIndex(({ value }) =>\n          resultEqualFn(value, current.value)\n        );\n        if (matchingResultIndex > -1) {\n          // Update the existing result by adding the odds\n          const updatedResult = {\n            oddsOfValue: acc[matchingResultIndex].oddsOfValue.add(\n              current.oddsOfValue\n            ),\n            value: acc[matchingResultIndex].value,\n          };\n\n          return replace(acc, matchingResultIndex, updatedResult);\n        } else {\n          // Add the set\n          return [...acc, current];\n        }\n      }\n    },\n    []\n  );\n\n  return sameResultsCombined;\n}\n\n/**\n * Combine two sets with odds into a single one. Sets are merged and odds are\n * multiplied.\n *\n * @param O\n *   Type for the first set.\n * @param P\n *   Type for the second set.\n * @param {WithOdds<O[]>} first\n *   The first set to be combined.\n * @param {WithOdds<P[]>} second\n *   The second set to be combined.\n * @returns {WithOdds<(O | P)[]>}\n *   The result of combining the two sets.\n */\nexport function combineSetWithOdds<O, P>(\n  first: WithOdds<O[]>,\n  second: WithOdds<P[]>\n): WithOdds<(O | P)[]> {\n  return {\n    oddsOfValue: first.oddsOfValue.multiply(second.oddsOfValue),\n    value: [...first.value, ...second.value],\n  };\n}\n\nexport * from \"./combinatorics\";\nexport * from \"./Fraction\";\nexport * from \"./RandomDevice\";\nexport * from \"./WithOdds\";\n"},"/home/runner/work/oath-odds/oath-odds/src/oath/CampaignResult.ts":{"language":"typescript","mutants":[{"id":"120","location":{"end":{"column":2,"line":57},"start":{"column":11,"line":41}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"122","location":{"end":{"column":24,"line":43},"start":{"column":5,"line":43}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"121","location":{"end":{"column":24,"line":43},"start":{"column":5,"line":43}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"123","location":{"end":{"column":24,"line":43},"start":{"column":5,"line":43}},"mutatorName":"EqualityOperator","replacement":"a.attack >= b.attack","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"124","location":{"end":{"column":24,"line":43},"start":{"column":5,"line":43}},"mutatorName":"EqualityOperator","replacement":"a.attack <= b.attack","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"125","location":{"end":{"column":29,"line":43},"start":{"column":27,"line":43}},"mutatorName":"UnaryOperator","replacement":"+1","status":"Killed","description":"Killed by: Oath domain model CampaignResult campaignResultCompareFn can be used to sort results by attack descending, then defense ascending then kill ascending"},{"id":"126","location":{"end":{"column":51,"line":43},"start":{"column":32,"line":43}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"127","location":{"end":{"column":51,"line":43},"start":{"column":32,"line":43}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"128","location":{"end":{"column":51,"line":43},"start":{"column":32,"line":43}},"mutatorName":"EqualityOperator","replacement":"a.attack <= b.attack","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"129","location":{"end":{"column":51,"line":43},"start":{"column":32,"line":43}},"mutatorName":"EqualityOperator","replacement":"a.attack >= b.attack","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"130","location":{"end":{"column":26,"line":45},"start":{"column":5,"line":45}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"131","location":{"end":{"column":26,"line":45},"start":{"column":5,"line":45}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"132","location":{"end":{"column":26,"line":45},"start":{"column":5,"line":45}},"mutatorName":"EqualityOperator","replacement":"a.defense <= b.defense","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"133","location":{"end":{"column":26,"line":45},"start":{"column":5,"line":45}},"mutatorName":"EqualityOperator","replacement":"a.defense >= b.defense","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"135","location":{"end":{"column":55,"line":45},"start":{"column":34,"line":45}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"134","location":{"end":{"column":31,"line":45},"start":{"column":29,"line":45}},"mutatorName":"UnaryOperator","replacement":"+1","status":"Killed","description":"Killed by: Oath domain model CampaignResult campaignResultCompareFn can be used to sort results by attack descending, then defense ascending then kill ascending"},{"id":"136","location":{"end":{"column":55,"line":45},"start":{"column":34,"line":45}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"137","location":{"end":{"column":55,"line":45},"start":{"column":34,"line":45}},"mutatorName":"EqualityOperator","replacement":"a.defense >= b.defense","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"139","location":{"end":{"column":41,"line":46},"start":{"column":26,"line":46}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"138","location":{"end":{"column":55,"line":45},"start":{"column":34,"line":45}},"mutatorName":"EqualityOperator","replacement":"a.defense <= b.defense","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"140","location":{"end":{"column":41,"line":46},"start":{"column":26,"line":46}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"141","location":{"end":{"column":41,"line":46},"start":{"column":26,"line":46}},"mutatorName":"EqualityOperator","replacement":"a.kill <= b.kill","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"142","location":{"end":{"column":41,"line":46},"start":{"column":26,"line":46}},"mutatorName":"EqualityOperator","replacement":"a.kill >= b.kill","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"143","location":{"end":{"column":46,"line":46},"start":{"column":44,"line":46}},"mutatorName":"UnaryOperator","replacement":"+1","status":"Survived"},{"id":"144","location":{"end":{"column":64,"line":46},"start":{"column":49,"line":46}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"145","location":{"end":{"column":64,"line":46},"start":{"column":49,"line":46}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"146","location":{"end":{"column":64,"line":46},"start":{"column":49,"line":46}},"mutatorName":"EqualityOperator","replacement":"a.kill >= b.kill","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"148","location":{"end":{"column":30,"line":48},"start":{"column":7,"line":48}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"147","location":{"end":{"column":64,"line":46},"start":{"column":49,"line":46}},"mutatorName":"EqualityOperator","replacement":"a.kill <= b.kill","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"149","location":{"end":{"column":30,"line":48},"start":{"column":7,"line":48}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"150","location":{"end":{"column":30,"line":48},"start":{"column":7,"line":48}},"mutatorName":"EqualityOperator","replacement":"attackCompareDesc === 0","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"151","location":{"end":{"column":4,"line":50},"start":{"column":32,"line":48}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed","description":"Killed by: Oath domain model CampaignResult campaignResultCompareFn can be used to sort results by attack descending, then defense ascending then kill ascending"},{"id":"152","location":{"end":{"column":4,"line":56},"start":{"column":10,"line":50}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"153","location":{"end":{"column":32,"line":51},"start":{"column":9,"line":51}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"155","location":{"end":{"column":32,"line":51},"start":{"column":9,"line":51}},"mutatorName":"EqualityOperator","replacement":"defenseCompareAsc === 0","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"154","location":{"end":{"column":32,"line":51},"start":{"column":9,"line":51}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"156","location":{"end":{"column":6,"line":53},"start":{"column":34,"line":51}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed","description":"Killed by: Oath domain model CampaignResult campaignResultCompareFn can be used to sort results by attack descending, then defense ascending then kill ascending"},{"id":"157","location":{"end":{"column":6,"line":55},"start":{"column":12,"line":53}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed","description":"Killed by: OathOdds rollCampaign "}],"source":"/**\n * Type to hold the result of an attack roll.\n */\nexport interface AttackResult {\n  /** The rolled attack value. */\n  attack: number;\n\n  /** The rolled killed value (from skulls). */\n  kill: number;\n}\n\n/**\n * Type to hold the result of a defense roll.\n */\nexport interface DefenseResult {\n  /** The rolled defense value. */\n  defense: number;\n}\n\n/**\n * Type to hold a campaign result.\n */\nexport type CampaignResult = AttackResult & DefenseResult;\n\n/**\n * Compare 2 campaign results with following rules:\n * - attack descending\n * - then defense ascending\n * - then kill ascending\n *\n * @param {CampaignResult} a\n *   The first campaign result.\n * @param {CampaignResult} b\n *   The second campaign result.\n * @returns {number}\n *   1 if a > b, 0 if a = B and -1 if a < b\n */\nexport function campaignResultCompareFn(\n  a: CampaignResult,\n  b: CampaignResult\n): number {\n  const attackCompareDesc =\n    a.attack > b.attack ? -1 : a.attack < b.attack ? 1 : 0;\n  const defenseCompareAsc =\n    a.defense < b.defense ? -1 : a.defense > b.defense ? 1 : 0;\n  const killCompareAsc = a.kill < b.kill ? -1 : a.kill > b.kill ? 1 : 0;\n\n  if (attackCompareDesc !== 0) {\n    return attackCompareDesc;\n  } else {\n    if (defenseCompareAsc !== 0) {\n      return defenseCompareAsc;\n    } else {\n      return killCompareAsc;\n    }\n  }\n}\n"},"/home/runner/work/oath-odds/oath-odds/src/oath/index.ts":{"language":"typescript","mutants":[{"id":"159","location":{"end":{"column":51,"line":8},"start":{"column":3,"line":8}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"158","location":{"end":{"column":2,"line":11},"start":{"column":58,"line":7}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"160","location":{"end":{"column":44,"line":9},"start":{"column":3,"line":9}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"161","location":{"end":{"column":59,"line":10},"start":{"column":3,"line":10}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"162","location":{"end":{"column":2,"line":38},"start":{"column":70,"line":21}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"163","location":{"end":{"column":6,"line":34},"start":{"column":49,"line":23}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"164","location":{"end":{"column":55,"line":26},"start":{"column":9,"line":25}},"mutatorName":"ConditionalExpression","replacement":"case AttackDieFace.HOLLOW_SWORD:","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"165","location":{"end":{"column":54,"line":26},"start":{"column":18,"line":26}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"166","location":{"end":{"column":52,"line":26},"start":{"column":36,"line":26}},"mutatorName":"ArithmeticOperator","replacement":"acc.attack - 0.5","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"167","location":{"end":{"column":53,"line":28},"start":{"column":9,"line":27}},"mutatorName":"ConditionalExpression","replacement":"case AttackDieFace.SWORD:","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"168","location":{"end":{"column":52,"line":28},"start":{"column":18,"line":28}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"169","location":{"end":{"column":50,"line":28},"start":{"column":36,"line":28}},"mutatorName":"ArithmeticOperator","replacement":"acc.attack - 1","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"170","location":{"end":{"column":73,"line":30},"start":{"column":9,"line":29}},"mutatorName":"ConditionalExpression","replacement":"case AttackDieFace.TWO_SWORDS_AND_SKULL:","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"171","location":{"end":{"column":72,"line":30},"start":{"column":18,"line":30}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"172","location":{"end":{"column":50,"line":30},"start":{"column":36,"line":30}},"mutatorName":"ArithmeticOperator","replacement":"acc.attack - 2","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"173","location":{"end":{"column":70,"line":30},"start":{"column":58,"line":30}},"mutatorName":"ArithmeticOperator","replacement":"acc.kill - 1","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"174","location":{"end":{"column":22,"line":32},"start":{"column":9,"line":31}},"mutatorName":"ConditionalExpression","replacement":"default:","status":"Survived"},{"id":"175","location":{"end":{"column":27,"line":35},"start":{"column":5,"line":35}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"176","location":{"end":{"column":52,"line":37},"start":{"column":10,"line":37}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"177","location":{"end":{"column":2,"line":46},"start":{"column":60,"line":41}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"178","location":{"end":{"column":45,"line":42},"start":{"column":3,"line":42}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"180","location":{"end":{"column":51,"line":44},"start":{"column":3,"line":44}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"179","location":{"end":{"column":46,"line":43},"start":{"column":3,"line":43}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"182","location":{"end":{"column":2,"line":74},"start":{"column":73,"line":56}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"181","location":{"end":{"column":46,"line":45},"start":{"column":3,"line":45}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"184","location":{"end":{"column":22,"line":61},"start":{"column":9,"line":60}},"mutatorName":"ConditionalExpression","replacement":"case DefenseDieFace.BLANK:","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"183","location":{"end":{"column":6,"line":71},"start":{"column":51,"line":58}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"185","location":{"end":{"column":55,"line":63},"start":{"column":9,"line":62}},"mutatorName":"ConditionalExpression","replacement":"case DefenseDieFace.SHIELD:","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"186","location":{"end":{"column":54,"line":63},"start":{"column":18,"line":63}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"187","location":{"end":{"column":52,"line":63},"start":{"column":37,"line":63}},"mutatorName":"ArithmeticOperator","replacement":"acc.defense - 1","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"188","location":{"end":{"column":55,"line":65},"start":{"column":9,"line":64}},"mutatorName":"ConditionalExpression","replacement":"case DefenseDieFace.TWO_SHIELDS:","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"190","location":{"end":{"column":52,"line":65},"start":{"column":37,"line":65}},"mutatorName":"ArithmeticOperator","replacement":"acc.defense - 2","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"189","location":{"end":{"column":54,"line":65},"start":{"column":18,"line":65}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"191","location":{"end":{"column":55,"line":67},"start":{"column":9,"line":66}},"mutatorName":"ConditionalExpression","replacement":"case DefenseDieFace.DOUBLE:","status":"Killed","description":"Killed by: Oath domain model toDefenseResult can sum up a bunch of die faces into a campaign result"},{"id":"192","location":{"end":{"column":54,"line":67},"start":{"column":18,"line":67}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"193","location":{"end":{"column":52,"line":67},"start":{"column":37,"line":67}},"mutatorName":"ArithmeticOperator","replacement":"acc.defense / 2","status":"Killed","description":"Killed by: Oath domain model toDefenseResult can sum up a bunch of die faces into a campaign result"},{"id":"194","location":{"end":{"column":22,"line":69},"start":{"column":9,"line":68}},"mutatorName":"ConditionalExpression","replacement":"default:","status":"Survived"},{"id":"195","location":{"end":{"column":19,"line":72},"start":{"column":5,"line":72}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed","description":"Killed by: OathOdds rollCampaign "}],"source":"import { Fraction, RandomDevice } from \"../math\";\nimport { AttackDieFace } from \"./AttackDieFace\";\nimport { AttackResult, DefenseResult } from \"./CampaignResult\";\nimport { DefenseDieFace } from \"./DefenseDieFace\";\n\n/** The Oath attack (red) die. */\nexport const AttackDie = new RandomDevice<AttackDieFace>([\n  [AttackDieFace.HOLLOW_SWORD, new Fraction(3, 6)],\n  [AttackDieFace.SWORD, new Fraction(2, 6)],\n  [AttackDieFace.TWO_SWORDS_AND_SKULL, new Fraction(1, 6)],\n]);\n\n/**\n * Sums up a set of attack die faces into an attack roll result.\n *\n * @param {DieFace[]} faces\n *   A set of attack die faces.\n * @returns {CampaignResult}\n *   The attack roll result after adding all die faces.\n */\nexport function toAttackResult(faces: AttackDieFace[]): AttackResult {\n  const raw = faces.sort().reduce(\n    (acc: AttackResult, face: AttackDieFace) => {\n      switch (face) {\n        case AttackDieFace.HOLLOW_SWORD:\n          return { ...acc, attack: acc.attack + 0.5 };\n        case AttackDieFace.SWORD:\n          return { ...acc, attack: acc.attack + 1 };\n        case AttackDieFace.TWO_SWORDS_AND_SKULL:\n          return { ...acc, attack: acc.attack + 2, kill: acc.kill + 1 };\n        default:\n          return acc;\n      }\n    },\n    { attack: 0, kill: 0 }\n  );\n  return { ...raw, attack: Math.floor(raw.attack) };\n}\n\n/** The Oath defense (blue) die. */\nexport const DefenseDie = new RandomDevice<DefenseDieFace>([\n  [DefenseDieFace.BLANK, new Fraction(2, 6)],\n  [DefenseDieFace.SHIELD, new Fraction(2, 6)],\n  [DefenseDieFace.TWO_SHIELDS, new Fraction(1, 6)],\n  [DefenseDieFace.DOUBLE, new Fraction(1, 6)],\n]);\n\n/**\n * Sums up a set of defense die faces into a defense roll result.\n *\n * @param {DieFace[]} faces\n *   A set of defense die faces.\n * @returns {CampaignResult}\n *   The defense roll result after adding all die faces.\n */\nexport function toDefenseResult(faces: DefenseDieFace[]): DefenseResult {\n  return faces.sort().reduce(\n    (acc: DefenseResult, face: DefenseDieFace) => {\n      switch (face) {\n        case DefenseDieFace.BLANK:\n          return acc;\n        case DefenseDieFace.SHIELD:\n          return { ...acc, defense: acc.defense + 1 };\n        case DefenseDieFace.TWO_SHIELDS:\n          return { ...acc, defense: acc.defense + 2 };\n        case DefenseDieFace.DOUBLE:\n          return { ...acc, defense: acc.defense * 2 };\n        default:\n          return acc;\n      }\n    },\n    { defense: 0 }\n  );\n}\n\nexport * from \"./AttackDieFace\";\nexport * from \"./CampaignResult\";\nexport * from \"./DefenseDieFace\";\n"},"/home/runner/work/oath-odds/oath-odds/src/utils/arrays.ts":{"language":"typescript","mutants":[{"id":"196","location":{"end":{"column":2,"line":13},"start":{"column":47,"line":11}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"198","location":{"end":{"column":28,"line":12},"start":{"column":26,"line":12}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"197","location":{"end":{"column":12,"line":12},"start":{"column":10,"line":12}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Survived"},{"id":"199","location":{"end":{"column":2,"line":43},"start":{"column":57,"line":27}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed","description":"Killed by: math odds with only 1 random device"},{"id":"200","location":{"end":{"column":46,"line":28},"start":{"column":7,"line":28}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed","description":"Killed by: math odds with only 1 random device"},{"id":"201","location":{"end":{"column":46,"line":28},"start":{"column":7,"line":28}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"202","location":{"end":{"column":46,"line":28},"start":{"column":7,"line":28}},"mutatorName":"BooleanLiteral","replacement":"Array.isArray(a) && Array.isArray(b)","status":"Killed","description":"Killed by: math odds with only 1 random device"},{"id":"203","location":{"end":{"column":45,"line":28},"start":{"column":9,"line":28}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"204","location":{"end":{"column":45,"line":28},"start":{"column":9,"line":28}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed","description":"Killed by: math odds with only 1 random device"},{"id":"205","location":{"end":{"column":45,"line":28},"start":{"column":9,"line":28}},"mutatorName":"LogicalOperator","replacement":"Array.isArray(a) || Array.isArray(b)","status":"Survived"},{"id":"206","location":{"end":{"column":4,"line":30},"start":{"column":48,"line":28}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"207","location":{"end":{"column":17,"line":29},"start":{"column":12,"line":29}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Survived"},{"id":"208","location":{"end":{"column":28,"line":32},"start":{"column":7,"line":32}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed","description":"Killed by: math odds with only 1 random device"},{"id":"210","location":{"end":{"column":28,"line":32},"start":{"column":7,"line":32}},"mutatorName":"EqualityOperator","replacement":"a.length === b.length","status":"Killed","description":"Killed by: math odds with only 1 random device"},{"id":"209","location":{"end":{"column":28,"line":32},"start":{"column":7,"line":32}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"211","location":{"end":{"column":4,"line":34},"start":{"column":30,"line":32}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"212","location":{"end":{"column":17,"line":33},"start":{"column":12,"line":33}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Survived"},{"id":"213","location":{"end":{"column":31,"line":36},"start":{"column":19,"line":36}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"214","location":{"end":{"column":31,"line":36},"start":{"column":19,"line":36}},"mutatorName":"EqualityOperator","replacement":"i <= a.length","status":"Survived"},{"id":"215","location":{"end":{"column":31,"line":36},"start":{"column":19,"line":36}},"mutatorName":"EqualityOperator","replacement":"i >= a.length","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"217","location":{"end":{"column":4,"line":40},"start":{"column":38,"line":36}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"218","location":{"end":{"column":22,"line":37},"start":{"column":9,"line":37}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed","description":"Killed by: math odds with only 1 random device"},{"id":"219","location":{"end":{"column":22,"line":37},"start":{"column":9,"line":37}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"220","location":{"end":{"column":22,"line":37},"start":{"column":9,"line":37}},"mutatorName":"EqualityOperator","replacement":"a[i] === b[i]","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"221","location":{"end":{"column":6,"line":39},"start":{"column":24,"line":37}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"222","location":{"end":{"column":19,"line":38},"start":{"column":14,"line":38}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"223","location":{"end":{"column":14,"line":42},"start":{"column":10,"line":42}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Killed","description":"Killed by: math odds with only 1 random device"},{"id":"224","location":{"end":{"column":2,"line":65},"start":{"column":67,"line":59}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"225","location":{"end":{"column":37,"line":60},"start":{"column":7,"line":60}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed","description":"Killed by: utils replace should return the same array if specified index is < 0"},{"id":"226","location":{"end":{"column":37,"line":60},"start":{"column":7,"line":60}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"227","location":{"end":{"column":37,"line":60},"start":{"column":7,"line":60}},"mutatorName":"LogicalOperator","replacement":"idx >= 0 || idx < elems.length","status":"Killed","description":"Killed by: utils replace should return the same array if specified index is < 0"},{"id":"228","location":{"end":{"column":15,"line":60},"start":{"column":7,"line":60}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed","description":"Killed by: utils replace should return the same array if specified index is < 0"},{"id":"229","location":{"end":{"column":15,"line":60},"start":{"column":7,"line":60}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"230","location":{"end":{"column":15,"line":60},"start":{"column":7,"line":60}},"mutatorName":"EqualityOperator","replacement":"idx > 0","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"231","location":{"end":{"column":15,"line":60},"start":{"column":7,"line":60}},"mutatorName":"EqualityOperator","replacement":"idx < 0","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"232","location":{"end":{"column":37,"line":60},"start":{"column":19,"line":60}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed","description":"Killed by: utils replace should return the same array if specified index is > array length"},{"id":"233","location":{"end":{"column":37,"line":60},"start":{"column":19,"line":60}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"234","location":{"end":{"column":37,"line":60},"start":{"column":19,"line":60}},"mutatorName":"EqualityOperator","replacement":"idx <= elems.length","status":"Killed","description":"Killed by: utils replace should return the same array if specified index is > array length"},{"id":"235","location":{"end":{"column":37,"line":60},"start":{"column":19,"line":60}},"mutatorName":"EqualityOperator","replacement":"idx >= elems.length","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"236","location":{"end":{"column":4,"line":62},"start":{"column":39,"line":60}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"237","location":{"end":{"column":67,"line":61},"start":{"column":12,"line":61}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"238","location":{"end":{"column":65,"line":61},"start":{"column":58,"line":61}},"mutatorName":"ArithmeticOperator","replacement":"idx - 1","status":"Killed","description":"Killed by: OathOdds rollCampaign "},{"id":"239","location":{"end":{"column":4,"line":64},"start":{"column":10,"line":62}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed","description":"Killed by: utils replace should return the same array if specified index is < 0"},{"id":"240","location":{"end":{"column":22,"line":63},"start":{"column":12,"line":63}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed","description":"Killed by: utils replace should return the same array if specified index is < 0"},{"id":"216","location":{"end":{"column":36,"line":36},"start":{"column":33,"line":36}},"mutatorName":"UpdateOperator","replacement":"i--","status":"Timeout"}],"source":"/**\n * Flattens an array of arrays.\n *\n * @param T\n *   The type of the elements contained in the arrays.\n * @param {T[][]} elems\n *   An array of arrays.\n * @returns {T[]}\n *   A flattened array.\n */\nexport function flatten<T>(elems: T[][]): T[] {\n  return [].concat.apply([], elems);\n}\n\n/**\n * Compare 2 arrays using `===`. No deep comparaison.\n *\n * @param T\n *   The type of the elements contained in the arrays.\n * @param {T[]} a\n *   First array.\n * @param {T[]} b\n *   Second array.\n * @return {boolean}\n *   True if `a` and `b` contains the same values in the same order.\n */\nexport function arrayEquals<T>(a: T[], b: T[]): boolean {\n  if (!(Array.isArray(a) && Array.isArray(b))) {\n    return false;\n  }\n\n  if (a.length !== b.length) {\n    return false;\n  }\n\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] !== b[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Returns a new array with element at index `idx` replaced with `elem`.\n *\n * @param T\n *   The type of the elements contained in the array.\n * @param {T[]} elems\n *   The original array.\n * @param {number} idx\n *   The index at which to replace.\n * @param {T} elem\n *   The element to place at the specified index.\n * @return {T[]}\n *   A new array with the element replaced.\n */\nexport function replace<T>(elems: T[], idx: number, elem: T): T[] {\n  if (idx >= 0 && idx < elems.length) {\n    return [...elems.slice(0, idx), elem, ...elems.slice(idx + 1)];\n  } else {\n    return [...elems];\n  }\n}\n"}},"schemaVersion":"1.0","thresholds":{"high":80,"low":60,"break":null}};